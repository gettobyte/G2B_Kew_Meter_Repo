
test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f98  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08004050  08004050  00005050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004108  08004108  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004108  08004108  0000600c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004108  08004108  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004108  08004108  00005108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800410c  0800410c  0000510c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004110  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  0800411c  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  0800411c  00006104  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b9f0  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d6f  00000000  00000000  00011a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  00013798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000997  00000000  00000000  000143f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000151f3  00000000  00000000  00014d8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dc82  00000000  00000000  00029f82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a7a6  00000000  00000000  00037c04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c23aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ce0  00000000  00000000  000c23f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000c50d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004038 	.word	0x08004038

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08004038 	.word	0x08004038

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	@ 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	@ 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			@ (mov r8, r8)

080003ec <ADC_Convert_Rank1>:
        value /= 10;
    }
}

uint16_t ADC_Convert_Rank1(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b084      	sub	sp, #16
 80003f0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80003f2:	1d3b      	adds	r3, r7, #4
 80003f4:	0018      	movs	r0, r3
 80003f6:	230c      	movs	r3, #12
 80003f8:	001a      	movs	r2, r3
 80003fa:	2100      	movs	r1, #0
 80003fc:	f003 fdf0 	bl	8003fe0 <memset>

	  sConfig.Channel = ADC_CHANNEL_9;
 8000400:	1d3b      	adds	r3, r7, #4
 8000402:	4a1b      	ldr	r2, [pc, #108]	@ (8000470 <ADC_Convert_Rank1+0x84>)
 8000404:	601a      	str	r2, [r3, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	2200      	movs	r2, #0
 800040a:	605a      	str	r2, [r3, #4]
	  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800040c:	1d3b      	adds	r3, r7, #4
 800040e:	2200      	movs	r2, #0
 8000410:	609a      	str	r2, [r3, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000412:	1d3a      	adds	r2, r7, #4
 8000414:	4b17      	ldr	r3, [pc, #92]	@ (8000474 <ADC_Convert_Rank1+0x88>)
 8000416:	0011      	movs	r1, r2
 8000418:	0018      	movs	r0, r3
 800041a:	f001 f9f7 	bl	800180c <HAL_ADC_ConfigChannel>
 800041e:	1e03      	subs	r3, r0, #0
 8000420:	d001      	beq.n	8000426 <ADC_Convert_Rank1+0x3a>
	  {
	    Error_Handler();
 8000422:	f000 fb13 	bl	8000a4c <Error_Handler>
	  }

	status = HAL_ADC_Start(&hadc1);
 8000426:	4b13      	ldr	r3, [pc, #76]	@ (8000474 <ADC_Convert_Rank1+0x88>)
 8000428:	0018      	movs	r0, r3
 800042a:	f001 f8c5 	bl	80015b8 <HAL_ADC_Start>
 800042e:	0003      	movs	r3, r0
 8000430:	001a      	movs	r2, r3
 8000432:	4b11      	ldr	r3, [pc, #68]	@ (8000478 <ADC_Convert_Rank1+0x8c>)
 8000434:	701a      	strb	r2, [r3, #0]
	status = HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000436:	2301      	movs	r3, #1
 8000438:	425a      	negs	r2, r3
 800043a:	4b0e      	ldr	r3, [pc, #56]	@ (8000474 <ADC_Convert_Rank1+0x88>)
 800043c:	0011      	movs	r1, r2
 800043e:	0018      	movs	r0, r3
 8000440:	f001 f944 	bl	80016cc <HAL_ADC_PollForConversion>
 8000444:	0003      	movs	r3, r0
 8000446:	001a      	movs	r2, r3
 8000448:	4b0b      	ldr	r3, [pc, #44]	@ (8000478 <ADC_Convert_Rank1+0x8c>)
 800044a:	701a      	strb	r2, [r3, #0]
	adc_Value_1 = HAL_ADC_GetValue(&hadc1);
 800044c:	4b09      	ldr	r3, [pc, #36]	@ (8000474 <ADC_Convert_Rank1+0x88>)
 800044e:	0018      	movs	r0, r3
 8000450:	f001 f9d0 	bl	80017f4 <HAL_ADC_GetValue>
 8000454:	0003      	movs	r3, r0
 8000456:	b29a      	uxth	r2, r3
 8000458:	4b08      	ldr	r3, [pc, #32]	@ (800047c <ADC_Convert_Rank1+0x90>)
 800045a:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 800045c:	4b05      	ldr	r3, [pc, #20]	@ (8000474 <ADC_Convert_Rank1+0x88>)
 800045e:	0018      	movs	r0, r3
 8000460:	f001 f8f8 	bl	8001654 <HAL_ADC_Stop>

	return adc_Value_1;
 8000464:	4b05      	ldr	r3, [pc, #20]	@ (800047c <ADC_Convert_Rank1+0x90>)
 8000466:	881b      	ldrh	r3, [r3, #0]
}
 8000468:	0018      	movs	r0, r3
 800046a:	46bd      	mov	sp, r7
 800046c:	b004      	add	sp, #16
 800046e:	bd80      	pop	{r7, pc}
 8000470:	24000200 	.word	0x24000200
 8000474:	20000028 	.word	0x20000028
 8000478:	200000d8 	.word	0x200000d8
 800047c:	200000e2 	.word	0x200000e2

08000480 <ADC_Convert_Rank2>:

uint16_t ADC_Convert_Rank2(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b084      	sub	sp, #16
 8000484:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000486:	1d3b      	adds	r3, r7, #4
 8000488:	0018      	movs	r0, r3
 800048a:	230c      	movs	r3, #12
 800048c:	001a      	movs	r2, r3
 800048e:	2100      	movs	r1, #0
 8000490:	f003 fda6 	bl	8003fe0 <memset>

	  sConfig.Channel = ADC_CHANNEL_8;
 8000494:	1d3b      	adds	r3, r7, #4
 8000496:	4a1a      	ldr	r2, [pc, #104]	@ (8000500 <ADC_Convert_Rank2+0x80>)
 8000498:	601a      	str	r2, [r3, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 800049a:	1d3b      	adds	r3, r7, #4
 800049c:	2200      	movs	r2, #0
 800049e:	605a      	str	r2, [r3, #4]
	  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80004a0:	1d3b      	adds	r3, r7, #4
 80004a2:	2200      	movs	r2, #0
 80004a4:	609a      	str	r2, [r3, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004a6:	1d3a      	adds	r2, r7, #4
 80004a8:	4b16      	ldr	r3, [pc, #88]	@ (8000504 <ADC_Convert_Rank2+0x84>)
 80004aa:	0011      	movs	r1, r2
 80004ac:	0018      	movs	r0, r3
 80004ae:	f001 f9ad 	bl	800180c <HAL_ADC_ConfigChannel>
 80004b2:	1e03      	subs	r3, r0, #0
 80004b4:	d001      	beq.n	80004ba <ADC_Convert_Rank2+0x3a>
	  {
	    Error_Handler();
 80004b6:	f000 fac9 	bl	8000a4c <Error_Handler>
	  }

	status = HAL_ADC_Start(&hadc1);
 80004ba:	4b12      	ldr	r3, [pc, #72]	@ (8000504 <ADC_Convert_Rank2+0x84>)
 80004bc:	0018      	movs	r0, r3
 80004be:	f001 f87b 	bl	80015b8 <HAL_ADC_Start>
 80004c2:	0003      	movs	r3, r0
 80004c4:	001a      	movs	r2, r3
 80004c6:	4b10      	ldr	r3, [pc, #64]	@ (8000508 <ADC_Convert_Rank2+0x88>)
 80004c8:	701a      	strb	r2, [r3, #0]
	status = HAL_ADC_PollForConversion(&hadc1, 1);
 80004ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000504 <ADC_Convert_Rank2+0x84>)
 80004cc:	2101      	movs	r1, #1
 80004ce:	0018      	movs	r0, r3
 80004d0:	f001 f8fc 	bl	80016cc <HAL_ADC_PollForConversion>
 80004d4:	0003      	movs	r3, r0
 80004d6:	001a      	movs	r2, r3
 80004d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000508 <ADC_Convert_Rank2+0x88>)
 80004da:	701a      	strb	r2, [r3, #0]
	adc_Value_2= HAL_ADC_GetValue(&hadc1);
 80004dc:	4b09      	ldr	r3, [pc, #36]	@ (8000504 <ADC_Convert_Rank2+0x84>)
 80004de:	0018      	movs	r0, r3
 80004e0:	f001 f988 	bl	80017f4 <HAL_ADC_GetValue>
 80004e4:	0003      	movs	r3, r0
 80004e6:	b29a      	uxth	r2, r3
 80004e8:	4b08      	ldr	r3, [pc, #32]	@ (800050c <ADC_Convert_Rank2+0x8c>)
 80004ea:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 80004ec:	4b05      	ldr	r3, [pc, #20]	@ (8000504 <ADC_Convert_Rank2+0x84>)
 80004ee:	0018      	movs	r0, r3
 80004f0:	f001 f8b0 	bl	8001654 <HAL_ADC_Stop>

	return adc_Value_2;
 80004f4:	4b05      	ldr	r3, [pc, #20]	@ (800050c <ADC_Convert_Rank2+0x8c>)
 80004f6:	881b      	ldrh	r3, [r3, #0]
}
 80004f8:	0018      	movs	r0, r3
 80004fa:	46bd      	mov	sp, r7
 80004fc:	b004      	add	sp, #16
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	20000100 	.word	0x20000100
 8000504:	20000028 	.word	0x20000028
 8000508:	200000d8 	.word	0x200000d8
 800050c:	200000e4 	.word	0x200000e4

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f000 fc93 	bl	8000e40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f8db 	bl	80006d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051e:	f000 fa35 	bl	800098c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000522:	f000 f933 	bl	800078c <MX_ADC1_Init>
  MX_TIM3_Init();
 8000526:	f000 f9b5 	bl	8000894 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  status = HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 800052a:	4b5d      	ldr	r3, [pc, #372]	@ (80006a0 <main+0x190>)
 800052c:	2100      	movs	r1, #0
 800052e:	0018      	movs	r0, r3
 8000530:	f002 fd82 	bl	8003038 <HAL_TIM_OC_Start_IT>
 8000534:	0003      	movs	r3, r0
 8000536:	001a      	movs	r2, r3
 8000538:	4b5a      	ldr	r3, [pc, #360]	@ (80006a4 <main+0x194>)
 800053a:	701a      	strb	r2, [r3, #0]
//	  HAL_Delay(100);

	  // === Case 1: Show raw 12-bit ADC value (0–4095) ===
	  // Comment this block when testing voltage

	  sum_1 = 0;
 800053c:	4b5a      	ldr	r3, [pc, #360]	@ (80006a8 <main+0x198>)
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
	  sum_2 = 0;
 8000542:	4b5a      	ldr	r3, [pc, #360]	@ (80006ac <main+0x19c>)
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]

	  for (uint8_t i = 0; i < SAMPLES; i++)
 8000548:	1dfb      	adds	r3, r7, #7
 800054a:	2200      	movs	r2, #0
 800054c:	701a      	strb	r2, [r3, #0]
 800054e:	e020      	b.n	8000592 <main+0x82>
	  {
		  a = ADC_Convert_Rank1();
 8000550:	f7ff ff4c 	bl	80003ec <ADC_Convert_Rank1>
 8000554:	0003      	movs	r3, r0
 8000556:	001a      	movs	r2, r3
 8000558:	4b55      	ldr	r3, [pc, #340]	@ (80006b0 <main+0x1a0>)
 800055a:	801a      	strh	r2, [r3, #0]
		  b = ADC_Convert_Rank2();
 800055c:	f7ff ff90 	bl	8000480 <ADC_Convert_Rank2>
 8000560:	0003      	movs	r3, r0
 8000562:	001a      	movs	r2, r3
 8000564:	4b53      	ldr	r3, [pc, #332]	@ (80006b4 <main+0x1a4>)
 8000566:	801a      	strh	r2, [r3, #0]

		  sum_1 += a;
 8000568:	4b51      	ldr	r3, [pc, #324]	@ (80006b0 <main+0x1a0>)
 800056a:	881b      	ldrh	r3, [r3, #0]
 800056c:	001a      	movs	r2, r3
 800056e:	4b4e      	ldr	r3, [pc, #312]	@ (80006a8 <main+0x198>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	18d2      	adds	r2, r2, r3
 8000574:	4b4c      	ldr	r3, [pc, #304]	@ (80006a8 <main+0x198>)
 8000576:	601a      	str	r2, [r3, #0]
		  sum_2 += b;
 8000578:	4b4e      	ldr	r3, [pc, #312]	@ (80006b4 <main+0x1a4>)
 800057a:	881b      	ldrh	r3, [r3, #0]
 800057c:	001a      	movs	r2, r3
 800057e:	4b4b      	ldr	r3, [pc, #300]	@ (80006ac <main+0x19c>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	18d2      	adds	r2, r2, r3
 8000584:	4b49      	ldr	r3, [pc, #292]	@ (80006ac <main+0x19c>)
 8000586:	601a      	str	r2, [r3, #0]
	  for (uint8_t i = 0; i < SAMPLES; i++)
 8000588:	1dfb      	adds	r3, r7, #7
 800058a:	781a      	ldrb	r2, [r3, #0]
 800058c:	1dfb      	adds	r3, r7, #7
 800058e:	3201      	adds	r2, #1
 8000590:	701a      	strb	r2, [r3, #0]
 8000592:	1dfb      	adds	r3, r7, #7
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	2bff      	cmp	r3, #255	@ 0xff
 8000598:	d1da      	bne.n	8000550 <main+0x40>
	  }

	  average_1 = sum_1 / SAMPLES;
 800059a:	4b43      	ldr	r3, [pc, #268]	@ (80006a8 <main+0x198>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	21ff      	movs	r1, #255	@ 0xff
 80005a0:	0018      	movs	r0, r3
 80005a2:	f7ff fdad 	bl	8000100 <__udivsi3>
 80005a6:	0003      	movs	r3, r0
 80005a8:	b29a      	uxth	r2, r3
 80005aa:	4b43      	ldr	r3, [pc, #268]	@ (80006b8 <main+0x1a8>)
 80005ac:	801a      	strh	r2, [r3, #0]

	  average_2 = sum_2 / SAMPLES;
 80005ae:	4b3f      	ldr	r3, [pc, #252]	@ (80006ac <main+0x19c>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	21ff      	movs	r1, #255	@ 0xff
 80005b4:	0018      	movs	r0, r3
 80005b6:	f7ff fda3 	bl	8000100 <__udivsi3>
 80005ba:	0003      	movs	r3, r0
 80005bc:	b29a      	uxth	r2, r3
 80005be:	4b3f      	ldr	r3, [pc, #252]	@ (80006bc <main+0x1ac>)
 80005c0:	801a      	strh	r2, [r3, #0]

	  deviation = ((average_1 - average_2) * 8);
 80005c2:	4b3d      	ldr	r3, [pc, #244]	@ (80006b8 <main+0x1a8>)
 80005c4:	881a      	ldrh	r2, [r3, #0]
 80005c6:	4b3d      	ldr	r3, [pc, #244]	@ (80006bc <main+0x1ac>)
 80005c8:	881b      	ldrh	r3, [r3, #0]
 80005ca:	1ad3      	subs	r3, r2, r3
 80005cc:	b29b      	uxth	r3, r3
 80005ce:	00db      	lsls	r3, r3, #3
 80005d0:	b29a      	uxth	r2, r3
 80005d2:	4b3b      	ldr	r3, [pc, #236]	@ (80006c0 <main+0x1b0>)
 80005d4:	801a      	strh	r2, [r3, #0]

//	  Apply EMA filtering
	  filtered_adc = ((filtered_adc * ((1 << SMOOTHING_SHIFT) - 1)) + deviation) >> SMOOTHING_SHIFT;
 80005d6:	4b3b      	ldr	r3, [pc, #236]	@ (80006c4 <main+0x1b4>)
 80005d8:	881b      	ldrh	r3, [r3, #0]
 80005da:	001a      	movs	r2, r3
 80005dc:	0013      	movs	r3, r2
 80005de:	00db      	lsls	r3, r3, #3
 80005e0:	1a9b      	subs	r3, r3, r2
 80005e2:	4a37      	ldr	r2, [pc, #220]	@ (80006c0 <main+0x1b0>)
 80005e4:	8812      	ldrh	r2, [r2, #0]
 80005e6:	189b      	adds	r3, r3, r2
 80005e8:	10db      	asrs	r3, r3, #3
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	4b35      	ldr	r3, [pc, #212]	@ (80006c4 <main+0x1b4>)
 80005ee:	801a      	strh	r2, [r3, #0]

	  current_A = ((filtered_adc) * 150) / (4095);  // Scale to mV
 80005f0:	4b34      	ldr	r3, [pc, #208]	@ (80006c4 <main+0x1b4>)
 80005f2:	881b      	ldrh	r3, [r3, #0]
 80005f4:	001a      	movs	r2, r3
 80005f6:	2396      	movs	r3, #150	@ 0x96
 80005f8:	4353      	muls	r3, r2
 80005fa:	4933      	ldr	r1, [pc, #204]	@ (80006c8 <main+0x1b8>)
 80005fc:	0018      	movs	r0, r3
 80005fe:	f7ff fe09 	bl	8000214 <__divsi3>
 8000602:	0003      	movs	r3, r0
 8000604:	b29a      	uxth	r2, r3
 8000606:	4b31      	ldr	r3, [pc, #196]	@ (80006cc <main+0x1bc>)
 8000608:	801a      	strh	r2, [r3, #0]

	  // Show raw value on first 4 digits (pad with zeros)
	  digits[2] = (current_A / 1000) % 10;
 800060a:	4b30      	ldr	r3, [pc, #192]	@ (80006cc <main+0x1bc>)
 800060c:	881b      	ldrh	r3, [r3, #0]
 800060e:	22fa      	movs	r2, #250	@ 0xfa
 8000610:	0091      	lsls	r1, r2, #2
 8000612:	0018      	movs	r0, r3
 8000614:	f7ff fd74 	bl	8000100 <__udivsi3>
 8000618:	0003      	movs	r3, r0
 800061a:	b29b      	uxth	r3, r3
 800061c:	210a      	movs	r1, #10
 800061e:	0018      	movs	r0, r3
 8000620:	f7ff fdf4 	bl	800020c <__aeabi_uidivmod>
 8000624:	000b      	movs	r3, r1
 8000626:	b29b      	uxth	r3, r3
 8000628:	b2da      	uxtb	r2, r3
 800062a:	4b29      	ldr	r3, [pc, #164]	@ (80006d0 <main+0x1c0>)
 800062c:	709a      	strb	r2, [r3, #2]
	  digits[3] = (current_A / 100) % 10;
 800062e:	4b27      	ldr	r3, [pc, #156]	@ (80006cc <main+0x1bc>)
 8000630:	881b      	ldrh	r3, [r3, #0]
 8000632:	2164      	movs	r1, #100	@ 0x64
 8000634:	0018      	movs	r0, r3
 8000636:	f7ff fd63 	bl	8000100 <__udivsi3>
 800063a:	0003      	movs	r3, r0
 800063c:	b29b      	uxth	r3, r3
 800063e:	210a      	movs	r1, #10
 8000640:	0018      	movs	r0, r3
 8000642:	f7ff fde3 	bl	800020c <__aeabi_uidivmod>
 8000646:	000b      	movs	r3, r1
 8000648:	b29b      	uxth	r3, r3
 800064a:	b2da      	uxtb	r2, r3
 800064c:	4b20      	ldr	r3, [pc, #128]	@ (80006d0 <main+0x1c0>)
 800064e:	70da      	strb	r2, [r3, #3]
	  digits[4] = (current_A / 10) % 10;
 8000650:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <main+0x1bc>)
 8000652:	881b      	ldrh	r3, [r3, #0]
 8000654:	210a      	movs	r1, #10
 8000656:	0018      	movs	r0, r3
 8000658:	f7ff fd52 	bl	8000100 <__udivsi3>
 800065c:	0003      	movs	r3, r0
 800065e:	b29b      	uxth	r3, r3
 8000660:	210a      	movs	r1, #10
 8000662:	0018      	movs	r0, r3
 8000664:	f7ff fdd2 	bl	800020c <__aeabi_uidivmod>
 8000668:	000b      	movs	r3, r1
 800066a:	b29b      	uxth	r3, r3
 800066c:	b2da      	uxtb	r2, r3
 800066e:	4b18      	ldr	r3, [pc, #96]	@ (80006d0 <main+0x1c0>)
 8000670:	711a      	strb	r2, [r3, #4]
	  digits[5] = current_A % 10;
 8000672:	4b16      	ldr	r3, [pc, #88]	@ (80006cc <main+0x1bc>)
 8000674:	881b      	ldrh	r3, [r3, #0]
 8000676:	210a      	movs	r1, #10
 8000678:	0018      	movs	r0, r3
 800067a:	f7ff fdc7 	bl	800020c <__aeabi_uidivmod>
 800067e:	000b      	movs	r3, r1
 8000680:	b29b      	uxth	r3, r3
 8000682:	b2da      	uxtb	r2, r3
 8000684:	4b12      	ldr	r3, [pc, #72]	@ (80006d0 <main+0x1c0>)
 8000686:	715a      	strb	r2, [r3, #5]
//	  digits[3] = (average_2 / 100) % 10;
//	  digits[4] = (average_2 / 10) % 10;
//	  digits[5] = average_2 % 10;
//
	  // Optional: blank last 2 digits
	  digits[0] = digits[1] = 10;  // Assuming 10 means blank pattern
 8000688:	4b11      	ldr	r3, [pc, #68]	@ (80006d0 <main+0x1c0>)
 800068a:	220a      	movs	r2, #10
 800068c:	705a      	strb	r2, [r3, #1]
 800068e:	4b10      	ldr	r3, [pc, #64]	@ (80006d0 <main+0x1c0>)
 8000690:	785a      	ldrb	r2, [r3, #1]
 8000692:	4b0f      	ldr	r3, [pc, #60]	@ (80006d0 <main+0x1c0>)
 8000694:	701a      	strb	r2, [r3, #0]

	  HAL_Delay(100);
 8000696:	2064      	movs	r0, #100	@ 0x64
 8000698:	f000 fc58 	bl	8000f4c <HAL_Delay>
	  sum_1 = 0;
 800069c:	e74e      	b.n	800053c <main+0x2c>
 800069e:	46c0      	nop			@ (mov r8, r8)
 80006a0:	2000008c 	.word	0x2000008c
 80006a4:	200000d8 	.word	0x200000d8
 80006a8:	200000e8 	.word	0x200000e8
 80006ac:	200000ec 	.word	0x200000ec
 80006b0:	200000f6 	.word	0x200000f6
 80006b4:	200000f8 	.word	0x200000f8
 80006b8:	200000f0 	.word	0x200000f0
 80006bc:	200000f2 	.word	0x200000f2
 80006c0:	200000f4 	.word	0x200000f4
 80006c4:	200000fc 	.word	0x200000fc
 80006c8:	00000fff 	.word	0x00000fff
 80006cc:	200000fa 	.word	0x200000fa
 80006d0:	200000dc 	.word	0x200000dc

080006d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d4:	b590      	push	{r4, r7, lr}
 80006d6:	b093      	sub	sp, #76	@ 0x4c
 80006d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006da:	2414      	movs	r4, #20
 80006dc:	193b      	adds	r3, r7, r4
 80006de:	0018      	movs	r0, r3
 80006e0:	2334      	movs	r3, #52	@ 0x34
 80006e2:	001a      	movs	r2, r3
 80006e4:	2100      	movs	r1, #0
 80006e6:	f003 fc7b 	bl	8003fe0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	0018      	movs	r0, r3
 80006ee:	2310      	movs	r3, #16
 80006f0:	001a      	movs	r2, r3
 80006f2:	2100      	movs	r1, #0
 80006f4:	f003 fc74 	bl	8003fe0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f8:	2380      	movs	r3, #128	@ 0x80
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	0018      	movs	r0, r3
 80006fe:	f001 fde3 	bl	80022c8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000702:	193b      	adds	r3, r7, r4
 8000704:	2202      	movs	r2, #2
 8000706:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000708:	193b      	adds	r3, r7, r4
 800070a:	2280      	movs	r2, #128	@ 0x80
 800070c:	0052      	lsls	r2, r2, #1
 800070e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000710:	0021      	movs	r1, r4
 8000712:	187b      	adds	r3, r7, r1
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000718:	187b      	adds	r3, r7, r1
 800071a:	2240      	movs	r2, #64	@ 0x40
 800071c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071e:	187b      	adds	r3, r7, r1
 8000720:	2202      	movs	r2, #2
 8000722:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000724:	187b      	adds	r3, r7, r1
 8000726:	2202      	movs	r2, #2
 8000728:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800072a:	187b      	adds	r3, r7, r1
 800072c:	2200      	movs	r2, #0
 800072e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000730:	187b      	adds	r3, r7, r1
 8000732:	2208      	movs	r2, #8
 8000734:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000736:	187b      	adds	r3, r7, r1
 8000738:	22c0      	movs	r2, #192	@ 0xc0
 800073a:	02d2      	lsls	r2, r2, #11
 800073c:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800073e:	187b      	adds	r3, r7, r1
 8000740:	2280      	movs	r2, #128	@ 0x80
 8000742:	0592      	lsls	r2, r2, #22
 8000744:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000746:	187b      	adds	r3, r7, r1
 8000748:	0018      	movs	r0, r3
 800074a:	f001 fdfd 	bl	8002348 <HAL_RCC_OscConfig>
 800074e:	1e03      	subs	r3, r0, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000752:	f000 f97b 	bl	8000a4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	2207      	movs	r2, #7
 800075a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	2202      	movs	r2, #2
 8000760:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	22a0      	movs	r2, #160	@ 0xa0
 800076c:	01d2      	lsls	r2, r2, #7
 800076e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	2102      	movs	r1, #2
 8000774:	0018      	movs	r0, r3
 8000776:	f002 f8f7 	bl	8002968 <HAL_RCC_ClockConfig>
 800077a:	1e03      	subs	r3, r0, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800077e:	f000 f965 	bl	8000a4c <Error_Handler>
  }
}
 8000782:	46c0      	nop			@ (mov r8, r8)
 8000784:	46bd      	mov	sp, r7
 8000786:	b013      	add	sp, #76	@ 0x4c
 8000788:	bd90      	pop	{r4, r7, pc}
	...

0800078c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	0018      	movs	r0, r3
 8000796:	230c      	movs	r3, #12
 8000798:	001a      	movs	r2, r3
 800079a:	2100      	movs	r1, #0
 800079c:	f003 fc20 	bl	8003fe0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007a0:	4b37      	ldr	r3, [pc, #220]	@ (8000880 <MX_ADC1_Init+0xf4>)
 80007a2:	4a38      	ldr	r2, [pc, #224]	@ (8000884 <MX_ADC1_Init+0xf8>)
 80007a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007a6:	4b36      	ldr	r3, [pc, #216]	@ (8000880 <MX_ADC1_Init+0xf4>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007ac:	4b34      	ldr	r3, [pc, #208]	@ (8000880 <MX_ADC1_Init+0xf4>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007b2:	4b33      	ldr	r3, [pc, #204]	@ (8000880 <MX_ADC1_Init+0xf4>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007b8:	4b31      	ldr	r3, [pc, #196]	@ (8000880 <MX_ADC1_Init+0xf4>)
 80007ba:	2280      	movs	r2, #128	@ 0x80
 80007bc:	0392      	lsls	r2, r2, #14
 80007be:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007c0:	4b2f      	ldr	r3, [pc, #188]	@ (8000880 <MX_ADC1_Init+0xf4>)
 80007c2:	2204      	movs	r2, #4
 80007c4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007c6:	4b2e      	ldr	r3, [pc, #184]	@ (8000880 <MX_ADC1_Init+0xf4>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80007cc:	4b2c      	ldr	r3, [pc, #176]	@ (8000880 <MX_ADC1_Init+0xf4>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007d2:	4b2b      	ldr	r3, [pc, #172]	@ (8000880 <MX_ADC1_Init+0xf4>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 2;
 80007d8:	4b29      	ldr	r3, [pc, #164]	@ (8000880 <MX_ADC1_Init+0xf4>)
 80007da:	2202      	movs	r2, #2
 80007dc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 80007de:	4b28      	ldr	r3, [pc, #160]	@ (8000880 <MX_ADC1_Init+0xf4>)
 80007e0:	2220      	movs	r2, #32
 80007e2:	2101      	movs	r1, #1
 80007e4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007e6:	4b26      	ldr	r3, [pc, #152]	@ (8000880 <MX_ADC1_Init+0xf4>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ec:	4b24      	ldr	r3, [pc, #144]	@ (8000880 <MX_ADC1_Init+0xf4>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007f2:	4b23      	ldr	r3, [pc, #140]	@ (8000880 <MX_ADC1_Init+0xf4>)
 80007f4:	222c      	movs	r2, #44	@ 0x2c
 80007f6:	2100      	movs	r1, #0
 80007f8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80007fa:	4b21      	ldr	r3, [pc, #132]	@ (8000880 <MX_ADC1_Init+0xf4>)
 80007fc:	2280      	movs	r2, #128	@ 0x80
 80007fe:	0152      	lsls	r2, r2, #5
 8000800:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_39CYCLES_5;
 8000802:	4b1f      	ldr	r3, [pc, #124]	@ (8000880 <MX_ADC1_Init+0xf4>)
 8000804:	2205      	movs	r2, #5
 8000806:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_39CYCLES_5;
 8000808:	4b1d      	ldr	r3, [pc, #116]	@ (8000880 <MX_ADC1_Init+0xf4>)
 800080a:	2205      	movs	r2, #5
 800080c:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800080e:	4b1c      	ldr	r3, [pc, #112]	@ (8000880 <MX_ADC1_Init+0xf4>)
 8000810:	223c      	movs	r2, #60	@ 0x3c
 8000812:	2100      	movs	r1, #0
 8000814:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000816:	4b1a      	ldr	r3, [pc, #104]	@ (8000880 <MX_ADC1_Init+0xf4>)
 8000818:	2200      	movs	r2, #0
 800081a:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800081c:	4b18      	ldr	r3, [pc, #96]	@ (8000880 <MX_ADC1_Init+0xf4>)
 800081e:	0018      	movs	r0, r3
 8000820:	f000 fd22 	bl	8001268 <HAL_ADC_Init>
 8000824:	1e03      	subs	r3, r0, #0
 8000826:	d001      	beq.n	800082c <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8000828:	f000 f910 	bl	8000a4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800082c:	1d3b      	adds	r3, r7, #4
 800082e:	4a16      	ldr	r2, [pc, #88]	@ (8000888 <MX_ADC1_Init+0xfc>)
 8000830:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	2200      	movs	r2, #0
 8000836:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800083e:	1d3a      	adds	r2, r7, #4
 8000840:	4b0f      	ldr	r3, [pc, #60]	@ (8000880 <MX_ADC1_Init+0xf4>)
 8000842:	0011      	movs	r1, r2
 8000844:	0018      	movs	r0, r3
 8000846:	f000 ffe1 	bl	800180c <HAL_ADC_ConfigChannel>
 800084a:	1e03      	subs	r3, r0, #0
 800084c:	d001      	beq.n	8000852 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800084e:	f000 f8fd 	bl	8000a4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	4a0d      	ldr	r2, [pc, #52]	@ (800088c <MX_ADC1_Init+0x100>)
 8000856:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	2204      	movs	r2, #4
 800085c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_2;
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	4a0b      	ldr	r2, [pc, #44]	@ (8000890 <MX_ADC1_Init+0x104>)
 8000862:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000864:	1d3a      	adds	r2, r7, #4
 8000866:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <MX_ADC1_Init+0xf4>)
 8000868:	0011      	movs	r1, r2
 800086a:	0018      	movs	r0, r3
 800086c:	f000 ffce 	bl	800180c <HAL_ADC_ConfigChannel>
 8000870:	1e03      	subs	r3, r0, #0
 8000872:	d001      	beq.n	8000878 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8000874:	f000 f8ea 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000878:	46c0      	nop			@ (mov r8, r8)
 800087a:	46bd      	mov	sp, r7
 800087c:	b004      	add	sp, #16
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20000028 	.word	0x20000028
 8000884:	40012400 	.word	0x40012400
 8000888:	24000200 	.word	0x24000200
 800088c:	20000100 	.word	0x20000100
 8000890:	07ffff04 	.word	0x07ffff04

08000894 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08e      	sub	sp, #56	@ 0x38
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800089a:	2328      	movs	r3, #40	@ 0x28
 800089c:	18fb      	adds	r3, r7, r3
 800089e:	0018      	movs	r0, r3
 80008a0:	2310      	movs	r3, #16
 80008a2:	001a      	movs	r2, r3
 80008a4:	2100      	movs	r1, #0
 80008a6:	f003 fb9b 	bl	8003fe0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008aa:	231c      	movs	r3, #28
 80008ac:	18fb      	adds	r3, r7, r3
 80008ae:	0018      	movs	r0, r3
 80008b0:	230c      	movs	r3, #12
 80008b2:	001a      	movs	r2, r3
 80008b4:	2100      	movs	r1, #0
 80008b6:	f003 fb93 	bl	8003fe0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008ba:	003b      	movs	r3, r7
 80008bc:	0018      	movs	r0, r3
 80008be:	231c      	movs	r3, #28
 80008c0:	001a      	movs	r2, r3
 80008c2:	2100      	movs	r1, #0
 80008c4:	f003 fb8c 	bl	8003fe0 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000984 <MX_TIM3_Init+0xf0>)
 80008ca:	4a2f      	ldr	r2, [pc, #188]	@ (8000988 <MX_TIM3_Init+0xf4>)
 80008cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80008ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000984 <MX_TIM3_Init+0xf0>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d4:	4b2b      	ldr	r3, [pc, #172]	@ (8000984 <MX_TIM3_Init+0xf0>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 32768;
 80008da:	4b2a      	ldr	r3, [pc, #168]	@ (8000984 <MX_TIM3_Init+0xf0>)
 80008dc:	2280      	movs	r2, #128	@ 0x80
 80008de:	0212      	lsls	r2, r2, #8
 80008e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008e2:	4b28      	ldr	r3, [pc, #160]	@ (8000984 <MX_TIM3_Init+0xf0>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e8:	4b26      	ldr	r3, [pc, #152]	@ (8000984 <MX_TIM3_Init+0xf0>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008ee:	4b25      	ldr	r3, [pc, #148]	@ (8000984 <MX_TIM3_Init+0xf0>)
 80008f0:	0018      	movs	r0, r3
 80008f2:	f002 fae9 	bl	8002ec8 <HAL_TIM_Base_Init>
 80008f6:	1e03      	subs	r3, r0, #0
 80008f8:	d001      	beq.n	80008fe <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80008fa:	f000 f8a7 	bl	8000a4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008fe:	2128      	movs	r1, #40	@ 0x28
 8000900:	187b      	adds	r3, r7, r1
 8000902:	2280      	movs	r2, #128	@ 0x80
 8000904:	0152      	lsls	r2, r2, #5
 8000906:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000908:	187a      	adds	r2, r7, r1
 800090a:	4b1e      	ldr	r3, [pc, #120]	@ (8000984 <MX_TIM3_Init+0xf0>)
 800090c:	0011      	movs	r1, r2
 800090e:	0018      	movs	r0, r3
 8000910:	f002 fe18 	bl	8003544 <HAL_TIM_ConfigClockSource>
 8000914:	1e03      	subs	r3, r0, #0
 8000916:	d001      	beq.n	800091c <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000918:	f000 f898 	bl	8000a4c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800091c:	4b19      	ldr	r3, [pc, #100]	@ (8000984 <MX_TIM3_Init+0xf0>)
 800091e:	0018      	movs	r0, r3
 8000920:	f002 fb2a 	bl	8002f78 <HAL_TIM_OC_Init>
 8000924:	1e03      	subs	r3, r0, #0
 8000926:	d001      	beq.n	800092c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000928:	f000 f890 	bl	8000a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800092c:	211c      	movs	r1, #28
 800092e:	187b      	adds	r3, r7, r1
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000934:	187b      	adds	r3, r7, r1
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800093a:	187a      	adds	r2, r7, r1
 800093c:	4b11      	ldr	r3, [pc, #68]	@ (8000984 <MX_TIM3_Init+0xf0>)
 800093e:	0011      	movs	r1, r2
 8000940:	0018      	movs	r0, r3
 8000942:	f003 fad3 	bl	8003eec <HAL_TIMEx_MasterConfigSynchronization>
 8000946:	1e03      	subs	r3, r0, #0
 8000948:	d001      	beq.n	800094e <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 800094a:	f000 f87f 	bl	8000a4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800094e:	003b      	movs	r3, r7
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000954:	003b      	movs	r3, r7
 8000956:	2200      	movs	r2, #0
 8000958:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800095a:	003b      	movs	r3, r7
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000960:	003b      	movs	r3, r7
 8000962:	2200      	movs	r2, #0
 8000964:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000966:	0039      	movs	r1, r7
 8000968:	4b06      	ldr	r3, [pc, #24]	@ (8000984 <MX_TIM3_Init+0xf0>)
 800096a:	2200      	movs	r2, #0
 800096c:	0018      	movs	r0, r3
 800096e:	f002 fd89 	bl	8003484 <HAL_TIM_OC_ConfigChannel>
 8000972:	1e03      	subs	r3, r0, #0
 8000974:	d001      	beq.n	800097a <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8000976:	f000 f869 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800097a:	46c0      	nop			@ (mov r8, r8)
 800097c:	46bd      	mov	sp, r7
 800097e:	b00e      	add	sp, #56	@ 0x38
 8000980:	bd80      	pop	{r7, pc}
 8000982:	46c0      	nop			@ (mov r8, r8)
 8000984:	2000008c 	.word	0x2000008c
 8000988:	40000400 	.word	0x40000400

0800098c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800098c:	b590      	push	{r4, r7, lr}
 800098e:	b089      	sub	sp, #36	@ 0x24
 8000990:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000992:	240c      	movs	r4, #12
 8000994:	193b      	adds	r3, r7, r4
 8000996:	0018      	movs	r0, r3
 8000998:	2314      	movs	r3, #20
 800099a:	001a      	movs	r2, r3
 800099c:	2100      	movs	r1, #0
 800099e:	f003 fb1f 	bl	8003fe0 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a2:	4b28      	ldr	r3, [pc, #160]	@ (8000a44 <MX_GPIO_Init+0xb8>)
 80009a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009a6:	4b27      	ldr	r3, [pc, #156]	@ (8000a44 <MX_GPIO_Init+0xb8>)
 80009a8:	2101      	movs	r1, #1
 80009aa:	430a      	orrs	r2, r1
 80009ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80009ae:	4b25      	ldr	r3, [pc, #148]	@ (8000a44 <MX_GPIO_Init+0xb8>)
 80009b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009b2:	2201      	movs	r2, #1
 80009b4:	4013      	ands	r3, r2
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ba:	4b22      	ldr	r3, [pc, #136]	@ (8000a44 <MX_GPIO_Init+0xb8>)
 80009bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009be:	4b21      	ldr	r3, [pc, #132]	@ (8000a44 <MX_GPIO_Init+0xb8>)
 80009c0:	2102      	movs	r1, #2
 80009c2:	430a      	orrs	r2, r1
 80009c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80009c6:	4b1f      	ldr	r3, [pc, #124]	@ (8000a44 <MX_GPIO_Init+0xb8>)
 80009c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009ca:	2202      	movs	r2, #2
 80009cc:	4013      	ands	r3, r2
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80009d2:	23a0      	movs	r3, #160	@ 0xa0
 80009d4:	05db      	lsls	r3, r3, #23
 80009d6:	2200      	movs	r2, #0
 80009d8:	21ff      	movs	r1, #255	@ 0xff
 80009da:	0018      	movs	r0, r3
 80009dc:	f001 fc56 	bl	800228c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80009e0:	23fc      	movs	r3, #252	@ 0xfc
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	4818      	ldr	r0, [pc, #96]	@ (8000a48 <MX_GPIO_Init+0xbc>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	0019      	movs	r1, r3
 80009ea:	f001 fc4f 	bl	800228c <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80009ee:	193b      	adds	r3, r7, r4
 80009f0:	22ff      	movs	r2, #255	@ 0xff
 80009f2:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f4:	193b      	adds	r3, r7, r4
 80009f6:	2201      	movs	r2, #1
 80009f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	193b      	adds	r3, r7, r4
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a00:	193b      	adds	r3, r7, r4
 8000a02:	2202      	movs	r2, #2
 8000a04:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a06:	193a      	adds	r2, r7, r4
 8000a08:	23a0      	movs	r3, #160	@ 0xa0
 8000a0a:	05db      	lsls	r3, r3, #23
 8000a0c:	0011      	movs	r1, r2
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f001 fad8 	bl	8001fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6
                           PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000a14:	0021      	movs	r1, r4
 8000a16:	187b      	adds	r3, r7, r1
 8000a18:	22fc      	movs	r2, #252	@ 0xfc
 8000a1a:	0052      	lsls	r2, r2, #1
 8000a1c:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1e:	187b      	adds	r3, r7, r1
 8000a20:	2201      	movs	r2, #1
 8000a22:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	2202      	movs	r2, #2
 8000a2e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	4a05      	ldr	r2, [pc, #20]	@ (8000a48 <MX_GPIO_Init+0xbc>)
 8000a34:	0019      	movs	r1, r3
 8000a36:	0010      	movs	r0, r2
 8000a38:	f001 fac4 	bl	8001fc4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a3c:	46c0      	nop			@ (mov r8, r8)
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	b009      	add	sp, #36	@ 0x24
 8000a42:	bd90      	pop	{r4, r7, pc}
 8000a44:	40021000 	.word	0x40021000
 8000a48:	50000400 	.word	0x50000400

08000a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a50:	b672      	cpsid	i
}
 8000a52:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a54:	46c0      	nop			@ (mov r8, r8)
 8000a56:	e7fd      	b.n	8000a54 <Error_Handler+0x8>

08000a58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a9c <HAL_MspInit+0x44>)
 8000a60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a62:	4b0e      	ldr	r3, [pc, #56]	@ (8000a9c <HAL_MspInit+0x44>)
 8000a64:	2101      	movs	r1, #1
 8000a66:	430a      	orrs	r2, r1
 8000a68:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a9c <HAL_MspInit+0x44>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a6e:	2201      	movs	r2, #1
 8000a70:	4013      	ands	r3, r2
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a76:	4b09      	ldr	r3, [pc, #36]	@ (8000a9c <HAL_MspInit+0x44>)
 8000a78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a7a:	4b08      	ldr	r3, [pc, #32]	@ (8000a9c <HAL_MspInit+0x44>)
 8000a7c:	2180      	movs	r1, #128	@ 0x80
 8000a7e:	0549      	lsls	r1, r1, #21
 8000a80:	430a      	orrs	r2, r1
 8000a82:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a84:	4b05      	ldr	r3, [pc, #20]	@ (8000a9c <HAL_MspInit+0x44>)
 8000a86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a88:	2380      	movs	r3, #128	@ 0x80
 8000a8a:	055b      	lsls	r3, r3, #21
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a92:	46c0      	nop			@ (mov r8, r8)
 8000a94:	46bd      	mov	sp, r7
 8000a96:	b002      	add	sp, #8
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	46c0      	nop			@ (mov r8, r8)
 8000a9c:	40021000 	.word	0x40021000

08000aa0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000aa0:	b590      	push	{r4, r7, lr}
 8000aa2:	b091      	sub	sp, #68	@ 0x44
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	232c      	movs	r3, #44	@ 0x2c
 8000aaa:	18fb      	adds	r3, r7, r3
 8000aac:	0018      	movs	r0, r3
 8000aae:	2314      	movs	r3, #20
 8000ab0:	001a      	movs	r2, r3
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	f003 fa94 	bl	8003fe0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ab8:	2414      	movs	r4, #20
 8000aba:	193b      	adds	r3, r7, r4
 8000abc:	0018      	movs	r0, r3
 8000abe:	2318      	movs	r3, #24
 8000ac0:	001a      	movs	r2, r3
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	f003 fa8c 	bl	8003fe0 <memset>
  if(hadc->Instance==ADC1)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a20      	ldr	r2, [pc, #128]	@ (8000b50 <HAL_ADC_MspInit+0xb0>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d139      	bne.n	8000b46 <HAL_ADC_MspInit+0xa6>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ad2:	193b      	adds	r3, r7, r4
 8000ad4:	2280      	movs	r2, #128	@ 0x80
 8000ad6:	01d2      	lsls	r2, r2, #7
 8000ad8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_HSI;
 8000ada:	193b      	adds	r3, r7, r4
 8000adc:	2280      	movs	r2, #128	@ 0x80
 8000ade:	0612      	lsls	r2, r2, #24
 8000ae0:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ae2:	193b      	adds	r3, r7, r4
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f002 f8c9 	bl	8002c7c <HAL_RCCEx_PeriphCLKConfig>
 8000aea:	1e03      	subs	r3, r0, #0
 8000aec:	d001      	beq.n	8000af2 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8000aee:	f7ff ffad 	bl	8000a4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000af2:	4b18      	ldr	r3, [pc, #96]	@ (8000b54 <HAL_ADC_MspInit+0xb4>)
 8000af4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000af6:	4b17      	ldr	r3, [pc, #92]	@ (8000b54 <HAL_ADC_MspInit+0xb4>)
 8000af8:	2180      	movs	r1, #128	@ 0x80
 8000afa:	0349      	lsls	r1, r1, #13
 8000afc:	430a      	orrs	r2, r1
 8000afe:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b00:	4b14      	ldr	r3, [pc, #80]	@ (8000b54 <HAL_ADC_MspInit+0xb4>)
 8000b02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b04:	2380      	movs	r3, #128	@ 0x80
 8000b06:	035b      	lsls	r3, r3, #13
 8000b08:	4013      	ands	r3, r2
 8000b0a:	613b      	str	r3, [r7, #16]
 8000b0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0e:	4b11      	ldr	r3, [pc, #68]	@ (8000b54 <HAL_ADC_MspInit+0xb4>)
 8000b10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b12:	4b10      	ldr	r3, [pc, #64]	@ (8000b54 <HAL_ADC_MspInit+0xb4>)
 8000b14:	2102      	movs	r1, #2
 8000b16:	430a      	orrs	r2, r1
 8000b18:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b54 <HAL_ADC_MspInit+0xb4>)
 8000b1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b1e:	2202      	movs	r2, #2
 8000b20:	4013      	ands	r3, r2
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b26:	212c      	movs	r1, #44	@ 0x2c
 8000b28:	187b      	adds	r3, r7, r1
 8000b2a:	2203      	movs	r2, #3
 8000b2c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b2e:	187b      	adds	r3, r7, r1
 8000b30:	2203      	movs	r2, #3
 8000b32:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	187b      	adds	r3, r7, r1
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3a:	187b      	adds	r3, r7, r1
 8000b3c:	4a06      	ldr	r2, [pc, #24]	@ (8000b58 <HAL_ADC_MspInit+0xb8>)
 8000b3e:	0019      	movs	r1, r3
 8000b40:	0010      	movs	r0, r2
 8000b42:	f001 fa3f 	bl	8001fc4 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000b46:	46c0      	nop			@ (mov r8, r8)
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	b011      	add	sp, #68	@ 0x44
 8000b4c:	bd90      	pop	{r4, r7, pc}
 8000b4e:	46c0      	nop			@ (mov r8, r8)
 8000b50:	40012400 	.word	0x40012400
 8000b54:	40021000 	.word	0x40021000
 8000b58:	50000400 	.word	0x50000400

08000b5c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba0 <HAL_TIM_Base_MspInit+0x44>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d113      	bne.n	8000b96 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba4 <HAL_TIM_Base_MspInit+0x48>)
 8000b70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b72:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba4 <HAL_TIM_Base_MspInit+0x48>)
 8000b74:	2102      	movs	r1, #2
 8000b76:	430a      	orrs	r2, r1
 8000b78:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba4 <HAL_TIM_Base_MspInit+0x48>)
 8000b7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b7e:	2202      	movs	r2, #2
 8000b80:	4013      	ands	r3, r2
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2100      	movs	r1, #0
 8000b8a:	2010      	movs	r0, #16
 8000b8c:	f001 f9e8 	bl	8001f60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b90:	2010      	movs	r0, #16
 8000b92:	f001 f9fa 	bl	8001f8a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000b96:	46c0      	nop			@ (mov r8, r8)
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	b004      	add	sp, #16
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	46c0      	nop			@ (mov r8, r8)
 8000ba0:	40000400 	.word	0x40000400
 8000ba4:	40021000 	.word	0x40021000

08000ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bac:	46c0      	nop			@ (mov r8, r8)
 8000bae:	e7fd      	b.n	8000bac <NMI_Handler+0x4>

08000bb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb4:	46c0      	nop			@ (mov r8, r8)
 8000bb6:	e7fd      	b.n	8000bb4 <HardFault_Handler+0x4>

08000bb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bbc:	46c0      	nop			@ (mov r8, r8)
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc6:	46c0      	nop			@ (mov r8, r8)
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd0:	f000 f9a0 	bl	8000f14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd4:	46c0      	nop			@ (mov r8, r8)
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
	...

08000bdc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000bdc:	b590      	push	{r4, r7, lr}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000be2:	4b79      	ldr	r3, [pc, #484]	@ (8000dc8 <TIM3_IRQHandler+0x1ec>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	2108      	movs	r1, #8
 8000be8:	0018      	movs	r0, r3
 8000bea:	f001 fb4f 	bl	800228c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000bee:	4b76      	ldr	r3, [pc, #472]	@ (8000dc8 <TIM3_IRQHandler+0x1ec>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	2110      	movs	r1, #16
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f001 fb49 	bl	800228c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000bfa:	4b73      	ldr	r3, [pc, #460]	@ (8000dc8 <TIM3_IRQHandler+0x1ec>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	2120      	movs	r1, #32
 8000c00:	0018      	movs	r0, r3
 8000c02:	f001 fb43 	bl	800228c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000c06:	4b70      	ldr	r3, [pc, #448]	@ (8000dc8 <TIM3_IRQHandler+0x1ec>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	2140      	movs	r1, #64	@ 0x40
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f001 fb3d 	bl	800228c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000c12:	4b6d      	ldr	r3, [pc, #436]	@ (8000dc8 <TIM3_IRQHandler+0x1ec>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	2180      	movs	r1, #128	@ 0x80
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f001 fb37 	bl	800228c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000c1e:	2380      	movs	r3, #128	@ 0x80
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	4869      	ldr	r0, [pc, #420]	@ (8000dc8 <TIM3_IRQHandler+0x1ec>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	0019      	movs	r1, r3
 8000c28:	f001 fb30 	bl	800228c <HAL_GPIO_WritePin>

	// === Get pattern for current digit ===
	uint8_t val = digits[seg] % 10;  // Avoid invalid index
 8000c2c:	4b67      	ldr	r3, [pc, #412]	@ (8000dcc <TIM3_IRQHandler+0x1f0>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	001a      	movs	r2, r3
 8000c32:	4b67      	ldr	r3, [pc, #412]	@ (8000dd0 <TIM3_IRQHandler+0x1f4>)
 8000c34:	5c9b      	ldrb	r3, [r3, r2]
 8000c36:	1dfc      	adds	r4, r7, #7
 8000c38:	210a      	movs	r1, #10
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f7ff fae6 	bl	800020c <__aeabi_uidivmod>
 8000c40:	000b      	movs	r3, r1
 8000c42:	7023      	strb	r3, [r4, #0]
	uint8_t pattern = Segment_Patterns[val];
 8000c44:	1dfb      	adds	r3, r7, #7
 8000c46:	781a      	ldrb	r2, [r3, #0]
 8000c48:	1dbb      	adds	r3, r7, #6
 8000c4a:	4962      	ldr	r1, [pc, #392]	@ (8000dd4 <TIM3_IRQHandler+0x1f8>)
 8000c4c:	5c8a      	ldrb	r2, [r1, r2]
 8000c4e:	701a      	strb	r2, [r3, #0]

	// === Set segments A-G and DP ===
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, (pattern & 0x40) ? GPIO_PIN_RESET : GPIO_PIN_SET); // A
 8000c50:	1dbb      	adds	r3, r7, #6
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2240      	movs	r2, #64	@ 0x40
 8000c56:	4013      	ands	r3, r2
 8000c58:	425a      	negs	r2, r3
 8000c5a:	4153      	adcs	r3, r2
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	001a      	movs	r2, r3
 8000c60:	23a0      	movs	r3, #160	@ 0xa0
 8000c62:	05db      	lsls	r3, r3, #23
 8000c64:	2101      	movs	r1, #1
 8000c66:	0018      	movs	r0, r3
 8000c68:	f001 fb10 	bl	800228c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, (pattern & 0x20) ? GPIO_PIN_RESET : GPIO_PIN_SET); // B
 8000c6c:	1dbb      	adds	r3, r7, #6
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2220      	movs	r2, #32
 8000c72:	4013      	ands	r3, r2
 8000c74:	425a      	negs	r2, r3
 8000c76:	4153      	adcs	r3, r2
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	001a      	movs	r2, r3
 8000c7c:	23a0      	movs	r3, #160	@ 0xa0
 8000c7e:	05db      	lsls	r3, r3, #23
 8000c80:	2102      	movs	r1, #2
 8000c82:	0018      	movs	r0, r3
 8000c84:	f001 fb02 	bl	800228c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, (pattern & 0x10) ? GPIO_PIN_RESET : GPIO_PIN_SET); // C
 8000c88:	1dbb      	adds	r3, r7, #6
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	2210      	movs	r2, #16
 8000c8e:	4013      	ands	r3, r2
 8000c90:	425a      	negs	r2, r3
 8000c92:	4153      	adcs	r3, r2
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	001a      	movs	r2, r3
 8000c98:	23a0      	movs	r3, #160	@ 0xa0
 8000c9a:	05db      	lsls	r3, r3, #23
 8000c9c:	2104      	movs	r1, #4
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f001 faf4 	bl	800228c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, (pattern & 0x08) ? GPIO_PIN_RESET : GPIO_PIN_SET); // D
 8000ca4:	1dbb      	adds	r3, r7, #6
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	2208      	movs	r2, #8
 8000caa:	4013      	ands	r3, r2
 8000cac:	425a      	negs	r2, r3
 8000cae:	4153      	adcs	r3, r2
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	001a      	movs	r2, r3
 8000cb4:	23a0      	movs	r3, #160	@ 0xa0
 8000cb6:	05db      	lsls	r3, r3, #23
 8000cb8:	2108      	movs	r1, #8
 8000cba:	0018      	movs	r0, r3
 8000cbc:	f001 fae6 	bl	800228c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, (pattern & 0x04) ? GPIO_PIN_RESET : GPIO_PIN_SET); // E
 8000cc0:	1dbb      	adds	r3, r7, #6
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2204      	movs	r2, #4
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	425a      	negs	r2, r3
 8000cca:	4153      	adcs	r3, r2
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	001a      	movs	r2, r3
 8000cd0:	23a0      	movs	r3, #160	@ 0xa0
 8000cd2:	05db      	lsls	r3, r3, #23
 8000cd4:	2110      	movs	r1, #16
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f001 fad8 	bl	800228c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, (pattern & 0x02) ? GPIO_PIN_RESET : GPIO_PIN_SET); // F
 8000cdc:	1dbb      	adds	r3, r7, #6
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	2202      	movs	r2, #2
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	425a      	negs	r2, r3
 8000ce6:	4153      	adcs	r3, r2
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	001a      	movs	r2, r3
 8000cec:	23a0      	movs	r3, #160	@ 0xa0
 8000cee:	05db      	lsls	r3, r3, #23
 8000cf0:	2120      	movs	r1, #32
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f001 faca 	bl	800228c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, (pattern & 0x01) ? GPIO_PIN_RESET : GPIO_PIN_SET); // G
 8000cf8:	1dbb      	adds	r3, r7, #6
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	4013      	ands	r3, r2
 8000d00:	425a      	negs	r2, r3
 8000d02:	4153      	adcs	r3, r2
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	001a      	movs	r2, r3
 8000d08:	23a0      	movs	r3, #160	@ 0xa0
 8000d0a:	05db      	lsls	r3, r3, #23
 8000d0c:	2140      	movs	r1, #64	@ 0x40
 8000d0e:	0018      	movs	r0, r3
 8000d10:	f001 fabc 	bl	800228c <HAL_GPIO_WritePin>

//	Handle Dot Point (DP) on PA7
    if (seg == 0)
 8000d14:	4b2d      	ldr	r3, [pc, #180]	@ (8000dcc <TIM3_IRQHandler+0x1f0>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d107      	bne.n	8000d2c <TIM3_IRQHandler+0x150>
    {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);  // DP ON
 8000d1c:	23a0      	movs	r3, #160	@ 0xa0
 8000d1e:	05db      	lsls	r3, r3, #23
 8000d20:	2201      	movs	r2, #1
 8000d22:	2180      	movs	r1, #128	@ 0x80
 8000d24:	0018      	movs	r0, r3
 8000d26:	f001 fab1 	bl	800228c <HAL_GPIO_WritePin>
 8000d2a:	e006      	b.n	8000d3a <TIM3_IRQHandler+0x15e>
    }
    else
    {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);    // DP OFF otherwise
 8000d2c:	23a0      	movs	r3, #160	@ 0xa0
 8000d2e:	05db      	lsls	r3, r3, #23
 8000d30:	2200      	movs	r2, #0
 8000d32:	2180      	movs	r1, #128	@ 0x80
 8000d34:	0018      	movs	r0, r3
 8000d36:	f001 faa9 	bl	800228c <HAL_GPIO_WritePin>
    }

	// === Enable current digit (active-low) ===
	switch (seg)
 8000d3a:	4b24      	ldr	r3, [pc, #144]	@ (8000dcc <TIM3_IRQHandler+0x1f0>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	2b05      	cmp	r3, #5
 8000d40:	d82f      	bhi.n	8000da2 <TIM3_IRQHandler+0x1c6>
 8000d42:	009a      	lsls	r2, r3, #2
 8000d44:	4b24      	ldr	r3, [pc, #144]	@ (8000dd8 <TIM3_IRQHandler+0x1fc>)
 8000d46:	18d3      	adds	r3, r2, r3
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	469f      	mov	pc, r3
	{
		case 0: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); break;
 8000d4c:	4b1e      	ldr	r3, [pc, #120]	@ (8000dc8 <TIM3_IRQHandler+0x1ec>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2108      	movs	r1, #8
 8000d52:	0018      	movs	r0, r3
 8000d54:	f001 fa9a 	bl	800228c <HAL_GPIO_WritePin>
 8000d58:	e023      	b.n	8000da2 <TIM3_IRQHandler+0x1c6>
		case 1: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); break;
 8000d5a:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc8 <TIM3_IRQHandler+0x1ec>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2110      	movs	r1, #16
 8000d60:	0018      	movs	r0, r3
 8000d62:	f001 fa93 	bl	800228c <HAL_GPIO_WritePin>
 8000d66:	e01c      	b.n	8000da2 <TIM3_IRQHandler+0x1c6>
		case 2: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); break;
 8000d68:	4b17      	ldr	r3, [pc, #92]	@ (8000dc8 <TIM3_IRQHandler+0x1ec>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2120      	movs	r1, #32
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f001 fa8c 	bl	800228c <HAL_GPIO_WritePin>
 8000d74:	e015      	b.n	8000da2 <TIM3_IRQHandler+0x1c6>
		case 3: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); break;
 8000d76:	4b14      	ldr	r3, [pc, #80]	@ (8000dc8 <TIM3_IRQHandler+0x1ec>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2140      	movs	r1, #64	@ 0x40
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	f001 fa85 	bl	800228c <HAL_GPIO_WritePin>
 8000d82:	e00e      	b.n	8000da2 <TIM3_IRQHandler+0x1c6>
		case 4: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); break;
 8000d84:	4b10      	ldr	r3, [pc, #64]	@ (8000dc8 <TIM3_IRQHandler+0x1ec>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	2180      	movs	r1, #128	@ 0x80
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f001 fa7e 	bl	800228c <HAL_GPIO_WritePin>
 8000d90:	e007      	b.n	8000da2 <TIM3_IRQHandler+0x1c6>
		case 5: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET); break;
 8000d92:	2380      	movs	r3, #128	@ 0x80
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	480c      	ldr	r0, [pc, #48]	@ (8000dc8 <TIM3_IRQHandler+0x1ec>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	0019      	movs	r1, r3
 8000d9c:	f001 fa76 	bl	800228c <HAL_GPIO_WritePin>
 8000da0:	46c0      	nop			@ (mov r8, r8)
	}

	// === Advance to next digit ===
	seg = (seg + 1) % 6;
 8000da2:	4b0a      	ldr	r3, [pc, #40]	@ (8000dcc <TIM3_IRQHandler+0x1f0>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	3301      	adds	r3, #1
 8000da8:	2106      	movs	r1, #6
 8000daa:	0018      	movs	r0, r3
 8000dac:	f7ff fb18 	bl	80003e0 <__aeabi_idivmod>
 8000db0:	000b      	movs	r3, r1
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	4b05      	ldr	r3, [pc, #20]	@ (8000dcc <TIM3_IRQHandler+0x1f0>)
 8000db6:	701a      	strb	r2, [r3, #0]

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000db8:	4b08      	ldr	r3, [pc, #32]	@ (8000ddc <TIM3_IRQHandler+0x200>)
 8000dba:	0018      	movs	r0, r3
 8000dbc:	f002 fa5a 	bl	8003274 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000dc0:	46c0      	nop			@ (mov r8, r8)
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	b003      	add	sp, #12
 8000dc6:	bd90      	pop	{r4, r7, pc}
 8000dc8:	50000400 	.word	0x50000400
 8000dcc:	200000fe 	.word	0x200000fe
 8000dd0:	200000dc 	.word	0x200000dc
 8000dd4:	08004050 	.word	0x08004050
 8000dd8:	0800405c 	.word	0x0800405c
 8000ddc:	2000008c 	.word	0x2000008c

08000de0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de4:	46c0      	nop			@ (mov r8, r8)
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
	...

08000dec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dec:	480d      	ldr	r0, [pc, #52]	@ (8000e24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dee:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000df0:	f7ff fff6 	bl	8000de0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000df4:	480c      	ldr	r0, [pc, #48]	@ (8000e28 <LoopForever+0x6>)
  ldr r1, =_edata
 8000df6:	490d      	ldr	r1, [pc, #52]	@ (8000e2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000df8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e30 <LoopForever+0xe>)
  movs r3, #0
 8000dfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dfc:	e002      	b.n	8000e04 <LoopCopyDataInit>

08000dfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e02:	3304      	adds	r3, #4

08000e04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e08:	d3f9      	bcc.n	8000dfe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e0c:	4c0a      	ldr	r4, [pc, #40]	@ (8000e38 <LoopForever+0x16>)
  movs r3, #0
 8000e0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e10:	e001      	b.n	8000e16 <LoopFillZerobss>

08000e12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e14:	3204      	adds	r2, #4

08000e16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e18:	d3fb      	bcc.n	8000e12 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e1a:	f003 f8e9 	bl	8003ff0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000e1e:	f7ff fb77 	bl	8000510 <main>

08000e22 <LoopForever>:

LoopForever:
  b LoopForever
 8000e22:	e7fe      	b.n	8000e22 <LoopForever>
  ldr   r0, =_estack
 8000e24:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000e28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e2c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e30:	08004110 	.word	0x08004110
  ldr r2, =_sbss
 8000e34:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e38:	20000104 	.word	0x20000104

08000e3c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e3c:	e7fe      	b.n	8000e3c <ADC1_IRQHandler>
	...

08000e40 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e46:	1dfb      	adds	r3, r7, #7
 8000e48:	2200      	movs	r2, #0
 8000e4a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e7c <HAL_Init+0x3c>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4b0a      	ldr	r3, [pc, #40]	@ (8000e7c <HAL_Init+0x3c>)
 8000e52:	2180      	movs	r1, #128	@ 0x80
 8000e54:	0049      	lsls	r1, r1, #1
 8000e56:	430a      	orrs	r2, r1
 8000e58:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e5a:	2003      	movs	r0, #3
 8000e5c:	f000 f810 	bl	8000e80 <HAL_InitTick>
 8000e60:	1e03      	subs	r3, r0, #0
 8000e62:	d003      	beq.n	8000e6c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000e64:	1dfb      	adds	r3, r7, #7
 8000e66:	2201      	movs	r2, #1
 8000e68:	701a      	strb	r2, [r3, #0]
 8000e6a:	e001      	b.n	8000e70 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000e6c:	f7ff fdf4 	bl	8000a58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e70:	1dfb      	adds	r3, r7, #7
 8000e72:	781b      	ldrb	r3, [r3, #0]
}
 8000e74:	0018      	movs	r0, r3
 8000e76:	46bd      	mov	sp, r7
 8000e78:	b002      	add	sp, #8
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40022000 	.word	0x40022000

08000e80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e80:	b590      	push	{r4, r7, lr}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e88:	230f      	movs	r3, #15
 8000e8a:	18fb      	adds	r3, r7, r3
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000e90:	4b1d      	ldr	r3, [pc, #116]	@ (8000f08 <HAL_InitTick+0x88>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d02b      	beq.n	8000ef0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000e98:	4b1c      	ldr	r3, [pc, #112]	@ (8000f0c <HAL_InitTick+0x8c>)
 8000e9a:	681c      	ldr	r4, [r3, #0]
 8000e9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000f08 <HAL_InitTick+0x88>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	0019      	movs	r1, r3
 8000ea2:	23fa      	movs	r3, #250	@ 0xfa
 8000ea4:	0098      	lsls	r0, r3, #2
 8000ea6:	f7ff f92b 	bl	8000100 <__udivsi3>
 8000eaa:	0003      	movs	r3, r0
 8000eac:	0019      	movs	r1, r3
 8000eae:	0020      	movs	r0, r4
 8000eb0:	f7ff f926 	bl	8000100 <__udivsi3>
 8000eb4:	0003      	movs	r3, r0
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	f001 f877 	bl	8001faa <HAL_SYSTICK_Config>
 8000ebc:	1e03      	subs	r3, r0, #0
 8000ebe:	d112      	bne.n	8000ee6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2b03      	cmp	r3, #3
 8000ec4:	d80a      	bhi.n	8000edc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec6:	6879      	ldr	r1, [r7, #4]
 8000ec8:	2301      	movs	r3, #1
 8000eca:	425b      	negs	r3, r3
 8000ecc:	2200      	movs	r2, #0
 8000ece:	0018      	movs	r0, r3
 8000ed0:	f001 f846 	bl	8001f60 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ed4:	4b0e      	ldr	r3, [pc, #56]	@ (8000f10 <HAL_InitTick+0x90>)
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	e00d      	b.n	8000ef8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000edc:	230f      	movs	r3, #15
 8000ede:	18fb      	adds	r3, r7, r3
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	701a      	strb	r2, [r3, #0]
 8000ee4:	e008      	b.n	8000ef8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ee6:	230f      	movs	r3, #15
 8000ee8:	18fb      	adds	r3, r7, r3
 8000eea:	2201      	movs	r2, #1
 8000eec:	701a      	strb	r2, [r3, #0]
 8000eee:	e003      	b.n	8000ef8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ef0:	230f      	movs	r3, #15
 8000ef2:	18fb      	adds	r3, r7, r3
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000ef8:	230f      	movs	r3, #15
 8000efa:	18fb      	adds	r3, r7, r3
 8000efc:	781b      	ldrb	r3, [r3, #0]
}
 8000efe:	0018      	movs	r0, r3
 8000f00:	46bd      	mov	sp, r7
 8000f02:	b005      	add	sp, #20
 8000f04:	bd90      	pop	{r4, r7, pc}
 8000f06:	46c0      	nop			@ (mov r8, r8)
 8000f08:	20000008 	.word	0x20000008
 8000f0c:	20000000 	.word	0x20000000
 8000f10:	20000004 	.word	0x20000004

08000f14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f18:	4b05      	ldr	r3, [pc, #20]	@ (8000f30 <HAL_IncTick+0x1c>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	001a      	movs	r2, r3
 8000f1e:	4b05      	ldr	r3, [pc, #20]	@ (8000f34 <HAL_IncTick+0x20>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	18d2      	adds	r2, r2, r3
 8000f24:	4b03      	ldr	r3, [pc, #12]	@ (8000f34 <HAL_IncTick+0x20>)
 8000f26:	601a      	str	r2, [r3, #0]
}
 8000f28:	46c0      	nop			@ (mov r8, r8)
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	46c0      	nop			@ (mov r8, r8)
 8000f30:	20000008 	.word	0x20000008
 8000f34:	20000100 	.word	0x20000100

08000f38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f3c:	4b02      	ldr	r3, [pc, #8]	@ (8000f48 <HAL_GetTick+0x10>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
}
 8000f40:	0018      	movs	r0, r3
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	46c0      	nop			@ (mov r8, r8)
 8000f48:	20000100 	.word	0x20000100

08000f4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f54:	f7ff fff0 	bl	8000f38 <HAL_GetTick>
 8000f58:	0003      	movs	r3, r0
 8000f5a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	3301      	adds	r3, #1
 8000f64:	d005      	beq.n	8000f72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f66:	4b0a      	ldr	r3, [pc, #40]	@ (8000f90 <HAL_Delay+0x44>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	001a      	movs	r2, r3
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	189b      	adds	r3, r3, r2
 8000f70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f72:	46c0      	nop			@ (mov r8, r8)
 8000f74:	f7ff ffe0 	bl	8000f38 <HAL_GetTick>
 8000f78:	0002      	movs	r2, r0
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	68fa      	ldr	r2, [r7, #12]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d8f7      	bhi.n	8000f74 <HAL_Delay+0x28>
  {
  }
}
 8000f84:	46c0      	nop			@ (mov r8, r8)
 8000f86:	46c0      	nop			@ (mov r8, r8)
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	b004      	add	sp, #16
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	46c0      	nop			@ (mov r8, r8)
 8000f90:	20000008 	.word	0x20000008

08000f94 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a05      	ldr	r2, [pc, #20]	@ (8000fb8 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000fa4:	401a      	ands	r2, r3
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	431a      	orrs	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	601a      	str	r2, [r3, #0]
}
 8000fae:	46c0      	nop			@ (mov r8, r8)
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	b002      	add	sp, #8
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	46c0      	nop			@ (mov r8, r8)
 8000fb8:	fe3fffff 	.word	0xfe3fffff

08000fbc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	23e0      	movs	r3, #224	@ 0xe0
 8000fca:	045b      	lsls	r3, r3, #17
 8000fcc:	4013      	ands	r3, r2
}
 8000fce:	0018      	movs	r0, r3
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	b002      	add	sp, #8
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b084      	sub	sp, #16
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	60f8      	str	r0, [r7, #12]
 8000fde:	60b9      	str	r1, [r7, #8]
 8000fe0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	695b      	ldr	r3, [r3, #20]
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	2104      	movs	r1, #4
 8000fea:	400a      	ands	r2, r1
 8000fec:	2107      	movs	r1, #7
 8000fee:	4091      	lsls	r1, r2
 8000ff0:	000a      	movs	r2, r1
 8000ff2:	43d2      	mvns	r2, r2
 8000ff4:	401a      	ands	r2, r3
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	2104      	movs	r1, #4
 8000ffa:	400b      	ands	r3, r1
 8000ffc:	6879      	ldr	r1, [r7, #4]
 8000ffe:	4099      	lsls	r1, r3
 8001000:	000b      	movs	r3, r1
 8001002:	431a      	orrs	r2, r3
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001008:	46c0      	nop			@ (mov r8, r8)
 800100a:	46bd      	mov	sp, r7
 800100c:	b004      	add	sp, #16
 800100e:	bd80      	pop	{r7, pc}

08001010 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	695b      	ldr	r3, [r3, #20]
 800101e:	683a      	ldr	r2, [r7, #0]
 8001020:	2104      	movs	r1, #4
 8001022:	400a      	ands	r2, r1
 8001024:	2107      	movs	r1, #7
 8001026:	4091      	lsls	r1, r2
 8001028:	000a      	movs	r2, r1
 800102a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	2104      	movs	r1, #4
 8001030:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001032:	40da      	lsrs	r2, r3
 8001034:	0013      	movs	r3, r2
}
 8001036:	0018      	movs	r0, r3
 8001038:	46bd      	mov	sp, r7
 800103a:	b002      	add	sp, #8
 800103c:	bd80      	pop	{r7, pc}

0800103e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	68da      	ldr	r2, [r3, #12]
 800104a:	23c0      	movs	r3, #192	@ 0xc0
 800104c:	011b      	lsls	r3, r3, #4
 800104e:	4013      	ands	r3, r2
 8001050:	d101      	bne.n	8001056 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001052:	2301      	movs	r3, #1
 8001054:	e000      	b.n	8001058 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001056:	2300      	movs	r3, #0
}
 8001058:	0018      	movs	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	b002      	add	sp, #8
 800105e:	bd80      	pop	{r7, pc}

08001060 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001070:	68ba      	ldr	r2, [r7, #8]
 8001072:	211f      	movs	r1, #31
 8001074:	400a      	ands	r2, r1
 8001076:	210f      	movs	r1, #15
 8001078:	4091      	lsls	r1, r2
 800107a:	000a      	movs	r2, r1
 800107c:	43d2      	mvns	r2, r2
 800107e:	401a      	ands	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	0e9b      	lsrs	r3, r3, #26
 8001084:	210f      	movs	r1, #15
 8001086:	4019      	ands	r1, r3
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	201f      	movs	r0, #31
 800108c:	4003      	ands	r3, r0
 800108e:	4099      	lsls	r1, r3
 8001090:	000b      	movs	r3, r1
 8001092:	431a      	orrs	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001098:	46c0      	nop			@ (mov r8, r8)
 800109a:	46bd      	mov	sp, r7
 800109c:	b004      	add	sp, #16
 800109e:	bd80      	pop	{r7, pc}

080010a0 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	035b      	lsls	r3, r3, #13
 80010b2:	0b5b      	lsrs	r3, r3, #13
 80010b4:	431a      	orrs	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010ba:	46c0      	nop			@ (mov r8, r8)
 80010bc:	46bd      	mov	sp, r7
 80010be:	b002      	add	sp, #8
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
 80010ca:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010d0:	683a      	ldr	r2, [r7, #0]
 80010d2:	0352      	lsls	r2, r2, #13
 80010d4:	0b52      	lsrs	r2, r2, #13
 80010d6:	43d2      	mvns	r2, r2
 80010d8:	401a      	ands	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010de:	46c0      	nop			@ (mov r8, r8)
 80010e0:	46bd      	mov	sp, r7
 80010e2:	b002      	add	sp, #8
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	695b      	ldr	r3, [r3, #20]
 80010f8:	68ba      	ldr	r2, [r7, #8]
 80010fa:	0212      	lsls	r2, r2, #8
 80010fc:	43d2      	mvns	r2, r2
 80010fe:	401a      	ands	r2, r3
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	021b      	lsls	r3, r3, #8
 8001104:	6879      	ldr	r1, [r7, #4]
 8001106:	400b      	ands	r3, r1
 8001108:	4904      	ldr	r1, [pc, #16]	@ (800111c <LL_ADC_SetChannelSamplingTime+0x34>)
 800110a:	400b      	ands	r3, r1
 800110c:	431a      	orrs	r2, r3
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001112:	46c0      	nop			@ (mov r8, r8)
 8001114:	46bd      	mov	sp, r7
 8001116:	b004      	add	sp, #16
 8001118:	bd80      	pop	{r7, pc}
 800111a:	46c0      	nop			@ (mov r8, r8)
 800111c:	07ffff00 	.word	0x07ffff00

08001120 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	4a05      	ldr	r2, [pc, #20]	@ (8001144 <LL_ADC_EnableInternalRegulator+0x24>)
 800112e:	4013      	ands	r3, r2
 8001130:	2280      	movs	r2, #128	@ 0x80
 8001132:	0552      	lsls	r2, r2, #21
 8001134:	431a      	orrs	r2, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800113a:	46c0      	nop			@ (mov r8, r8)
 800113c:	46bd      	mov	sp, r7
 800113e:	b002      	add	sp, #8
 8001140:	bd80      	pop	{r7, pc}
 8001142:	46c0      	nop			@ (mov r8, r8)
 8001144:	6fffffe8 	.word	0x6fffffe8

08001148 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	689a      	ldr	r2, [r3, #8]
 8001154:	2380      	movs	r3, #128	@ 0x80
 8001156:	055b      	lsls	r3, r3, #21
 8001158:	401a      	ands	r2, r3
 800115a:	2380      	movs	r3, #128	@ 0x80
 800115c:	055b      	lsls	r3, r3, #21
 800115e:	429a      	cmp	r2, r3
 8001160:	d101      	bne.n	8001166 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001162:	2301      	movs	r3, #1
 8001164:	e000      	b.n	8001168 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001166:	2300      	movs	r3, #0
}
 8001168:	0018      	movs	r0, r3
 800116a:	46bd      	mov	sp, r7
 800116c:	b002      	add	sp, #8
 800116e:	bd80      	pop	{r7, pc}

08001170 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	4a04      	ldr	r2, [pc, #16]	@ (8001190 <LL_ADC_Enable+0x20>)
 800117e:	4013      	ands	r3, r2
 8001180:	2201      	movs	r2, #1
 8001182:	431a      	orrs	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001188:	46c0      	nop			@ (mov r8, r8)
 800118a:	46bd      	mov	sp, r7
 800118c:	b002      	add	sp, #8
 800118e:	bd80      	pop	{r7, pc}
 8001190:	7fffffe8 	.word	0x7fffffe8

08001194 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	4a04      	ldr	r2, [pc, #16]	@ (80011b4 <LL_ADC_Disable+0x20>)
 80011a2:	4013      	ands	r3, r2
 80011a4:	2202      	movs	r2, #2
 80011a6:	431a      	orrs	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80011ac:	46c0      	nop			@ (mov r8, r8)
 80011ae:	46bd      	mov	sp, r7
 80011b0:	b002      	add	sp, #8
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	7fffffe8 	.word	0x7fffffe8

080011b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	2201      	movs	r2, #1
 80011c6:	4013      	ands	r3, r2
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d101      	bne.n	80011d0 <LL_ADC_IsEnabled+0x18>
 80011cc:	2301      	movs	r3, #1
 80011ce:	e000      	b.n	80011d2 <LL_ADC_IsEnabled+0x1a>
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	0018      	movs	r0, r3
 80011d4:	46bd      	mov	sp, r7
 80011d6:	b002      	add	sp, #8
 80011d8:	bd80      	pop	{r7, pc}

080011da <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	2202      	movs	r2, #2
 80011e8:	4013      	ands	r3, r2
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d101      	bne.n	80011f2 <LL_ADC_IsDisableOngoing+0x18>
 80011ee:	2301      	movs	r3, #1
 80011f0:	e000      	b.n	80011f4 <LL_ADC_IsDisableOngoing+0x1a>
 80011f2:	2300      	movs	r3, #0
}
 80011f4:	0018      	movs	r0, r3
 80011f6:	46bd      	mov	sp, r7
 80011f8:	b002      	add	sp, #8
 80011fa:	bd80      	pop	{r7, pc}

080011fc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	4a04      	ldr	r2, [pc, #16]	@ (800121c <LL_ADC_REG_StartConversion+0x20>)
 800120a:	4013      	ands	r3, r2
 800120c:	2204      	movs	r2, #4
 800120e:	431a      	orrs	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001214:	46c0      	nop			@ (mov r8, r8)
 8001216:	46bd      	mov	sp, r7
 8001218:	b002      	add	sp, #8
 800121a:	bd80      	pop	{r7, pc}
 800121c:	7fffffe8 	.word	0x7fffffe8

08001220 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	4a04      	ldr	r2, [pc, #16]	@ (8001240 <LL_ADC_REG_StopConversion+0x20>)
 800122e:	4013      	ands	r3, r2
 8001230:	2210      	movs	r2, #16
 8001232:	431a      	orrs	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001238:	46c0      	nop			@ (mov r8, r8)
 800123a:	46bd      	mov	sp, r7
 800123c:	b002      	add	sp, #8
 800123e:	bd80      	pop	{r7, pc}
 8001240:	7fffffe8 	.word	0x7fffffe8

08001244 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	2204      	movs	r2, #4
 8001252:	4013      	ands	r3, r2
 8001254:	2b04      	cmp	r3, #4
 8001256:	d101      	bne.n	800125c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001258:	2301      	movs	r3, #1
 800125a:	e000      	b.n	800125e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800125c:	2300      	movs	r3, #0
}
 800125e:	0018      	movs	r0, r3
 8001260:	46bd      	mov	sp, r7
 8001262:	b002      	add	sp, #8
 8001264:	bd80      	pop	{r7, pc}
	...

08001268 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001270:	231f      	movs	r3, #31
 8001272:	18fb      	adds	r3, r7, r3
 8001274:	2200      	movs	r2, #0
 8001276:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001278:	2300      	movs	r3, #0
 800127a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001280:	2300      	movs	r3, #0
 8001282:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d101      	bne.n	800128e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e17f      	b.n	800158e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001292:	2b00      	cmp	r3, #0
 8001294:	d10a      	bne.n	80012ac <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	0018      	movs	r0, r3
 800129a:	f7ff fc01 	bl	8000aa0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2200      	movs	r2, #0
 80012a2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2254      	movs	r2, #84	@ 0x54
 80012a8:	2100      	movs	r1, #0
 80012aa:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	0018      	movs	r0, r3
 80012b2:	f7ff ff49 	bl	8001148 <LL_ADC_IsInternalRegulatorEnabled>
 80012b6:	1e03      	subs	r3, r0, #0
 80012b8:	d115      	bne.n	80012e6 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	0018      	movs	r0, r3
 80012c0:	f7ff ff2e 	bl	8001120 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80012c4:	4bb4      	ldr	r3, [pc, #720]	@ (8001598 <HAL_ADC_Init+0x330>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	49b4      	ldr	r1, [pc, #720]	@ (800159c <HAL_ADC_Init+0x334>)
 80012ca:	0018      	movs	r0, r3
 80012cc:	f7fe ff18 	bl	8000100 <__udivsi3>
 80012d0:	0003      	movs	r3, r0
 80012d2:	3301      	adds	r3, #1
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80012d8:	e002      	b.n	80012e0 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	3b01      	subs	r3, #1
 80012de:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1f9      	bne.n	80012da <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	0018      	movs	r0, r3
 80012ec:	f7ff ff2c 	bl	8001148 <LL_ADC_IsInternalRegulatorEnabled>
 80012f0:	1e03      	subs	r3, r0, #0
 80012f2:	d10f      	bne.n	8001314 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012f8:	2210      	movs	r2, #16
 80012fa:	431a      	orrs	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001304:	2201      	movs	r2, #1
 8001306:	431a      	orrs	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800130c:	231f      	movs	r3, #31
 800130e:	18fb      	adds	r3, r7, r3
 8001310:	2201      	movs	r2, #1
 8001312:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	0018      	movs	r0, r3
 800131a:	f7ff ff93 	bl	8001244 <LL_ADC_REG_IsConversionOngoing>
 800131e:	0003      	movs	r3, r0
 8001320:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001326:	2210      	movs	r2, #16
 8001328:	4013      	ands	r3, r2
 800132a:	d000      	beq.n	800132e <HAL_ADC_Init+0xc6>
 800132c:	e122      	b.n	8001574 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d000      	beq.n	8001336 <HAL_ADC_Init+0xce>
 8001334:	e11e      	b.n	8001574 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800133a:	4a99      	ldr	r2, [pc, #612]	@ (80015a0 <HAL_ADC_Init+0x338>)
 800133c:	4013      	ands	r3, r2
 800133e:	2202      	movs	r2, #2
 8001340:	431a      	orrs	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	0018      	movs	r0, r3
 800134c:	f7ff ff34 	bl	80011b8 <LL_ADC_IsEnabled>
 8001350:	1e03      	subs	r3, r0, #0
 8001352:	d000      	beq.n	8001356 <HAL_ADC_Init+0xee>
 8001354:	e0ad      	b.n	80014b2 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	7e1b      	ldrb	r3, [r3, #24]
 800135e:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001360:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	7e5b      	ldrb	r3, [r3, #25]
 8001366:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001368:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	7e9b      	ldrb	r3, [r3, #26]
 800136e:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001370:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	2b00      	cmp	r3, #0
 8001378:	d002      	beq.n	8001380 <HAL_ADC_Init+0x118>
 800137a:	2380      	movs	r3, #128	@ 0x80
 800137c:	015b      	lsls	r3, r3, #5
 800137e:	e000      	b.n	8001382 <HAL_ADC_Init+0x11a>
 8001380:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001382:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001388:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	691b      	ldr	r3, [r3, #16]
 800138e:	2b00      	cmp	r3, #0
 8001390:	da04      	bge.n	800139c <HAL_ADC_Init+0x134>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	085b      	lsrs	r3, r3, #1
 800139a:	e001      	b.n	80013a0 <HAL_ADC_Init+0x138>
 800139c:	2380      	movs	r3, #128	@ 0x80
 800139e:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80013a0:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	212c      	movs	r1, #44	@ 0x2c
 80013a6:	5c5b      	ldrb	r3, [r3, r1]
 80013a8:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80013aa:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2220      	movs	r2, #32
 80013b6:	5c9b      	ldrb	r3, [r3, r2]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d115      	bne.n	80013e8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	7e9b      	ldrb	r3, [r3, #26]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d105      	bne.n	80013d0 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	2280      	movs	r2, #128	@ 0x80
 80013c8:	0252      	lsls	r2, r2, #9
 80013ca:	4313      	orrs	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
 80013ce:	e00b      	b.n	80013e8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013d4:	2220      	movs	r2, #32
 80013d6:	431a      	orrs	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013e0:	2201      	movs	r2, #1
 80013e2:	431a      	orrs	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d00a      	beq.n	8001406 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80013f4:	23e0      	movs	r3, #224	@ 0xe0
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80013fe:	4313      	orrs	r3, r2
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4313      	orrs	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	4a65      	ldr	r2, [pc, #404]	@ (80015a4 <HAL_ADC_Init+0x33c>)
 800140e:	4013      	ands	r3, r2
 8001410:	0019      	movs	r1, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	430a      	orrs	r2, r1
 800141a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	0f9b      	lsrs	r3, r3, #30
 8001422:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001428:	4313      	orrs	r3, r2
 800142a:	697a      	ldr	r2, [r7, #20]
 800142c:	4313      	orrs	r3, r2
 800142e:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	223c      	movs	r2, #60	@ 0x3c
 8001434:	5c9b      	ldrb	r3, [r3, r2]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d111      	bne.n	800145e <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	0f9b      	lsrs	r3, r3, #30
 8001440:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001446:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 800144c:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001452:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	4313      	orrs	r3, r2
 8001458:	2201      	movs	r2, #1
 800145a:	4313      	orrs	r3, r2
 800145c:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	4a50      	ldr	r2, [pc, #320]	@ (80015a8 <HAL_ADC_Init+0x340>)
 8001466:	4013      	ands	r3, r2
 8001468:	0019      	movs	r1, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	697a      	ldr	r2, [r7, #20]
 8001470:	430a      	orrs	r2, r1
 8001472:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685a      	ldr	r2, [r3, #4]
 8001478:	23c0      	movs	r3, #192	@ 0xc0
 800147a:	061b      	lsls	r3, r3, #24
 800147c:	429a      	cmp	r2, r3
 800147e:	d018      	beq.n	80014b2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001484:	2380      	movs	r3, #128	@ 0x80
 8001486:	05db      	lsls	r3, r3, #23
 8001488:	429a      	cmp	r2, r3
 800148a:	d012      	beq.n	80014b2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001490:	2380      	movs	r3, #128	@ 0x80
 8001492:	061b      	lsls	r3, r3, #24
 8001494:	429a      	cmp	r2, r3
 8001496:	d00c      	beq.n	80014b2 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001498:	4b44      	ldr	r3, [pc, #272]	@ (80015ac <HAL_ADC_Init+0x344>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a44      	ldr	r2, [pc, #272]	@ (80015b0 <HAL_ADC_Init+0x348>)
 800149e:	4013      	ands	r3, r2
 80014a0:	0019      	movs	r1, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685a      	ldr	r2, [r3, #4]
 80014a6:	23f0      	movs	r3, #240	@ 0xf0
 80014a8:	039b      	lsls	r3, r3, #14
 80014aa:	401a      	ands	r2, r3
 80014ac:	4b3f      	ldr	r3, [pc, #252]	@ (80015ac <HAL_ADC_Init+0x344>)
 80014ae:	430a      	orrs	r2, r1
 80014b0:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6818      	ldr	r0, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014ba:	001a      	movs	r2, r3
 80014bc:	2100      	movs	r1, #0
 80014be:	f7ff fd8a 	bl	8000fd6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6818      	ldr	r0, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014ca:	493a      	ldr	r1, [pc, #232]	@ (80015b4 <HAL_ADC_Init+0x34c>)
 80014cc:	001a      	movs	r2, r3
 80014ce:	f7ff fd82 	bl	8000fd6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	691b      	ldr	r3, [r3, #16]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d109      	bne.n	80014ee <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2110      	movs	r1, #16
 80014e6:	4249      	negs	r1, r1
 80014e8:	430a      	orrs	r2, r1
 80014ea:	629a      	str	r2, [r3, #40]	@ 0x28
 80014ec:	e018      	b.n	8001520 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	691a      	ldr	r2, [r3, #16]
 80014f2:	2380      	movs	r3, #128	@ 0x80
 80014f4:	039b      	lsls	r3, r3, #14
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d112      	bne.n	8001520 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	69db      	ldr	r3, [r3, #28]
 8001504:	3b01      	subs	r3, #1
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	221c      	movs	r2, #28
 800150a:	4013      	ands	r3, r2
 800150c:	2210      	movs	r2, #16
 800150e:	4252      	negs	r2, r2
 8001510:	409a      	lsls	r2, r3
 8001512:	0011      	movs	r1, r2
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	430a      	orrs	r2, r1
 800151e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2100      	movs	r1, #0
 8001526:	0018      	movs	r0, r3
 8001528:	f7ff fd72 	bl	8001010 <LL_ADC_GetSamplingTimeCommonChannels>
 800152c:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001532:	429a      	cmp	r2, r3
 8001534:	d10b      	bne.n	800154e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001540:	2203      	movs	r2, #3
 8001542:	4393      	bics	r3, r2
 8001544:	2201      	movs	r2, #1
 8001546:	431a      	orrs	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800154c:	e01c      	b.n	8001588 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001552:	2212      	movs	r2, #18
 8001554:	4393      	bics	r3, r2
 8001556:	2210      	movs	r2, #16
 8001558:	431a      	orrs	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001562:	2201      	movs	r2, #1
 8001564:	431a      	orrs	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800156a:	231f      	movs	r3, #31
 800156c:	18fb      	adds	r3, r7, r3
 800156e:	2201      	movs	r2, #1
 8001570:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001572:	e009      	b.n	8001588 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001578:	2210      	movs	r2, #16
 800157a:	431a      	orrs	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001580:	231f      	movs	r3, #31
 8001582:	18fb      	adds	r3, r7, r3
 8001584:	2201      	movs	r2, #1
 8001586:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001588:	231f      	movs	r3, #31
 800158a:	18fb      	adds	r3, r7, r3
 800158c:	781b      	ldrb	r3, [r3, #0]
}
 800158e:	0018      	movs	r0, r3
 8001590:	46bd      	mov	sp, r7
 8001592:	b008      	add	sp, #32
 8001594:	bd80      	pop	{r7, pc}
 8001596:	46c0      	nop			@ (mov r8, r8)
 8001598:	20000000 	.word	0x20000000
 800159c:	00030d40 	.word	0x00030d40
 80015a0:	fffffefd 	.word	0xfffffefd
 80015a4:	ffde0201 	.word	0xffde0201
 80015a8:	1ffffc02 	.word	0x1ffffc02
 80015ac:	40012708 	.word	0x40012708
 80015b0:	ffc3ffff 	.word	0xffc3ffff
 80015b4:	07ffff04 	.word	0x07ffff04

080015b8 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80015b8:	b5b0      	push	{r4, r5, r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	0018      	movs	r0, r3
 80015c6:	f7ff fe3d 	bl	8001244 <LL_ADC_REG_IsConversionOngoing>
 80015ca:	1e03      	subs	r3, r0, #0
 80015cc:	d135      	bne.n	800163a <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2254      	movs	r2, #84	@ 0x54
 80015d2:	5c9b      	ldrb	r3, [r3, r2]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d101      	bne.n	80015dc <HAL_ADC_Start+0x24>
 80015d8:	2302      	movs	r3, #2
 80015da:	e035      	b.n	8001648 <HAL_ADC_Start+0x90>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2254      	movs	r2, #84	@ 0x54
 80015e0:	2101      	movs	r1, #1
 80015e2:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80015e4:	250f      	movs	r5, #15
 80015e6:	197c      	adds	r4, r7, r5
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	0018      	movs	r0, r3
 80015ec:	f000 fb28 	bl	8001c40 <ADC_Enable>
 80015f0:	0003      	movs	r3, r0
 80015f2:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80015f4:	197b      	adds	r3, r7, r5
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d119      	bne.n	8001630 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001600:	4a13      	ldr	r2, [pc, #76]	@ (8001650 <HAL_ADC_Start+0x98>)
 8001602:	4013      	ands	r3, r2
 8001604:	2280      	movs	r2, #128	@ 0x80
 8001606:	0052      	lsls	r2, r2, #1
 8001608:	431a      	orrs	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	221c      	movs	r2, #28
 800161a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2254      	movs	r2, #84	@ 0x54
 8001620:	2100      	movs	r1, #0
 8001622:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	0018      	movs	r0, r3
 800162a:	f7ff fde7 	bl	80011fc <LL_ADC_REG_StartConversion>
 800162e:	e008      	b.n	8001642 <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2254      	movs	r2, #84	@ 0x54
 8001634:	2100      	movs	r1, #0
 8001636:	5499      	strb	r1, [r3, r2]
 8001638:	e003      	b.n	8001642 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800163a:	230f      	movs	r3, #15
 800163c:	18fb      	adds	r3, r7, r3
 800163e:	2202      	movs	r2, #2
 8001640:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001642:	230f      	movs	r3, #15
 8001644:	18fb      	adds	r3, r7, r3
 8001646:	781b      	ldrb	r3, [r3, #0]
}
 8001648:	0018      	movs	r0, r3
 800164a:	46bd      	mov	sp, r7
 800164c:	b004      	add	sp, #16
 800164e:	bdb0      	pop	{r4, r5, r7, pc}
 8001650:	fffff0fe 	.word	0xfffff0fe

08001654 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001654:	b5b0      	push	{r4, r5, r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2254      	movs	r2, #84	@ 0x54
 8001660:	5c9b      	ldrb	r3, [r3, r2]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d101      	bne.n	800166a <HAL_ADC_Stop+0x16>
 8001666:	2302      	movs	r3, #2
 8001668:	e029      	b.n	80016be <HAL_ADC_Stop+0x6a>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2254      	movs	r2, #84	@ 0x54
 800166e:	2101      	movs	r1, #1
 8001670:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001672:	250f      	movs	r5, #15
 8001674:	197c      	adds	r4, r7, r5
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	0018      	movs	r0, r3
 800167a:	f000 fa9f 	bl	8001bbc <ADC_ConversionStop>
 800167e:	0003      	movs	r3, r0
 8001680:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001682:	197b      	adds	r3, r7, r5
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d112      	bne.n	80016b0 <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800168a:	197c      	adds	r4, r7, r5
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	0018      	movs	r0, r3
 8001690:	f000 fb5c 	bl	8001d4c <ADC_Disable>
 8001694:	0003      	movs	r3, r0
 8001696:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001698:	197b      	adds	r3, r7, r5
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d107      	bne.n	80016b0 <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a4:	4a08      	ldr	r2, [pc, #32]	@ (80016c8 <HAL_ADC_Stop+0x74>)
 80016a6:	4013      	ands	r3, r2
 80016a8:	2201      	movs	r2, #1
 80016aa:	431a      	orrs	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2254      	movs	r2, #84	@ 0x54
 80016b4:	2100      	movs	r1, #0
 80016b6:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80016b8:	230f      	movs	r3, #15
 80016ba:	18fb      	adds	r3, r7, r3
 80016bc:	781b      	ldrb	r3, [r3, #0]
}
 80016be:	0018      	movs	r0, r3
 80016c0:	46bd      	mov	sp, r7
 80016c2:	b004      	add	sp, #16
 80016c4:	bdb0      	pop	{r4, r5, r7, pc}
 80016c6:	46c0      	nop			@ (mov r8, r8)
 80016c8:	fffffefe 	.word	0xfffffefe

080016cc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	2b08      	cmp	r3, #8
 80016dc:	d102      	bne.n	80016e4 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80016de:	2308      	movs	r3, #8
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	e00f      	b.n	8001704 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	2201      	movs	r2, #1
 80016ec:	4013      	ands	r3, r2
 80016ee:	d007      	beq.n	8001700 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016f4:	2220      	movs	r2, #32
 80016f6:	431a      	orrs	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e072      	b.n	80017e6 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8001700:	2304      	movs	r3, #4
 8001702:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001704:	f7ff fc18 	bl	8000f38 <HAL_GetTick>
 8001708:	0003      	movs	r3, r0
 800170a:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800170c:	e01f      	b.n	800174e <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	3301      	adds	r3, #1
 8001712:	d01c      	beq.n	800174e <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001714:	f7ff fc10 	bl	8000f38 <HAL_GetTick>
 8001718:	0002      	movs	r2, r0
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	683a      	ldr	r2, [r7, #0]
 8001720:	429a      	cmp	r2, r3
 8001722:	d302      	bcc.n	800172a <HAL_ADC_PollForConversion+0x5e>
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d111      	bne.n	800174e <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	68fa      	ldr	r2, [r7, #12]
 8001732:	4013      	ands	r3, r2
 8001734:	d10b      	bne.n	800174e <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800173a:	2204      	movs	r2, #4
 800173c:	431a      	orrs	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2254      	movs	r2, #84	@ 0x54
 8001746:	2100      	movs	r1, #0
 8001748:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e04b      	b.n	80017e6 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	68fa      	ldr	r2, [r7, #12]
 8001756:	4013      	ands	r3, r2
 8001758:	d0d9      	beq.n	800170e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800175e:	2280      	movs	r2, #128	@ 0x80
 8001760:	0092      	lsls	r2, r2, #2
 8001762:	431a      	orrs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	0018      	movs	r0, r3
 800176e:	f7ff fc66 	bl	800103e <LL_ADC_REG_IsTriggerSourceSWStart>
 8001772:	1e03      	subs	r3, r0, #0
 8001774:	d02e      	beq.n	80017d4 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	7e9b      	ldrb	r3, [r3, #26]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d12a      	bne.n	80017d4 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2208      	movs	r2, #8
 8001786:	4013      	ands	r3, r2
 8001788:	2b08      	cmp	r3, #8
 800178a:	d123      	bne.n	80017d4 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	0018      	movs	r0, r3
 8001792:	f7ff fd57 	bl	8001244 <LL_ADC_REG_IsConversionOngoing>
 8001796:	1e03      	subs	r3, r0, #0
 8001798:	d110      	bne.n	80017bc <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	685a      	ldr	r2, [r3, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	210c      	movs	r1, #12
 80017a6:	438a      	bics	r2, r1
 80017a8:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ae:	4a10      	ldr	r2, [pc, #64]	@ (80017f0 <HAL_ADC_PollForConversion+0x124>)
 80017b0:	4013      	ands	r3, r2
 80017b2:	2201      	movs	r2, #1
 80017b4:	431a      	orrs	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	659a      	str	r2, [r3, #88]	@ 0x58
 80017ba:	e00b      	b.n	80017d4 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c0:	2220      	movs	r2, #32
 80017c2:	431a      	orrs	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017cc:	2201      	movs	r2, #1
 80017ce:	431a      	orrs	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	7e1b      	ldrb	r3, [r3, #24]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d103      	bne.n	80017e4 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	220c      	movs	r2, #12
 80017e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	0018      	movs	r0, r3
 80017e8:	46bd      	mov	sp, r7
 80017ea:	b004      	add	sp, #16
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	46c0      	nop			@ (mov r8, r8)
 80017f0:	fffffefe 	.word	0xfffffefe

080017f4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001802:	0018      	movs	r0, r3
 8001804:	46bd      	mov	sp, r7
 8001806:	b002      	add	sp, #8
 8001808:	bd80      	pop	{r7, pc}
	...

0800180c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001816:	2317      	movs	r3, #23
 8001818:	18fb      	adds	r3, r7, r3
 800181a:	2200      	movs	r2, #0
 800181c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800181e:	2300      	movs	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2254      	movs	r2, #84	@ 0x54
 8001826:	5c9b      	ldrb	r3, [r3, r2]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d101      	bne.n	8001830 <HAL_ADC_ConfigChannel+0x24>
 800182c:	2302      	movs	r3, #2
 800182e:	e1c0      	b.n	8001bb2 <HAL_ADC_ConfigChannel+0x3a6>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2254      	movs	r2, #84	@ 0x54
 8001834:	2101      	movs	r1, #1
 8001836:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	0018      	movs	r0, r3
 800183e:	f7ff fd01 	bl	8001244 <LL_ADC_REG_IsConversionOngoing>
 8001842:	1e03      	subs	r3, r0, #0
 8001844:	d000      	beq.n	8001848 <HAL_ADC_ConfigChannel+0x3c>
 8001846:	e1a3      	b.n	8001b90 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	2b02      	cmp	r3, #2
 800184e:	d100      	bne.n	8001852 <HAL_ADC_ConfigChannel+0x46>
 8001850:	e143      	b.n	8001ada <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	691a      	ldr	r2, [r3, #16]
 8001856:	2380      	movs	r3, #128	@ 0x80
 8001858:	061b      	lsls	r3, r3, #24
 800185a:	429a      	cmp	r2, r3
 800185c:	d004      	beq.n	8001868 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001862:	4ac1      	ldr	r2, [pc, #772]	@ (8001b68 <HAL_ADC_ConfigChannel+0x35c>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d108      	bne.n	800187a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	0019      	movs	r1, r3
 8001872:	0010      	movs	r0, r2
 8001874:	f7ff fc14 	bl	80010a0 <LL_ADC_REG_SetSequencerChAdd>
 8001878:	e0c9      	b.n	8001a0e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	211f      	movs	r1, #31
 8001884:	400b      	ands	r3, r1
 8001886:	210f      	movs	r1, #15
 8001888:	4099      	lsls	r1, r3
 800188a:	000b      	movs	r3, r1
 800188c:	43db      	mvns	r3, r3
 800188e:	4013      	ands	r3, r2
 8001890:	0019      	movs	r1, r3
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	035b      	lsls	r3, r3, #13
 8001898:	0b5b      	lsrs	r3, r3, #13
 800189a:	d105      	bne.n	80018a8 <HAL_ADC_ConfigChannel+0x9c>
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	0e9b      	lsrs	r3, r3, #26
 80018a2:	221f      	movs	r2, #31
 80018a4:	4013      	ands	r3, r2
 80018a6:	e098      	b.n	80019da <HAL_ADC_ConfigChannel+0x1ce>
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2201      	movs	r2, #1
 80018ae:	4013      	ands	r3, r2
 80018b0:	d000      	beq.n	80018b4 <HAL_ADC_ConfigChannel+0xa8>
 80018b2:	e091      	b.n	80019d8 <HAL_ADC_ConfigChannel+0x1cc>
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2202      	movs	r2, #2
 80018ba:	4013      	ands	r3, r2
 80018bc:	d000      	beq.n	80018c0 <HAL_ADC_ConfigChannel+0xb4>
 80018be:	e089      	b.n	80019d4 <HAL_ADC_ConfigChannel+0x1c8>
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2204      	movs	r2, #4
 80018c6:	4013      	ands	r3, r2
 80018c8:	d000      	beq.n	80018cc <HAL_ADC_ConfigChannel+0xc0>
 80018ca:	e081      	b.n	80019d0 <HAL_ADC_ConfigChannel+0x1c4>
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2208      	movs	r2, #8
 80018d2:	4013      	ands	r3, r2
 80018d4:	d000      	beq.n	80018d8 <HAL_ADC_ConfigChannel+0xcc>
 80018d6:	e079      	b.n	80019cc <HAL_ADC_ConfigChannel+0x1c0>
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2210      	movs	r2, #16
 80018de:	4013      	ands	r3, r2
 80018e0:	d000      	beq.n	80018e4 <HAL_ADC_ConfigChannel+0xd8>
 80018e2:	e071      	b.n	80019c8 <HAL_ADC_ConfigChannel+0x1bc>
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2220      	movs	r2, #32
 80018ea:	4013      	ands	r3, r2
 80018ec:	d000      	beq.n	80018f0 <HAL_ADC_ConfigChannel+0xe4>
 80018ee:	e069      	b.n	80019c4 <HAL_ADC_ConfigChannel+0x1b8>
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2240      	movs	r2, #64	@ 0x40
 80018f6:	4013      	ands	r3, r2
 80018f8:	d000      	beq.n	80018fc <HAL_ADC_ConfigChannel+0xf0>
 80018fa:	e061      	b.n	80019c0 <HAL_ADC_ConfigChannel+0x1b4>
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2280      	movs	r2, #128	@ 0x80
 8001902:	4013      	ands	r3, r2
 8001904:	d000      	beq.n	8001908 <HAL_ADC_ConfigChannel+0xfc>
 8001906:	e059      	b.n	80019bc <HAL_ADC_ConfigChannel+0x1b0>
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	2380      	movs	r3, #128	@ 0x80
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	4013      	ands	r3, r2
 8001912:	d151      	bne.n	80019b8 <HAL_ADC_ConfigChannel+0x1ac>
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	2380      	movs	r3, #128	@ 0x80
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4013      	ands	r3, r2
 800191e:	d149      	bne.n	80019b4 <HAL_ADC_ConfigChannel+0x1a8>
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	2380      	movs	r3, #128	@ 0x80
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	4013      	ands	r3, r2
 800192a:	d141      	bne.n	80019b0 <HAL_ADC_ConfigChannel+0x1a4>
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	2380      	movs	r3, #128	@ 0x80
 8001932:	011b      	lsls	r3, r3, #4
 8001934:	4013      	ands	r3, r2
 8001936:	d139      	bne.n	80019ac <HAL_ADC_ConfigChannel+0x1a0>
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	2380      	movs	r3, #128	@ 0x80
 800193e:	015b      	lsls	r3, r3, #5
 8001940:	4013      	ands	r3, r2
 8001942:	d131      	bne.n	80019a8 <HAL_ADC_ConfigChannel+0x19c>
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	2380      	movs	r3, #128	@ 0x80
 800194a:	019b      	lsls	r3, r3, #6
 800194c:	4013      	ands	r3, r2
 800194e:	d129      	bne.n	80019a4 <HAL_ADC_ConfigChannel+0x198>
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	2380      	movs	r3, #128	@ 0x80
 8001956:	01db      	lsls	r3, r3, #7
 8001958:	4013      	ands	r3, r2
 800195a:	d121      	bne.n	80019a0 <HAL_ADC_ConfigChannel+0x194>
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	2380      	movs	r3, #128	@ 0x80
 8001962:	021b      	lsls	r3, r3, #8
 8001964:	4013      	ands	r3, r2
 8001966:	d119      	bne.n	800199c <HAL_ADC_ConfigChannel+0x190>
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	2380      	movs	r3, #128	@ 0x80
 800196e:	025b      	lsls	r3, r3, #9
 8001970:	4013      	ands	r3, r2
 8001972:	d111      	bne.n	8001998 <HAL_ADC_ConfigChannel+0x18c>
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	2380      	movs	r3, #128	@ 0x80
 800197a:	029b      	lsls	r3, r3, #10
 800197c:	4013      	ands	r3, r2
 800197e:	d109      	bne.n	8001994 <HAL_ADC_ConfigChannel+0x188>
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	2380      	movs	r3, #128	@ 0x80
 8001986:	02db      	lsls	r3, r3, #11
 8001988:	4013      	ands	r3, r2
 800198a:	d001      	beq.n	8001990 <HAL_ADC_ConfigChannel+0x184>
 800198c:	2312      	movs	r3, #18
 800198e:	e024      	b.n	80019da <HAL_ADC_ConfigChannel+0x1ce>
 8001990:	2300      	movs	r3, #0
 8001992:	e022      	b.n	80019da <HAL_ADC_ConfigChannel+0x1ce>
 8001994:	2311      	movs	r3, #17
 8001996:	e020      	b.n	80019da <HAL_ADC_ConfigChannel+0x1ce>
 8001998:	2310      	movs	r3, #16
 800199a:	e01e      	b.n	80019da <HAL_ADC_ConfigChannel+0x1ce>
 800199c:	230f      	movs	r3, #15
 800199e:	e01c      	b.n	80019da <HAL_ADC_ConfigChannel+0x1ce>
 80019a0:	230e      	movs	r3, #14
 80019a2:	e01a      	b.n	80019da <HAL_ADC_ConfigChannel+0x1ce>
 80019a4:	230d      	movs	r3, #13
 80019a6:	e018      	b.n	80019da <HAL_ADC_ConfigChannel+0x1ce>
 80019a8:	230c      	movs	r3, #12
 80019aa:	e016      	b.n	80019da <HAL_ADC_ConfigChannel+0x1ce>
 80019ac:	230b      	movs	r3, #11
 80019ae:	e014      	b.n	80019da <HAL_ADC_ConfigChannel+0x1ce>
 80019b0:	230a      	movs	r3, #10
 80019b2:	e012      	b.n	80019da <HAL_ADC_ConfigChannel+0x1ce>
 80019b4:	2309      	movs	r3, #9
 80019b6:	e010      	b.n	80019da <HAL_ADC_ConfigChannel+0x1ce>
 80019b8:	2308      	movs	r3, #8
 80019ba:	e00e      	b.n	80019da <HAL_ADC_ConfigChannel+0x1ce>
 80019bc:	2307      	movs	r3, #7
 80019be:	e00c      	b.n	80019da <HAL_ADC_ConfigChannel+0x1ce>
 80019c0:	2306      	movs	r3, #6
 80019c2:	e00a      	b.n	80019da <HAL_ADC_ConfigChannel+0x1ce>
 80019c4:	2305      	movs	r3, #5
 80019c6:	e008      	b.n	80019da <HAL_ADC_ConfigChannel+0x1ce>
 80019c8:	2304      	movs	r3, #4
 80019ca:	e006      	b.n	80019da <HAL_ADC_ConfigChannel+0x1ce>
 80019cc:	2303      	movs	r3, #3
 80019ce:	e004      	b.n	80019da <HAL_ADC_ConfigChannel+0x1ce>
 80019d0:	2302      	movs	r3, #2
 80019d2:	e002      	b.n	80019da <HAL_ADC_ConfigChannel+0x1ce>
 80019d4:	2301      	movs	r3, #1
 80019d6:	e000      	b.n	80019da <HAL_ADC_ConfigChannel+0x1ce>
 80019d8:	2300      	movs	r3, #0
 80019da:	683a      	ldr	r2, [r7, #0]
 80019dc:	6852      	ldr	r2, [r2, #4]
 80019de:	201f      	movs	r0, #31
 80019e0:	4002      	ands	r2, r0
 80019e2:	4093      	lsls	r3, r2
 80019e4:	000a      	movs	r2, r1
 80019e6:	431a      	orrs	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	089b      	lsrs	r3, r3, #2
 80019f2:	1c5a      	adds	r2, r3, #1
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	69db      	ldr	r3, [r3, #28]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d808      	bhi.n	8001a0e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6818      	ldr	r0, [r3, #0]
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	6859      	ldr	r1, [r3, #4]
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	001a      	movs	r2, r3
 8001a0a:	f7ff fb29 	bl	8001060 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6818      	ldr	r0, [r3, #0]
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	6819      	ldr	r1, [r3, #0]
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	001a      	movs	r2, r3
 8001a1c:	f7ff fb64 	bl	80010e8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	db00      	blt.n	8001a2a <HAL_ADC_ConfigChannel+0x21e>
 8001a28:	e0bc      	b.n	8001ba4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a2a:	4b50      	ldr	r3, [pc, #320]	@ (8001b6c <HAL_ADC_ConfigChannel+0x360>)
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	f7ff fac5 	bl	8000fbc <LL_ADC_GetCommonPathInternalCh>
 8001a32:	0003      	movs	r3, r0
 8001a34:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a4d      	ldr	r2, [pc, #308]	@ (8001b70 <HAL_ADC_ConfigChannel+0x364>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d122      	bne.n	8001a86 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	2380      	movs	r3, #128	@ 0x80
 8001a44:	041b      	lsls	r3, r3, #16
 8001a46:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a48:	d11d      	bne.n	8001a86 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	2280      	movs	r2, #128	@ 0x80
 8001a4e:	0412      	lsls	r2, r2, #16
 8001a50:	4313      	orrs	r3, r2
 8001a52:	4a46      	ldr	r2, [pc, #280]	@ (8001b6c <HAL_ADC_ConfigChannel+0x360>)
 8001a54:	0019      	movs	r1, r3
 8001a56:	0010      	movs	r0, r2
 8001a58:	f7ff fa9c 	bl	8000f94 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a5c:	4b45      	ldr	r3, [pc, #276]	@ (8001b74 <HAL_ADC_ConfigChannel+0x368>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4945      	ldr	r1, [pc, #276]	@ (8001b78 <HAL_ADC_ConfigChannel+0x36c>)
 8001a62:	0018      	movs	r0, r3
 8001a64:	f7fe fb4c 	bl	8000100 <__udivsi3>
 8001a68:	0003      	movs	r3, r0
 8001a6a:	1c5a      	adds	r2, r3, #1
 8001a6c:	0013      	movs	r3, r2
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	189b      	adds	r3, r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001a76:	e002      	b.n	8001a7e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1f9      	bne.n	8001a78 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a84:	e08e      	b.n	8001ba4 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a3c      	ldr	r2, [pc, #240]	@ (8001b7c <HAL_ADC_ConfigChannel+0x370>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d10e      	bne.n	8001aae <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	2380      	movs	r3, #128	@ 0x80
 8001a94:	045b      	lsls	r3, r3, #17
 8001a96:	4013      	ands	r3, r2
 8001a98:	d109      	bne.n	8001aae <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	2280      	movs	r2, #128	@ 0x80
 8001a9e:	0452      	lsls	r2, r2, #17
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	4a32      	ldr	r2, [pc, #200]	@ (8001b6c <HAL_ADC_ConfigChannel+0x360>)
 8001aa4:	0019      	movs	r1, r3
 8001aa6:	0010      	movs	r0, r2
 8001aa8:	f7ff fa74 	bl	8000f94 <LL_ADC_SetCommonPathInternalCh>
 8001aac:	e07a      	b.n	8001ba4 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a33      	ldr	r2, [pc, #204]	@ (8001b80 <HAL_ADC_ConfigChannel+0x374>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d000      	beq.n	8001aba <HAL_ADC_ConfigChannel+0x2ae>
 8001ab8:	e074      	b.n	8001ba4 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	2380      	movs	r3, #128	@ 0x80
 8001abe:	03db      	lsls	r3, r3, #15
 8001ac0:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001ac2:	d000      	beq.n	8001ac6 <HAL_ADC_ConfigChannel+0x2ba>
 8001ac4:	e06e      	b.n	8001ba4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	2280      	movs	r2, #128	@ 0x80
 8001aca:	03d2      	lsls	r2, r2, #15
 8001acc:	4313      	orrs	r3, r2
 8001ace:	4a27      	ldr	r2, [pc, #156]	@ (8001b6c <HAL_ADC_ConfigChannel+0x360>)
 8001ad0:	0019      	movs	r1, r3
 8001ad2:	0010      	movs	r0, r2
 8001ad4:	f7ff fa5e 	bl	8000f94 <LL_ADC_SetCommonPathInternalCh>
 8001ad8:	e064      	b.n	8001ba4 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	691a      	ldr	r2, [r3, #16]
 8001ade:	2380      	movs	r3, #128	@ 0x80
 8001ae0:	061b      	lsls	r3, r3, #24
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d004      	beq.n	8001af0 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001aea:	4a1f      	ldr	r2, [pc, #124]	@ (8001b68 <HAL_ADC_ConfigChannel+0x35c>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d107      	bne.n	8001b00 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	0019      	movs	r1, r3
 8001afa:	0010      	movs	r0, r2
 8001afc:	f7ff fae1 	bl	80010c2 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	da4d      	bge.n	8001ba4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b08:	4b18      	ldr	r3, [pc, #96]	@ (8001b6c <HAL_ADC_ConfigChannel+0x360>)
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	f7ff fa56 	bl	8000fbc <LL_ADC_GetCommonPathInternalCh>
 8001b10:	0003      	movs	r3, r0
 8001b12:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a15      	ldr	r2, [pc, #84]	@ (8001b70 <HAL_ADC_ConfigChannel+0x364>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d108      	bne.n	8001b30 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	4a18      	ldr	r2, [pc, #96]	@ (8001b84 <HAL_ADC_ConfigChannel+0x378>)
 8001b22:	4013      	ands	r3, r2
 8001b24:	4a11      	ldr	r2, [pc, #68]	@ (8001b6c <HAL_ADC_ConfigChannel+0x360>)
 8001b26:	0019      	movs	r1, r3
 8001b28:	0010      	movs	r0, r2
 8001b2a:	f7ff fa33 	bl	8000f94 <LL_ADC_SetCommonPathInternalCh>
 8001b2e:	e039      	b.n	8001ba4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a11      	ldr	r2, [pc, #68]	@ (8001b7c <HAL_ADC_ConfigChannel+0x370>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d108      	bne.n	8001b4c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	4a12      	ldr	r2, [pc, #72]	@ (8001b88 <HAL_ADC_ConfigChannel+0x37c>)
 8001b3e:	4013      	ands	r3, r2
 8001b40:	4a0a      	ldr	r2, [pc, #40]	@ (8001b6c <HAL_ADC_ConfigChannel+0x360>)
 8001b42:	0019      	movs	r1, r3
 8001b44:	0010      	movs	r0, r2
 8001b46:	f7ff fa25 	bl	8000f94 <LL_ADC_SetCommonPathInternalCh>
 8001b4a:	e02b      	b.n	8001ba4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a0b      	ldr	r2, [pc, #44]	@ (8001b80 <HAL_ADC_ConfigChannel+0x374>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d126      	bne.n	8001ba4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	4a0c      	ldr	r2, [pc, #48]	@ (8001b8c <HAL_ADC_ConfigChannel+0x380>)
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	4a03      	ldr	r2, [pc, #12]	@ (8001b6c <HAL_ADC_ConfigChannel+0x360>)
 8001b5e:	0019      	movs	r1, r3
 8001b60:	0010      	movs	r0, r2
 8001b62:	f7ff fa17 	bl	8000f94 <LL_ADC_SetCommonPathInternalCh>
 8001b66:	e01d      	b.n	8001ba4 <HAL_ADC_ConfigChannel+0x398>
 8001b68:	80000004 	.word	0x80000004
 8001b6c:	40012708 	.word	0x40012708
 8001b70:	b0001000 	.word	0xb0001000
 8001b74:	20000000 	.word	0x20000000
 8001b78:	00030d40 	.word	0x00030d40
 8001b7c:	b8004000 	.word	0xb8004000
 8001b80:	b4002000 	.word	0xb4002000
 8001b84:	ff7fffff 	.word	0xff7fffff
 8001b88:	feffffff 	.word	0xfeffffff
 8001b8c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b94:	2220      	movs	r2, #32
 8001b96:	431a      	orrs	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001b9c:	2317      	movs	r3, #23
 8001b9e:	18fb      	adds	r3, r7, r3
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2254      	movs	r2, #84	@ 0x54
 8001ba8:	2100      	movs	r1, #0
 8001baa:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001bac:	2317      	movs	r3, #23
 8001bae:	18fb      	adds	r3, r7, r3
 8001bb0:	781b      	ldrb	r3, [r3, #0]
}
 8001bb2:	0018      	movs	r0, r3
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	b006      	add	sp, #24
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	46c0      	nop			@ (mov r8, r8)

08001bbc <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	0018      	movs	r0, r3
 8001bca:	f7ff fb3b 	bl	8001244 <LL_ADC_REG_IsConversionOngoing>
 8001bce:	1e03      	subs	r3, r0, #0
 8001bd0:	d031      	beq.n	8001c36 <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	f7ff faff 	bl	80011da <LL_ADC_IsDisableOngoing>
 8001bdc:	1e03      	subs	r3, r0, #0
 8001bde:	d104      	bne.n	8001bea <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	0018      	movs	r0, r3
 8001be6:	f7ff fb1b 	bl	8001220 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001bea:	f7ff f9a5 	bl	8000f38 <HAL_GetTick>
 8001bee:	0003      	movs	r3, r0
 8001bf0:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001bf2:	e01a      	b.n	8001c2a <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001bf4:	f7ff f9a0 	bl	8000f38 <HAL_GetTick>
 8001bf8:	0002      	movs	r2, r0
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d913      	bls.n	8001c2a <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	2204      	movs	r2, #4
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	d00d      	beq.n	8001c2a <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c12:	2210      	movs	r2, #16
 8001c14:	431a      	orrs	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c1e:	2201      	movs	r2, #1
 8001c20:	431a      	orrs	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e006      	b.n	8001c38 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	2204      	movs	r2, #4
 8001c32:	4013      	ands	r3, r2
 8001c34:	d1de      	bne.n	8001bf4 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	0018      	movs	r0, r3
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	b004      	add	sp, #16
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	0018      	movs	r0, r3
 8001c52:	f7ff fab1 	bl	80011b8 <LL_ADC_IsEnabled>
 8001c56:	1e03      	subs	r3, r0, #0
 8001c58:	d000      	beq.n	8001c5c <ADC_Enable+0x1c>
 8001c5a:	e069      	b.n	8001d30 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	4a36      	ldr	r2, [pc, #216]	@ (8001d3c <ADC_Enable+0xfc>)
 8001c64:	4013      	ands	r3, r2
 8001c66:	d00d      	beq.n	8001c84 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c6c:	2210      	movs	r2, #16
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c78:	2201      	movs	r2, #1
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e056      	b.n	8001d32 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	0018      	movs	r0, r3
 8001c8a:	f7ff fa71 	bl	8001170 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8001c8e:	4b2c      	ldr	r3, [pc, #176]	@ (8001d40 <ADC_Enable+0x100>)
 8001c90:	0018      	movs	r0, r3
 8001c92:	f7ff f993 	bl	8000fbc <LL_ADC_GetCommonPathInternalCh>
 8001c96:	0002      	movs	r2, r0
 8001c98:	2380      	movs	r3, #128	@ 0x80
 8001c9a:	041b      	lsls	r3, r3, #16
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	d00f      	beq.n	8001cc0 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ca0:	4b28      	ldr	r3, [pc, #160]	@ (8001d44 <ADC_Enable+0x104>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4928      	ldr	r1, [pc, #160]	@ (8001d48 <ADC_Enable+0x108>)
 8001ca6:	0018      	movs	r0, r3
 8001ca8:	f7fe fa2a 	bl	8000100 <__udivsi3>
 8001cac:	0003      	movs	r3, r0
 8001cae:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8001cb0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001cb2:	e002      	b.n	8001cba <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d1f9      	bne.n	8001cb4 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	7e5b      	ldrb	r3, [r3, #25]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d033      	beq.n	8001d30 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001cc8:	f7ff f936 	bl	8000f38 <HAL_GetTick>
 8001ccc:	0003      	movs	r3, r0
 8001cce:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001cd0:	e027      	b.n	8001d22 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	f7ff fa6e 	bl	80011b8 <LL_ADC_IsEnabled>
 8001cdc:	1e03      	subs	r3, r0, #0
 8001cde:	d104      	bne.n	8001cea <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	f7ff fa43 	bl	8001170 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001cea:	f7ff f925 	bl	8000f38 <HAL_GetTick>
 8001cee:	0002      	movs	r2, r0
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d914      	bls.n	8001d22 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	4013      	ands	r3, r2
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d00d      	beq.n	8001d22 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d0a:	2210      	movs	r2, #16
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d16:	2201      	movs	r2, #1
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e007      	b.n	8001d32 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d1d0      	bne.n	8001cd2 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	0018      	movs	r0, r3
 8001d34:	46bd      	mov	sp, r7
 8001d36:	b004      	add	sp, #16
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	46c0      	nop			@ (mov r8, r8)
 8001d3c:	80000017 	.word	0x80000017
 8001d40:	40012708 	.word	0x40012708
 8001d44:	20000000 	.word	0x20000000
 8001d48:	00030d40 	.word	0x00030d40

08001d4c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	0018      	movs	r0, r3
 8001d5a:	f7ff fa3e 	bl	80011da <LL_ADC_IsDisableOngoing>
 8001d5e:	0003      	movs	r3, r0
 8001d60:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	0018      	movs	r0, r3
 8001d68:	f7ff fa26 	bl	80011b8 <LL_ADC_IsEnabled>
 8001d6c:	1e03      	subs	r3, r0, #0
 8001d6e:	d046      	beq.n	8001dfe <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d143      	bne.n	8001dfe <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	2205      	movs	r2, #5
 8001d7e:	4013      	ands	r3, r2
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d10d      	bne.n	8001da0 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	0018      	movs	r0, r3
 8001d8a:	f7ff fa03 	bl	8001194 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2203      	movs	r2, #3
 8001d94:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d96:	f7ff f8cf 	bl	8000f38 <HAL_GetTick>
 8001d9a:	0003      	movs	r3, r0
 8001d9c:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001d9e:	e028      	b.n	8001df2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da4:	2210      	movs	r2, #16
 8001da6:	431a      	orrs	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001db0:	2201      	movs	r2, #1
 8001db2:	431a      	orrs	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e021      	b.n	8001e00 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001dbc:	f7ff f8bc 	bl	8000f38 <HAL_GetTick>
 8001dc0:	0002      	movs	r2, r0
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d913      	bls.n	8001df2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	d00d      	beq.n	8001df2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dda:	2210      	movs	r2, #16
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001de6:	2201      	movs	r2, #1
 8001de8:	431a      	orrs	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e006      	b.n	8001e00 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	d1de      	bne.n	8001dbc <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	0018      	movs	r0, r3
 8001e02:	46bd      	mov	sp, r7
 8001e04:	b004      	add	sp, #16
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	0002      	movs	r2, r0
 8001e10:	1dfb      	adds	r3, r7, #7
 8001e12:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001e14:	1dfb      	adds	r3, r7, #7
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e1a:	d809      	bhi.n	8001e30 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e1c:	1dfb      	adds	r3, r7, #7
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	001a      	movs	r2, r3
 8001e22:	231f      	movs	r3, #31
 8001e24:	401a      	ands	r2, r3
 8001e26:	4b04      	ldr	r3, [pc, #16]	@ (8001e38 <__NVIC_EnableIRQ+0x30>)
 8001e28:	2101      	movs	r1, #1
 8001e2a:	4091      	lsls	r1, r2
 8001e2c:	000a      	movs	r2, r1
 8001e2e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001e30:	46c0      	nop			@ (mov r8, r8)
 8001e32:	46bd      	mov	sp, r7
 8001e34:	b002      	add	sp, #8
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	e000e100 	.word	0xe000e100

08001e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e3c:	b590      	push	{r4, r7, lr}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	0002      	movs	r2, r0
 8001e44:	6039      	str	r1, [r7, #0]
 8001e46:	1dfb      	adds	r3, r7, #7
 8001e48:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001e4a:	1dfb      	adds	r3, r7, #7
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e50:	d828      	bhi.n	8001ea4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e52:	4a2f      	ldr	r2, [pc, #188]	@ (8001f10 <__NVIC_SetPriority+0xd4>)
 8001e54:	1dfb      	adds	r3, r7, #7
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	b25b      	sxtb	r3, r3
 8001e5a:	089b      	lsrs	r3, r3, #2
 8001e5c:	33c0      	adds	r3, #192	@ 0xc0
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	589b      	ldr	r3, [r3, r2]
 8001e62:	1dfa      	adds	r2, r7, #7
 8001e64:	7812      	ldrb	r2, [r2, #0]
 8001e66:	0011      	movs	r1, r2
 8001e68:	2203      	movs	r2, #3
 8001e6a:	400a      	ands	r2, r1
 8001e6c:	00d2      	lsls	r2, r2, #3
 8001e6e:	21ff      	movs	r1, #255	@ 0xff
 8001e70:	4091      	lsls	r1, r2
 8001e72:	000a      	movs	r2, r1
 8001e74:	43d2      	mvns	r2, r2
 8001e76:	401a      	ands	r2, r3
 8001e78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	019b      	lsls	r3, r3, #6
 8001e7e:	22ff      	movs	r2, #255	@ 0xff
 8001e80:	401a      	ands	r2, r3
 8001e82:	1dfb      	adds	r3, r7, #7
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	0018      	movs	r0, r3
 8001e88:	2303      	movs	r3, #3
 8001e8a:	4003      	ands	r3, r0
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e90:	481f      	ldr	r0, [pc, #124]	@ (8001f10 <__NVIC_SetPriority+0xd4>)
 8001e92:	1dfb      	adds	r3, r7, #7
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	b25b      	sxtb	r3, r3
 8001e98:	089b      	lsrs	r3, r3, #2
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	33c0      	adds	r3, #192	@ 0xc0
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001ea2:	e031      	b.n	8001f08 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ea4:	4a1b      	ldr	r2, [pc, #108]	@ (8001f14 <__NVIC_SetPriority+0xd8>)
 8001ea6:	1dfb      	adds	r3, r7, #7
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	0019      	movs	r1, r3
 8001eac:	230f      	movs	r3, #15
 8001eae:	400b      	ands	r3, r1
 8001eb0:	3b08      	subs	r3, #8
 8001eb2:	089b      	lsrs	r3, r3, #2
 8001eb4:	3306      	adds	r3, #6
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	18d3      	adds	r3, r2, r3
 8001eba:	3304      	adds	r3, #4
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	1dfa      	adds	r2, r7, #7
 8001ec0:	7812      	ldrb	r2, [r2, #0]
 8001ec2:	0011      	movs	r1, r2
 8001ec4:	2203      	movs	r2, #3
 8001ec6:	400a      	ands	r2, r1
 8001ec8:	00d2      	lsls	r2, r2, #3
 8001eca:	21ff      	movs	r1, #255	@ 0xff
 8001ecc:	4091      	lsls	r1, r2
 8001ece:	000a      	movs	r2, r1
 8001ed0:	43d2      	mvns	r2, r2
 8001ed2:	401a      	ands	r2, r3
 8001ed4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	019b      	lsls	r3, r3, #6
 8001eda:	22ff      	movs	r2, #255	@ 0xff
 8001edc:	401a      	ands	r2, r3
 8001ede:	1dfb      	adds	r3, r7, #7
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	4003      	ands	r3, r0
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001eec:	4809      	ldr	r0, [pc, #36]	@ (8001f14 <__NVIC_SetPriority+0xd8>)
 8001eee:	1dfb      	adds	r3, r7, #7
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	001c      	movs	r4, r3
 8001ef4:	230f      	movs	r3, #15
 8001ef6:	4023      	ands	r3, r4
 8001ef8:	3b08      	subs	r3, #8
 8001efa:	089b      	lsrs	r3, r3, #2
 8001efc:	430a      	orrs	r2, r1
 8001efe:	3306      	adds	r3, #6
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	18c3      	adds	r3, r0, r3
 8001f04:	3304      	adds	r3, #4
 8001f06:	601a      	str	r2, [r3, #0]
}
 8001f08:	46c0      	nop			@ (mov r8, r8)
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	b003      	add	sp, #12
 8001f0e:	bd90      	pop	{r4, r7, pc}
 8001f10:	e000e100 	.word	0xe000e100
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	1e5a      	subs	r2, r3, #1
 8001f24:	2380      	movs	r3, #128	@ 0x80
 8001f26:	045b      	lsls	r3, r3, #17
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d301      	bcc.n	8001f30 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e010      	b.n	8001f52 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f30:	4b0a      	ldr	r3, [pc, #40]	@ (8001f5c <SysTick_Config+0x44>)
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	3a01      	subs	r2, #1
 8001f36:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f38:	2301      	movs	r3, #1
 8001f3a:	425b      	negs	r3, r3
 8001f3c:	2103      	movs	r1, #3
 8001f3e:	0018      	movs	r0, r3
 8001f40:	f7ff ff7c 	bl	8001e3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f44:	4b05      	ldr	r3, [pc, #20]	@ (8001f5c <SysTick_Config+0x44>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f4a:	4b04      	ldr	r3, [pc, #16]	@ (8001f5c <SysTick_Config+0x44>)
 8001f4c:	2207      	movs	r2, #7
 8001f4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	0018      	movs	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	b002      	add	sp, #8
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	46c0      	nop			@ (mov r8, r8)
 8001f5c:	e000e010 	.word	0xe000e010

08001f60 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60b9      	str	r1, [r7, #8]
 8001f68:	607a      	str	r2, [r7, #4]
 8001f6a:	210f      	movs	r1, #15
 8001f6c:	187b      	adds	r3, r7, r1
 8001f6e:	1c02      	adds	r2, r0, #0
 8001f70:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001f72:	68ba      	ldr	r2, [r7, #8]
 8001f74:	187b      	adds	r3, r7, r1
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	b25b      	sxtb	r3, r3
 8001f7a:	0011      	movs	r1, r2
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	f7ff ff5d 	bl	8001e3c <__NVIC_SetPriority>
}
 8001f82:	46c0      	nop			@ (mov r8, r8)
 8001f84:	46bd      	mov	sp, r7
 8001f86:	b004      	add	sp, #16
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b082      	sub	sp, #8
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	0002      	movs	r2, r0
 8001f92:	1dfb      	adds	r3, r7, #7
 8001f94:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f96:	1dfb      	adds	r3, r7, #7
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	b25b      	sxtb	r3, r3
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	f7ff ff33 	bl	8001e08 <__NVIC_EnableIRQ>
}
 8001fa2:	46c0      	nop			@ (mov r8, r8)
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	b002      	add	sp, #8
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b082      	sub	sp, #8
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	0018      	movs	r0, r3
 8001fb6:	f7ff ffaf 	bl	8001f18 <SysTick_Config>
 8001fba:	0003      	movs	r3, r0
}
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	b002      	add	sp, #8
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fd2:	e147      	b.n	8002264 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2101      	movs	r1, #1
 8001fda:	697a      	ldr	r2, [r7, #20]
 8001fdc:	4091      	lsls	r1, r2
 8001fde:	000a      	movs	r2, r1
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d100      	bne.n	8001fec <HAL_GPIO_Init+0x28>
 8001fea:	e138      	b.n	800225e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	2203      	movs	r2, #3
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d005      	beq.n	8002004 <HAL_GPIO_Init+0x40>
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2203      	movs	r2, #3
 8001ffe:	4013      	ands	r3, r2
 8002000:	2b02      	cmp	r3, #2
 8002002:	d130      	bne.n	8002066 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	2203      	movs	r2, #3
 8002010:	409a      	lsls	r2, r3
 8002012:	0013      	movs	r3, r2
 8002014:	43da      	mvns	r2, r3
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	4013      	ands	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	68da      	ldr	r2, [r3, #12]
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	409a      	lsls	r2, r3
 8002026:	0013      	movs	r3, r2
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	4313      	orrs	r3, r2
 800202c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800203a:	2201      	movs	r2, #1
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	409a      	lsls	r2, r3
 8002040:	0013      	movs	r3, r2
 8002042:	43da      	mvns	r2, r3
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	4013      	ands	r3, r2
 8002048:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	091b      	lsrs	r3, r3, #4
 8002050:	2201      	movs	r2, #1
 8002052:	401a      	ands	r2, r3
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	409a      	lsls	r2, r3
 8002058:	0013      	movs	r3, r2
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	4313      	orrs	r3, r2
 800205e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2203      	movs	r2, #3
 800206c:	4013      	ands	r3, r2
 800206e:	2b03      	cmp	r3, #3
 8002070:	d017      	beq.n	80020a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	2203      	movs	r2, #3
 800207e:	409a      	lsls	r2, r3
 8002080:	0013      	movs	r3, r2
 8002082:	43da      	mvns	r2, r3
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	4013      	ands	r3, r2
 8002088:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	689a      	ldr	r2, [r3, #8]
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	409a      	lsls	r2, r3
 8002094:	0013      	movs	r3, r2
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	4313      	orrs	r3, r2
 800209a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2203      	movs	r2, #3
 80020a8:	4013      	ands	r3, r2
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d123      	bne.n	80020f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	08da      	lsrs	r2, r3, #3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	3208      	adds	r2, #8
 80020b6:	0092      	lsls	r2, r2, #2
 80020b8:	58d3      	ldr	r3, [r2, r3]
 80020ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	2207      	movs	r2, #7
 80020c0:	4013      	ands	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	220f      	movs	r2, #15
 80020c6:	409a      	lsls	r2, r3
 80020c8:	0013      	movs	r3, r2
 80020ca:	43da      	mvns	r2, r3
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	4013      	ands	r3, r2
 80020d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	691a      	ldr	r2, [r3, #16]
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	2107      	movs	r1, #7
 80020da:	400b      	ands	r3, r1
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	409a      	lsls	r2, r3
 80020e0:	0013      	movs	r3, r2
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	08da      	lsrs	r2, r3, #3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3208      	adds	r2, #8
 80020f0:	0092      	lsls	r2, r2, #2
 80020f2:	6939      	ldr	r1, [r7, #16]
 80020f4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	2203      	movs	r2, #3
 8002102:	409a      	lsls	r2, r3
 8002104:	0013      	movs	r3, r2
 8002106:	43da      	mvns	r2, r3
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	4013      	ands	r3, r2
 800210c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2203      	movs	r2, #3
 8002114:	401a      	ands	r2, r3
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	409a      	lsls	r2, r3
 800211c:	0013      	movs	r3, r2
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	4313      	orrs	r3, r2
 8002122:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685a      	ldr	r2, [r3, #4]
 800212e:	23c0      	movs	r3, #192	@ 0xc0
 8002130:	029b      	lsls	r3, r3, #10
 8002132:	4013      	ands	r3, r2
 8002134:	d100      	bne.n	8002138 <HAL_GPIO_Init+0x174>
 8002136:	e092      	b.n	800225e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002138:	4a50      	ldr	r2, [pc, #320]	@ (800227c <HAL_GPIO_Init+0x2b8>)
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	089b      	lsrs	r3, r3, #2
 800213e:	3318      	adds	r3, #24
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	589b      	ldr	r3, [r3, r2]
 8002144:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	2203      	movs	r2, #3
 800214a:	4013      	ands	r3, r2
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	220f      	movs	r2, #15
 8002150:	409a      	lsls	r2, r3
 8002152:	0013      	movs	r3, r2
 8002154:	43da      	mvns	r2, r3
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	4013      	ands	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	23a0      	movs	r3, #160	@ 0xa0
 8002160:	05db      	lsls	r3, r3, #23
 8002162:	429a      	cmp	r2, r3
 8002164:	d013      	beq.n	800218e <HAL_GPIO_Init+0x1ca>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a45      	ldr	r2, [pc, #276]	@ (8002280 <HAL_GPIO_Init+0x2bc>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d00d      	beq.n	800218a <HAL_GPIO_Init+0x1c6>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a44      	ldr	r2, [pc, #272]	@ (8002284 <HAL_GPIO_Init+0x2c0>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d007      	beq.n	8002186 <HAL_GPIO_Init+0x1c2>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a43      	ldr	r2, [pc, #268]	@ (8002288 <HAL_GPIO_Init+0x2c4>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d101      	bne.n	8002182 <HAL_GPIO_Init+0x1be>
 800217e:	2303      	movs	r3, #3
 8002180:	e006      	b.n	8002190 <HAL_GPIO_Init+0x1cc>
 8002182:	2305      	movs	r3, #5
 8002184:	e004      	b.n	8002190 <HAL_GPIO_Init+0x1cc>
 8002186:	2302      	movs	r3, #2
 8002188:	e002      	b.n	8002190 <HAL_GPIO_Init+0x1cc>
 800218a:	2301      	movs	r3, #1
 800218c:	e000      	b.n	8002190 <HAL_GPIO_Init+0x1cc>
 800218e:	2300      	movs	r3, #0
 8002190:	697a      	ldr	r2, [r7, #20]
 8002192:	2103      	movs	r1, #3
 8002194:	400a      	ands	r2, r1
 8002196:	00d2      	lsls	r2, r2, #3
 8002198:	4093      	lsls	r3, r2
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	4313      	orrs	r3, r2
 800219e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80021a0:	4936      	ldr	r1, [pc, #216]	@ (800227c <HAL_GPIO_Init+0x2b8>)
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	089b      	lsrs	r3, r3, #2
 80021a6:	3318      	adds	r3, #24
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021ae:	4b33      	ldr	r3, [pc, #204]	@ (800227c <HAL_GPIO_Init+0x2b8>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	43da      	mvns	r2, r3
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	4013      	ands	r3, r2
 80021bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	2380      	movs	r3, #128	@ 0x80
 80021c4:	035b      	lsls	r3, r3, #13
 80021c6:	4013      	ands	r3, r2
 80021c8:	d003      	beq.n	80021d2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021d2:	4b2a      	ldr	r3, [pc, #168]	@ (800227c <HAL_GPIO_Init+0x2b8>)
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80021d8:	4b28      	ldr	r3, [pc, #160]	@ (800227c <HAL_GPIO_Init+0x2b8>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	43da      	mvns	r2, r3
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	4013      	ands	r3, r2
 80021e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	2380      	movs	r3, #128	@ 0x80
 80021ee:	039b      	lsls	r3, r3, #14
 80021f0:	4013      	ands	r3, r2
 80021f2:	d003      	beq.n	80021fc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021fc:	4b1f      	ldr	r3, [pc, #124]	@ (800227c <HAL_GPIO_Init+0x2b8>)
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002202:	4a1e      	ldr	r2, [pc, #120]	@ (800227c <HAL_GPIO_Init+0x2b8>)
 8002204:	2384      	movs	r3, #132	@ 0x84
 8002206:	58d3      	ldr	r3, [r2, r3]
 8002208:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	43da      	mvns	r2, r3
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	4013      	ands	r3, r2
 8002212:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	2380      	movs	r3, #128	@ 0x80
 800221a:	029b      	lsls	r3, r3, #10
 800221c:	4013      	ands	r3, r2
 800221e:	d003      	beq.n	8002228 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	4313      	orrs	r3, r2
 8002226:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002228:	4914      	ldr	r1, [pc, #80]	@ (800227c <HAL_GPIO_Init+0x2b8>)
 800222a:	2284      	movs	r2, #132	@ 0x84
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002230:	4a12      	ldr	r2, [pc, #72]	@ (800227c <HAL_GPIO_Init+0x2b8>)
 8002232:	2380      	movs	r3, #128	@ 0x80
 8002234:	58d3      	ldr	r3, [r2, r3]
 8002236:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	43da      	mvns	r2, r3
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	4013      	ands	r3, r2
 8002240:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	2380      	movs	r3, #128	@ 0x80
 8002248:	025b      	lsls	r3, r3, #9
 800224a:	4013      	ands	r3, r2
 800224c:	d003      	beq.n	8002256 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	4313      	orrs	r3, r2
 8002254:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002256:	4909      	ldr	r1, [pc, #36]	@ (800227c <HAL_GPIO_Init+0x2b8>)
 8002258:	2280      	movs	r2, #128	@ 0x80
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	3301      	adds	r3, #1
 8002262:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	40da      	lsrs	r2, r3
 800226c:	1e13      	subs	r3, r2, #0
 800226e:	d000      	beq.n	8002272 <HAL_GPIO_Init+0x2ae>
 8002270:	e6b0      	b.n	8001fd4 <HAL_GPIO_Init+0x10>
  }
}
 8002272:	46c0      	nop			@ (mov r8, r8)
 8002274:	46c0      	nop			@ (mov r8, r8)
 8002276:	46bd      	mov	sp, r7
 8002278:	b006      	add	sp, #24
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40021800 	.word	0x40021800
 8002280:	50000400 	.word	0x50000400
 8002284:	50000800 	.word	0x50000800
 8002288:	50000c00 	.word	0x50000c00

0800228c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	0008      	movs	r0, r1
 8002296:	0011      	movs	r1, r2
 8002298:	1cbb      	adds	r3, r7, #2
 800229a:	1c02      	adds	r2, r0, #0
 800229c:	801a      	strh	r2, [r3, #0]
 800229e:	1c7b      	adds	r3, r7, #1
 80022a0:	1c0a      	adds	r2, r1, #0
 80022a2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022a4:	1c7b      	adds	r3, r7, #1
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d004      	beq.n	80022b6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022ac:	1cbb      	adds	r3, r7, #2
 80022ae:	881a      	ldrh	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022b4:	e003      	b.n	80022be <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022b6:	1cbb      	adds	r3, r7, #2
 80022b8:	881a      	ldrh	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80022be:	46c0      	nop			@ (mov r8, r8)
 80022c0:	46bd      	mov	sp, r7
 80022c2:	b002      	add	sp, #8
 80022c4:	bd80      	pop	{r7, pc}
	...

080022c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80022d0:	4b19      	ldr	r3, [pc, #100]	@ (8002338 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a19      	ldr	r2, [pc, #100]	@ (800233c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80022d6:	4013      	ands	r3, r2
 80022d8:	0019      	movs	r1, r3
 80022da:	4b17      	ldr	r3, [pc, #92]	@ (8002338 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	430a      	orrs	r2, r1
 80022e0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	2380      	movs	r3, #128	@ 0x80
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d11f      	bne.n	800232c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80022ec:	4b14      	ldr	r3, [pc, #80]	@ (8002340 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	0013      	movs	r3, r2
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	189b      	adds	r3, r3, r2
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	4912      	ldr	r1, [pc, #72]	@ (8002344 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80022fa:	0018      	movs	r0, r3
 80022fc:	f7fd ff00 	bl	8000100 <__udivsi3>
 8002300:	0003      	movs	r3, r0
 8002302:	3301      	adds	r3, #1
 8002304:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002306:	e008      	b.n	800231a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	3b01      	subs	r3, #1
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	e001      	b.n	800231a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e009      	b.n	800232e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800231a:	4b07      	ldr	r3, [pc, #28]	@ (8002338 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800231c:	695a      	ldr	r2, [r3, #20]
 800231e:	2380      	movs	r3, #128	@ 0x80
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	401a      	ands	r2, r3
 8002324:	2380      	movs	r3, #128	@ 0x80
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	429a      	cmp	r2, r3
 800232a:	d0ed      	beq.n	8002308 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	0018      	movs	r0, r3
 8002330:	46bd      	mov	sp, r7
 8002332:	b004      	add	sp, #16
 8002334:	bd80      	pop	{r7, pc}
 8002336:	46c0      	nop			@ (mov r8, r8)
 8002338:	40007000 	.word	0x40007000
 800233c:	fffff9ff 	.word	0xfffff9ff
 8002340:	20000000 	.word	0x20000000
 8002344:	000f4240 	.word	0x000f4240

08002348 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b088      	sub	sp, #32
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e2f3      	b.n	8002942 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2201      	movs	r2, #1
 8002360:	4013      	ands	r3, r2
 8002362:	d100      	bne.n	8002366 <HAL_RCC_OscConfig+0x1e>
 8002364:	e07c      	b.n	8002460 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002366:	4bc3      	ldr	r3, [pc, #780]	@ (8002674 <HAL_RCC_OscConfig+0x32c>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	2238      	movs	r2, #56	@ 0x38
 800236c:	4013      	ands	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002370:	4bc0      	ldr	r3, [pc, #768]	@ (8002674 <HAL_RCC_OscConfig+0x32c>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	2203      	movs	r2, #3
 8002376:	4013      	ands	r3, r2
 8002378:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	2b10      	cmp	r3, #16
 800237e:	d102      	bne.n	8002386 <HAL_RCC_OscConfig+0x3e>
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	2b03      	cmp	r3, #3
 8002384:	d002      	beq.n	800238c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	2b08      	cmp	r3, #8
 800238a:	d10b      	bne.n	80023a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800238c:	4bb9      	ldr	r3, [pc, #740]	@ (8002674 <HAL_RCC_OscConfig+0x32c>)
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	2380      	movs	r3, #128	@ 0x80
 8002392:	029b      	lsls	r3, r3, #10
 8002394:	4013      	ands	r3, r2
 8002396:	d062      	beq.n	800245e <HAL_RCC_OscConfig+0x116>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d15e      	bne.n	800245e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e2ce      	b.n	8002942 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	2380      	movs	r3, #128	@ 0x80
 80023aa:	025b      	lsls	r3, r3, #9
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d107      	bne.n	80023c0 <HAL_RCC_OscConfig+0x78>
 80023b0:	4bb0      	ldr	r3, [pc, #704]	@ (8002674 <HAL_RCC_OscConfig+0x32c>)
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	4baf      	ldr	r3, [pc, #700]	@ (8002674 <HAL_RCC_OscConfig+0x32c>)
 80023b6:	2180      	movs	r1, #128	@ 0x80
 80023b8:	0249      	lsls	r1, r1, #9
 80023ba:	430a      	orrs	r2, r1
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	e020      	b.n	8002402 <HAL_RCC_OscConfig+0xba>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	23a0      	movs	r3, #160	@ 0xa0
 80023c6:	02db      	lsls	r3, r3, #11
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d10e      	bne.n	80023ea <HAL_RCC_OscConfig+0xa2>
 80023cc:	4ba9      	ldr	r3, [pc, #676]	@ (8002674 <HAL_RCC_OscConfig+0x32c>)
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	4ba8      	ldr	r3, [pc, #672]	@ (8002674 <HAL_RCC_OscConfig+0x32c>)
 80023d2:	2180      	movs	r1, #128	@ 0x80
 80023d4:	02c9      	lsls	r1, r1, #11
 80023d6:	430a      	orrs	r2, r1
 80023d8:	601a      	str	r2, [r3, #0]
 80023da:	4ba6      	ldr	r3, [pc, #664]	@ (8002674 <HAL_RCC_OscConfig+0x32c>)
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	4ba5      	ldr	r3, [pc, #660]	@ (8002674 <HAL_RCC_OscConfig+0x32c>)
 80023e0:	2180      	movs	r1, #128	@ 0x80
 80023e2:	0249      	lsls	r1, r1, #9
 80023e4:	430a      	orrs	r2, r1
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	e00b      	b.n	8002402 <HAL_RCC_OscConfig+0xba>
 80023ea:	4ba2      	ldr	r3, [pc, #648]	@ (8002674 <HAL_RCC_OscConfig+0x32c>)
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	4ba1      	ldr	r3, [pc, #644]	@ (8002674 <HAL_RCC_OscConfig+0x32c>)
 80023f0:	49a1      	ldr	r1, [pc, #644]	@ (8002678 <HAL_RCC_OscConfig+0x330>)
 80023f2:	400a      	ands	r2, r1
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	4b9f      	ldr	r3, [pc, #636]	@ (8002674 <HAL_RCC_OscConfig+0x32c>)
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	4b9e      	ldr	r3, [pc, #632]	@ (8002674 <HAL_RCC_OscConfig+0x32c>)
 80023fc:	499f      	ldr	r1, [pc, #636]	@ (800267c <HAL_RCC_OscConfig+0x334>)
 80023fe:	400a      	ands	r2, r1
 8002400:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d014      	beq.n	8002434 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800240a:	f7fe fd95 	bl	8000f38 <HAL_GetTick>
 800240e:	0003      	movs	r3, r0
 8002410:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002414:	f7fe fd90 	bl	8000f38 <HAL_GetTick>
 8002418:	0002      	movs	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b64      	cmp	r3, #100	@ 0x64
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e28d      	b.n	8002942 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002426:	4b93      	ldr	r3, [pc, #588]	@ (8002674 <HAL_RCC_OscConfig+0x32c>)
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	2380      	movs	r3, #128	@ 0x80
 800242c:	029b      	lsls	r3, r3, #10
 800242e:	4013      	ands	r3, r2
 8002430:	d0f0      	beq.n	8002414 <HAL_RCC_OscConfig+0xcc>
 8002432:	e015      	b.n	8002460 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002434:	f7fe fd80 	bl	8000f38 <HAL_GetTick>
 8002438:	0003      	movs	r3, r0
 800243a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800243c:	e008      	b.n	8002450 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800243e:	f7fe fd7b 	bl	8000f38 <HAL_GetTick>
 8002442:	0002      	movs	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b64      	cmp	r3, #100	@ 0x64
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e278      	b.n	8002942 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002450:	4b88      	ldr	r3, [pc, #544]	@ (8002674 <HAL_RCC_OscConfig+0x32c>)
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	2380      	movs	r3, #128	@ 0x80
 8002456:	029b      	lsls	r3, r3, #10
 8002458:	4013      	ands	r3, r2
 800245a:	d1f0      	bne.n	800243e <HAL_RCC_OscConfig+0xf6>
 800245c:	e000      	b.n	8002460 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800245e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2202      	movs	r2, #2
 8002466:	4013      	ands	r3, r2
 8002468:	d100      	bne.n	800246c <HAL_RCC_OscConfig+0x124>
 800246a:	e099      	b.n	80025a0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800246c:	4b81      	ldr	r3, [pc, #516]	@ (8002674 <HAL_RCC_OscConfig+0x32c>)
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	2238      	movs	r2, #56	@ 0x38
 8002472:	4013      	ands	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002476:	4b7f      	ldr	r3, [pc, #508]	@ (8002674 <HAL_RCC_OscConfig+0x32c>)
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	2203      	movs	r2, #3
 800247c:	4013      	ands	r3, r2
 800247e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	2b10      	cmp	r3, #16
 8002484:	d102      	bne.n	800248c <HAL_RCC_OscConfig+0x144>
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	2b02      	cmp	r3, #2
 800248a:	d002      	beq.n	8002492 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d135      	bne.n	80024fe <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002492:	4b78      	ldr	r3, [pc, #480]	@ (8002674 <HAL_RCC_OscConfig+0x32c>)
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	2380      	movs	r3, #128	@ 0x80
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	4013      	ands	r3, r2
 800249c:	d005      	beq.n	80024aa <HAL_RCC_OscConfig+0x162>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e24b      	b.n	8002942 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024aa:	4b72      	ldr	r3, [pc, #456]	@ (8002674 <HAL_RCC_OscConfig+0x32c>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	4a74      	ldr	r2, [pc, #464]	@ (8002680 <HAL_RCC_OscConfig+0x338>)
 80024b0:	4013      	ands	r3, r2
 80024b2:	0019      	movs	r1, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	695b      	ldr	r3, [r3, #20]
 80024b8:	021a      	lsls	r2, r3, #8
 80024ba:	4b6e      	ldr	r3, [pc, #440]	@ (8002674 <HAL_RCC_OscConfig+0x32c>)
 80024bc:	430a      	orrs	r2, r1
 80024be:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d112      	bne.n	80024ec <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80024c6:	4b6b      	ldr	r3, [pc, #428]	@ (8002674 <HAL_RCC_OscConfig+0x32c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a6e      	ldr	r2, [pc, #440]	@ (8002684 <HAL_RCC_OscConfig+0x33c>)
 80024cc:	4013      	ands	r3, r2
 80024ce:	0019      	movs	r1, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	691a      	ldr	r2, [r3, #16]
 80024d4:	4b67      	ldr	r3, [pc, #412]	@ (8002674 <HAL_RCC_OscConfig+0x32c>)
 80024d6:	430a      	orrs	r2, r1
 80024d8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80024da:	4b66      	ldr	r3, [pc, #408]	@ (8002674 <HAL_RCC_OscConfig+0x32c>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	0adb      	lsrs	r3, r3, #11
 80024e0:	2207      	movs	r2, #7
 80024e2:	4013      	ands	r3, r2
 80024e4:	4a68      	ldr	r2, [pc, #416]	@ (8002688 <HAL_RCC_OscConfig+0x340>)
 80024e6:	40da      	lsrs	r2, r3
 80024e8:	4b68      	ldr	r3, [pc, #416]	@ (800268c <HAL_RCC_OscConfig+0x344>)
 80024ea:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80024ec:	4b68      	ldr	r3, [pc, #416]	@ (8002690 <HAL_RCC_OscConfig+0x348>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	0018      	movs	r0, r3
 80024f2:	f7fe fcc5 	bl	8000e80 <HAL_InitTick>
 80024f6:	1e03      	subs	r3, r0, #0
 80024f8:	d051      	beq.n	800259e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e221      	b.n	8002942 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d030      	beq.n	8002568 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002506:	4b5b      	ldr	r3, [pc, #364]	@ (8002674 <HAL_RCC_OscConfig+0x32c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a5e      	ldr	r2, [pc, #376]	@ (8002684 <HAL_RCC_OscConfig+0x33c>)
 800250c:	4013      	ands	r3, r2
 800250e:	0019      	movs	r1, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	691a      	ldr	r2, [r3, #16]
 8002514:	4b57      	ldr	r3, [pc, #348]	@ (8002674 <HAL_RCC_OscConfig+0x32c>)
 8002516:	430a      	orrs	r2, r1
 8002518:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800251a:	4b56      	ldr	r3, [pc, #344]	@ (8002674 <HAL_RCC_OscConfig+0x32c>)
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	4b55      	ldr	r3, [pc, #340]	@ (8002674 <HAL_RCC_OscConfig+0x32c>)
 8002520:	2180      	movs	r1, #128	@ 0x80
 8002522:	0049      	lsls	r1, r1, #1
 8002524:	430a      	orrs	r2, r1
 8002526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002528:	f7fe fd06 	bl	8000f38 <HAL_GetTick>
 800252c:	0003      	movs	r3, r0
 800252e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002530:	e008      	b.n	8002544 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002532:	f7fe fd01 	bl	8000f38 <HAL_GetTick>
 8002536:	0002      	movs	r2, r0
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d901      	bls.n	8002544 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e1fe      	b.n	8002942 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002544:	4b4b      	ldr	r3, [pc, #300]	@ (8002674 <HAL_RCC_OscConfig+0x32c>)
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	2380      	movs	r3, #128	@ 0x80
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	4013      	ands	r3, r2
 800254e:	d0f0      	beq.n	8002532 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002550:	4b48      	ldr	r3, [pc, #288]	@ (8002674 <HAL_RCC_OscConfig+0x32c>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	4a4a      	ldr	r2, [pc, #296]	@ (8002680 <HAL_RCC_OscConfig+0x338>)
 8002556:	4013      	ands	r3, r2
 8002558:	0019      	movs	r1, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	021a      	lsls	r2, r3, #8
 8002560:	4b44      	ldr	r3, [pc, #272]	@ (8002674 <HAL_RCC_OscConfig+0x32c>)
 8002562:	430a      	orrs	r2, r1
 8002564:	605a      	str	r2, [r3, #4]
 8002566:	e01b      	b.n	80025a0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002568:	4b42      	ldr	r3, [pc, #264]	@ (8002674 <HAL_RCC_OscConfig+0x32c>)
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	4b41      	ldr	r3, [pc, #260]	@ (8002674 <HAL_RCC_OscConfig+0x32c>)
 800256e:	4949      	ldr	r1, [pc, #292]	@ (8002694 <HAL_RCC_OscConfig+0x34c>)
 8002570:	400a      	ands	r2, r1
 8002572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002574:	f7fe fce0 	bl	8000f38 <HAL_GetTick>
 8002578:	0003      	movs	r3, r0
 800257a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800257c:	e008      	b.n	8002590 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800257e:	f7fe fcdb 	bl	8000f38 <HAL_GetTick>
 8002582:	0002      	movs	r2, r0
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e1d8      	b.n	8002942 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002590:	4b38      	ldr	r3, [pc, #224]	@ (8002674 <HAL_RCC_OscConfig+0x32c>)
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	2380      	movs	r3, #128	@ 0x80
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	4013      	ands	r3, r2
 800259a:	d1f0      	bne.n	800257e <HAL_RCC_OscConfig+0x236>
 800259c:	e000      	b.n	80025a0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800259e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2208      	movs	r2, #8
 80025a6:	4013      	ands	r3, r2
 80025a8:	d047      	beq.n	800263a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80025aa:	4b32      	ldr	r3, [pc, #200]	@ (8002674 <HAL_RCC_OscConfig+0x32c>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	2238      	movs	r2, #56	@ 0x38
 80025b0:	4013      	ands	r3, r2
 80025b2:	2b18      	cmp	r3, #24
 80025b4:	d10a      	bne.n	80025cc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80025b6:	4b2f      	ldr	r3, [pc, #188]	@ (8002674 <HAL_RCC_OscConfig+0x32c>)
 80025b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025ba:	2202      	movs	r2, #2
 80025bc:	4013      	ands	r3, r2
 80025be:	d03c      	beq.n	800263a <HAL_RCC_OscConfig+0x2f2>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d138      	bne.n	800263a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e1ba      	b.n	8002942 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d019      	beq.n	8002608 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80025d4:	4b27      	ldr	r3, [pc, #156]	@ (8002674 <HAL_RCC_OscConfig+0x32c>)
 80025d6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80025d8:	4b26      	ldr	r3, [pc, #152]	@ (8002674 <HAL_RCC_OscConfig+0x32c>)
 80025da:	2101      	movs	r1, #1
 80025dc:	430a      	orrs	r2, r1
 80025de:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e0:	f7fe fcaa 	bl	8000f38 <HAL_GetTick>
 80025e4:	0003      	movs	r3, r0
 80025e6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025e8:	e008      	b.n	80025fc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025ea:	f7fe fca5 	bl	8000f38 <HAL_GetTick>
 80025ee:	0002      	movs	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e1a2      	b.n	8002942 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002674 <HAL_RCC_OscConfig+0x32c>)
 80025fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002600:	2202      	movs	r2, #2
 8002602:	4013      	ands	r3, r2
 8002604:	d0f1      	beq.n	80025ea <HAL_RCC_OscConfig+0x2a2>
 8002606:	e018      	b.n	800263a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002608:	4b1a      	ldr	r3, [pc, #104]	@ (8002674 <HAL_RCC_OscConfig+0x32c>)
 800260a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800260c:	4b19      	ldr	r3, [pc, #100]	@ (8002674 <HAL_RCC_OscConfig+0x32c>)
 800260e:	2101      	movs	r1, #1
 8002610:	438a      	bics	r2, r1
 8002612:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002614:	f7fe fc90 	bl	8000f38 <HAL_GetTick>
 8002618:	0003      	movs	r3, r0
 800261a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800261e:	f7fe fc8b 	bl	8000f38 <HAL_GetTick>
 8002622:	0002      	movs	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e188      	b.n	8002942 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002630:	4b10      	ldr	r3, [pc, #64]	@ (8002674 <HAL_RCC_OscConfig+0x32c>)
 8002632:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002634:	2202      	movs	r2, #2
 8002636:	4013      	ands	r3, r2
 8002638:	d1f1      	bne.n	800261e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2204      	movs	r2, #4
 8002640:	4013      	ands	r3, r2
 8002642:	d100      	bne.n	8002646 <HAL_RCC_OscConfig+0x2fe>
 8002644:	e0c6      	b.n	80027d4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002646:	231f      	movs	r3, #31
 8002648:	18fb      	adds	r3, r7, r3
 800264a:	2200      	movs	r2, #0
 800264c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800264e:	4b09      	ldr	r3, [pc, #36]	@ (8002674 <HAL_RCC_OscConfig+0x32c>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	2238      	movs	r2, #56	@ 0x38
 8002654:	4013      	ands	r3, r2
 8002656:	2b20      	cmp	r3, #32
 8002658:	d11e      	bne.n	8002698 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800265a:	4b06      	ldr	r3, [pc, #24]	@ (8002674 <HAL_RCC_OscConfig+0x32c>)
 800265c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800265e:	2202      	movs	r2, #2
 8002660:	4013      	ands	r3, r2
 8002662:	d100      	bne.n	8002666 <HAL_RCC_OscConfig+0x31e>
 8002664:	e0b6      	b.n	80027d4 <HAL_RCC_OscConfig+0x48c>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d000      	beq.n	8002670 <HAL_RCC_OscConfig+0x328>
 800266e:	e0b1      	b.n	80027d4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e166      	b.n	8002942 <HAL_RCC_OscConfig+0x5fa>
 8002674:	40021000 	.word	0x40021000
 8002678:	fffeffff 	.word	0xfffeffff
 800267c:	fffbffff 	.word	0xfffbffff
 8002680:	ffff80ff 	.word	0xffff80ff
 8002684:	ffffc7ff 	.word	0xffffc7ff
 8002688:	00f42400 	.word	0x00f42400
 800268c:	20000000 	.word	0x20000000
 8002690:	20000004 	.word	0x20000004
 8002694:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002698:	4bac      	ldr	r3, [pc, #688]	@ (800294c <HAL_RCC_OscConfig+0x604>)
 800269a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800269c:	2380      	movs	r3, #128	@ 0x80
 800269e:	055b      	lsls	r3, r3, #21
 80026a0:	4013      	ands	r3, r2
 80026a2:	d101      	bne.n	80026a8 <HAL_RCC_OscConfig+0x360>
 80026a4:	2301      	movs	r3, #1
 80026a6:	e000      	b.n	80026aa <HAL_RCC_OscConfig+0x362>
 80026a8:	2300      	movs	r3, #0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d011      	beq.n	80026d2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80026ae:	4ba7      	ldr	r3, [pc, #668]	@ (800294c <HAL_RCC_OscConfig+0x604>)
 80026b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026b2:	4ba6      	ldr	r3, [pc, #664]	@ (800294c <HAL_RCC_OscConfig+0x604>)
 80026b4:	2180      	movs	r1, #128	@ 0x80
 80026b6:	0549      	lsls	r1, r1, #21
 80026b8:	430a      	orrs	r2, r1
 80026ba:	63da      	str	r2, [r3, #60]	@ 0x3c
 80026bc:	4ba3      	ldr	r3, [pc, #652]	@ (800294c <HAL_RCC_OscConfig+0x604>)
 80026be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026c0:	2380      	movs	r3, #128	@ 0x80
 80026c2:	055b      	lsls	r3, r3, #21
 80026c4:	4013      	ands	r3, r2
 80026c6:	60fb      	str	r3, [r7, #12]
 80026c8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80026ca:	231f      	movs	r3, #31
 80026cc:	18fb      	adds	r3, r7, r3
 80026ce:	2201      	movs	r2, #1
 80026d0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026d2:	4b9f      	ldr	r3, [pc, #636]	@ (8002950 <HAL_RCC_OscConfig+0x608>)
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	2380      	movs	r3, #128	@ 0x80
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	4013      	ands	r3, r2
 80026dc:	d11a      	bne.n	8002714 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026de:	4b9c      	ldr	r3, [pc, #624]	@ (8002950 <HAL_RCC_OscConfig+0x608>)
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	4b9b      	ldr	r3, [pc, #620]	@ (8002950 <HAL_RCC_OscConfig+0x608>)
 80026e4:	2180      	movs	r1, #128	@ 0x80
 80026e6:	0049      	lsls	r1, r1, #1
 80026e8:	430a      	orrs	r2, r1
 80026ea:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80026ec:	f7fe fc24 	bl	8000f38 <HAL_GetTick>
 80026f0:	0003      	movs	r3, r0
 80026f2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026f6:	f7fe fc1f 	bl	8000f38 <HAL_GetTick>
 80026fa:	0002      	movs	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e11c      	b.n	8002942 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002708:	4b91      	ldr	r3, [pc, #580]	@ (8002950 <HAL_RCC_OscConfig+0x608>)
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	2380      	movs	r3, #128	@ 0x80
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	4013      	ands	r3, r2
 8002712:	d0f0      	beq.n	80026f6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d106      	bne.n	800272a <HAL_RCC_OscConfig+0x3e2>
 800271c:	4b8b      	ldr	r3, [pc, #556]	@ (800294c <HAL_RCC_OscConfig+0x604>)
 800271e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002720:	4b8a      	ldr	r3, [pc, #552]	@ (800294c <HAL_RCC_OscConfig+0x604>)
 8002722:	2101      	movs	r1, #1
 8002724:	430a      	orrs	r2, r1
 8002726:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002728:	e01c      	b.n	8002764 <HAL_RCC_OscConfig+0x41c>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	2b05      	cmp	r3, #5
 8002730:	d10c      	bne.n	800274c <HAL_RCC_OscConfig+0x404>
 8002732:	4b86      	ldr	r3, [pc, #536]	@ (800294c <HAL_RCC_OscConfig+0x604>)
 8002734:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002736:	4b85      	ldr	r3, [pc, #532]	@ (800294c <HAL_RCC_OscConfig+0x604>)
 8002738:	2104      	movs	r1, #4
 800273a:	430a      	orrs	r2, r1
 800273c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800273e:	4b83      	ldr	r3, [pc, #524]	@ (800294c <HAL_RCC_OscConfig+0x604>)
 8002740:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002742:	4b82      	ldr	r3, [pc, #520]	@ (800294c <HAL_RCC_OscConfig+0x604>)
 8002744:	2101      	movs	r1, #1
 8002746:	430a      	orrs	r2, r1
 8002748:	65da      	str	r2, [r3, #92]	@ 0x5c
 800274a:	e00b      	b.n	8002764 <HAL_RCC_OscConfig+0x41c>
 800274c:	4b7f      	ldr	r3, [pc, #508]	@ (800294c <HAL_RCC_OscConfig+0x604>)
 800274e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002750:	4b7e      	ldr	r3, [pc, #504]	@ (800294c <HAL_RCC_OscConfig+0x604>)
 8002752:	2101      	movs	r1, #1
 8002754:	438a      	bics	r2, r1
 8002756:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002758:	4b7c      	ldr	r3, [pc, #496]	@ (800294c <HAL_RCC_OscConfig+0x604>)
 800275a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800275c:	4b7b      	ldr	r3, [pc, #492]	@ (800294c <HAL_RCC_OscConfig+0x604>)
 800275e:	2104      	movs	r1, #4
 8002760:	438a      	bics	r2, r1
 8002762:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d014      	beq.n	8002796 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276c:	f7fe fbe4 	bl	8000f38 <HAL_GetTick>
 8002770:	0003      	movs	r3, r0
 8002772:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002774:	e009      	b.n	800278a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002776:	f7fe fbdf 	bl	8000f38 <HAL_GetTick>
 800277a:	0002      	movs	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	4a74      	ldr	r2, [pc, #464]	@ (8002954 <HAL_RCC_OscConfig+0x60c>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e0db      	b.n	8002942 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800278a:	4b70      	ldr	r3, [pc, #448]	@ (800294c <HAL_RCC_OscConfig+0x604>)
 800278c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800278e:	2202      	movs	r2, #2
 8002790:	4013      	ands	r3, r2
 8002792:	d0f0      	beq.n	8002776 <HAL_RCC_OscConfig+0x42e>
 8002794:	e013      	b.n	80027be <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002796:	f7fe fbcf 	bl	8000f38 <HAL_GetTick>
 800279a:	0003      	movs	r3, r0
 800279c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800279e:	e009      	b.n	80027b4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027a0:	f7fe fbca 	bl	8000f38 <HAL_GetTick>
 80027a4:	0002      	movs	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	4a6a      	ldr	r2, [pc, #424]	@ (8002954 <HAL_RCC_OscConfig+0x60c>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e0c6      	b.n	8002942 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027b4:	4b65      	ldr	r3, [pc, #404]	@ (800294c <HAL_RCC_OscConfig+0x604>)
 80027b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027b8:	2202      	movs	r2, #2
 80027ba:	4013      	ands	r3, r2
 80027bc:	d1f0      	bne.n	80027a0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80027be:	231f      	movs	r3, #31
 80027c0:	18fb      	adds	r3, r7, r3
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d105      	bne.n	80027d4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80027c8:	4b60      	ldr	r3, [pc, #384]	@ (800294c <HAL_RCC_OscConfig+0x604>)
 80027ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027cc:	4b5f      	ldr	r3, [pc, #380]	@ (800294c <HAL_RCC_OscConfig+0x604>)
 80027ce:	4962      	ldr	r1, [pc, #392]	@ (8002958 <HAL_RCC_OscConfig+0x610>)
 80027d0:	400a      	ands	r2, r1
 80027d2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	69db      	ldr	r3, [r3, #28]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d100      	bne.n	80027de <HAL_RCC_OscConfig+0x496>
 80027dc:	e0b0      	b.n	8002940 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027de:	4b5b      	ldr	r3, [pc, #364]	@ (800294c <HAL_RCC_OscConfig+0x604>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	2238      	movs	r2, #56	@ 0x38
 80027e4:	4013      	ands	r3, r2
 80027e6:	2b10      	cmp	r3, #16
 80027e8:	d100      	bne.n	80027ec <HAL_RCC_OscConfig+0x4a4>
 80027ea:	e078      	b.n	80028de <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	69db      	ldr	r3, [r3, #28]
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d153      	bne.n	800289c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027f4:	4b55      	ldr	r3, [pc, #340]	@ (800294c <HAL_RCC_OscConfig+0x604>)
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	4b54      	ldr	r3, [pc, #336]	@ (800294c <HAL_RCC_OscConfig+0x604>)
 80027fa:	4958      	ldr	r1, [pc, #352]	@ (800295c <HAL_RCC_OscConfig+0x614>)
 80027fc:	400a      	ands	r2, r1
 80027fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002800:	f7fe fb9a 	bl	8000f38 <HAL_GetTick>
 8002804:	0003      	movs	r3, r0
 8002806:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800280a:	f7fe fb95 	bl	8000f38 <HAL_GetTick>
 800280e:	0002      	movs	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e092      	b.n	8002942 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800281c:	4b4b      	ldr	r3, [pc, #300]	@ (800294c <HAL_RCC_OscConfig+0x604>)
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	2380      	movs	r3, #128	@ 0x80
 8002822:	049b      	lsls	r3, r3, #18
 8002824:	4013      	ands	r3, r2
 8002826:	d1f0      	bne.n	800280a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002828:	4b48      	ldr	r3, [pc, #288]	@ (800294c <HAL_RCC_OscConfig+0x604>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	4a4c      	ldr	r2, [pc, #304]	@ (8002960 <HAL_RCC_OscConfig+0x618>)
 800282e:	4013      	ands	r3, r2
 8002830:	0019      	movs	r1, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a1a      	ldr	r2, [r3, #32]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800283a:	431a      	orrs	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002840:	021b      	lsls	r3, r3, #8
 8002842:	431a      	orrs	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002848:	431a      	orrs	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284e:	431a      	orrs	r2, r3
 8002850:	4b3e      	ldr	r3, [pc, #248]	@ (800294c <HAL_RCC_OscConfig+0x604>)
 8002852:	430a      	orrs	r2, r1
 8002854:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002856:	4b3d      	ldr	r3, [pc, #244]	@ (800294c <HAL_RCC_OscConfig+0x604>)
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	4b3c      	ldr	r3, [pc, #240]	@ (800294c <HAL_RCC_OscConfig+0x604>)
 800285c:	2180      	movs	r1, #128	@ 0x80
 800285e:	0449      	lsls	r1, r1, #17
 8002860:	430a      	orrs	r2, r1
 8002862:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002864:	4b39      	ldr	r3, [pc, #228]	@ (800294c <HAL_RCC_OscConfig+0x604>)
 8002866:	68da      	ldr	r2, [r3, #12]
 8002868:	4b38      	ldr	r3, [pc, #224]	@ (800294c <HAL_RCC_OscConfig+0x604>)
 800286a:	2180      	movs	r1, #128	@ 0x80
 800286c:	0549      	lsls	r1, r1, #21
 800286e:	430a      	orrs	r2, r1
 8002870:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002872:	f7fe fb61 	bl	8000f38 <HAL_GetTick>
 8002876:	0003      	movs	r3, r0
 8002878:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800287c:	f7fe fb5c 	bl	8000f38 <HAL_GetTick>
 8002880:	0002      	movs	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e059      	b.n	8002942 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800288e:	4b2f      	ldr	r3, [pc, #188]	@ (800294c <HAL_RCC_OscConfig+0x604>)
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	2380      	movs	r3, #128	@ 0x80
 8002894:	049b      	lsls	r3, r3, #18
 8002896:	4013      	ands	r3, r2
 8002898:	d0f0      	beq.n	800287c <HAL_RCC_OscConfig+0x534>
 800289a:	e051      	b.n	8002940 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800289c:	4b2b      	ldr	r3, [pc, #172]	@ (800294c <HAL_RCC_OscConfig+0x604>)
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	4b2a      	ldr	r3, [pc, #168]	@ (800294c <HAL_RCC_OscConfig+0x604>)
 80028a2:	492e      	ldr	r1, [pc, #184]	@ (800295c <HAL_RCC_OscConfig+0x614>)
 80028a4:	400a      	ands	r2, r1
 80028a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a8:	f7fe fb46 	bl	8000f38 <HAL_GetTick>
 80028ac:	0003      	movs	r3, r0
 80028ae:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b2:	f7fe fb41 	bl	8000f38 <HAL_GetTick>
 80028b6:	0002      	movs	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e03e      	b.n	8002942 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028c4:	4b21      	ldr	r3, [pc, #132]	@ (800294c <HAL_RCC_OscConfig+0x604>)
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	2380      	movs	r3, #128	@ 0x80
 80028ca:	049b      	lsls	r3, r3, #18
 80028cc:	4013      	ands	r3, r2
 80028ce:	d1f0      	bne.n	80028b2 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80028d0:	4b1e      	ldr	r3, [pc, #120]	@ (800294c <HAL_RCC_OscConfig+0x604>)
 80028d2:	68da      	ldr	r2, [r3, #12]
 80028d4:	4b1d      	ldr	r3, [pc, #116]	@ (800294c <HAL_RCC_OscConfig+0x604>)
 80028d6:	4923      	ldr	r1, [pc, #140]	@ (8002964 <HAL_RCC_OscConfig+0x61c>)
 80028d8:	400a      	ands	r2, r1
 80028da:	60da      	str	r2, [r3, #12]
 80028dc:	e030      	b.n	8002940 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d101      	bne.n	80028ea <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e02b      	b.n	8002942 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80028ea:	4b18      	ldr	r3, [pc, #96]	@ (800294c <HAL_RCC_OscConfig+0x604>)
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	2203      	movs	r2, #3
 80028f4:	401a      	ands	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d11e      	bne.n	800293c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	2270      	movs	r2, #112	@ 0x70
 8002902:	401a      	ands	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002908:	429a      	cmp	r2, r3
 800290a:	d117      	bne.n	800293c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800290c:	697a      	ldr	r2, [r7, #20]
 800290e:	23fe      	movs	r3, #254	@ 0xfe
 8002910:	01db      	lsls	r3, r3, #7
 8002912:	401a      	ands	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002918:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800291a:	429a      	cmp	r2, r3
 800291c:	d10e      	bne.n	800293c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	23f8      	movs	r3, #248	@ 0xf8
 8002922:	039b      	lsls	r3, r3, #14
 8002924:	401a      	ands	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800292a:	429a      	cmp	r2, r3
 800292c:	d106      	bne.n	800293c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	0f5b      	lsrs	r3, r3, #29
 8002932:	075a      	lsls	r2, r3, #29
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002938:	429a      	cmp	r2, r3
 800293a:	d001      	beq.n	8002940 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e000      	b.n	8002942 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	0018      	movs	r0, r3
 8002944:	46bd      	mov	sp, r7
 8002946:	b008      	add	sp, #32
 8002948:	bd80      	pop	{r7, pc}
 800294a:	46c0      	nop			@ (mov r8, r8)
 800294c:	40021000 	.word	0x40021000
 8002950:	40007000 	.word	0x40007000
 8002954:	00001388 	.word	0x00001388
 8002958:	efffffff 	.word	0xefffffff
 800295c:	feffffff 	.word	0xfeffffff
 8002960:	1fc1808c 	.word	0x1fc1808c
 8002964:	effefffc 	.word	0xeffefffc

08002968 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d101      	bne.n	800297c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e0e9      	b.n	8002b50 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800297c:	4b76      	ldr	r3, [pc, #472]	@ (8002b58 <HAL_RCC_ClockConfig+0x1f0>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2207      	movs	r2, #7
 8002982:	4013      	ands	r3, r2
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	429a      	cmp	r2, r3
 8002988:	d91e      	bls.n	80029c8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800298a:	4b73      	ldr	r3, [pc, #460]	@ (8002b58 <HAL_RCC_ClockConfig+0x1f0>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2207      	movs	r2, #7
 8002990:	4393      	bics	r3, r2
 8002992:	0019      	movs	r1, r3
 8002994:	4b70      	ldr	r3, [pc, #448]	@ (8002b58 <HAL_RCC_ClockConfig+0x1f0>)
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	430a      	orrs	r2, r1
 800299a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800299c:	f7fe facc 	bl	8000f38 <HAL_GetTick>
 80029a0:	0003      	movs	r3, r0
 80029a2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80029a4:	e009      	b.n	80029ba <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029a6:	f7fe fac7 	bl	8000f38 <HAL_GetTick>
 80029aa:	0002      	movs	r2, r0
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	4a6a      	ldr	r2, [pc, #424]	@ (8002b5c <HAL_RCC_ClockConfig+0x1f4>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e0ca      	b.n	8002b50 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80029ba:	4b67      	ldr	r3, [pc, #412]	@ (8002b58 <HAL_RCC_ClockConfig+0x1f0>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2207      	movs	r2, #7
 80029c0:	4013      	ands	r3, r2
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d1ee      	bne.n	80029a6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2202      	movs	r2, #2
 80029ce:	4013      	ands	r3, r2
 80029d0:	d015      	beq.n	80029fe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2204      	movs	r2, #4
 80029d8:	4013      	ands	r3, r2
 80029da:	d006      	beq.n	80029ea <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80029dc:	4b60      	ldr	r3, [pc, #384]	@ (8002b60 <HAL_RCC_ClockConfig+0x1f8>)
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	4b5f      	ldr	r3, [pc, #380]	@ (8002b60 <HAL_RCC_ClockConfig+0x1f8>)
 80029e2:	21e0      	movs	r1, #224	@ 0xe0
 80029e4:	01c9      	lsls	r1, r1, #7
 80029e6:	430a      	orrs	r2, r1
 80029e8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029ea:	4b5d      	ldr	r3, [pc, #372]	@ (8002b60 <HAL_RCC_ClockConfig+0x1f8>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	4a5d      	ldr	r2, [pc, #372]	@ (8002b64 <HAL_RCC_ClockConfig+0x1fc>)
 80029f0:	4013      	ands	r3, r2
 80029f2:	0019      	movs	r1, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	4b59      	ldr	r3, [pc, #356]	@ (8002b60 <HAL_RCC_ClockConfig+0x1f8>)
 80029fa:	430a      	orrs	r2, r1
 80029fc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2201      	movs	r2, #1
 8002a04:	4013      	ands	r3, r2
 8002a06:	d057      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d107      	bne.n	8002a20 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a10:	4b53      	ldr	r3, [pc, #332]	@ (8002b60 <HAL_RCC_ClockConfig+0x1f8>)
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	2380      	movs	r3, #128	@ 0x80
 8002a16:	029b      	lsls	r3, r3, #10
 8002a18:	4013      	ands	r3, r2
 8002a1a:	d12b      	bne.n	8002a74 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e097      	b.n	8002b50 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d107      	bne.n	8002a38 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a28:	4b4d      	ldr	r3, [pc, #308]	@ (8002b60 <HAL_RCC_ClockConfig+0x1f8>)
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	2380      	movs	r3, #128	@ 0x80
 8002a2e:	049b      	lsls	r3, r3, #18
 8002a30:	4013      	ands	r3, r2
 8002a32:	d11f      	bne.n	8002a74 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e08b      	b.n	8002b50 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d107      	bne.n	8002a50 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a40:	4b47      	ldr	r3, [pc, #284]	@ (8002b60 <HAL_RCC_ClockConfig+0x1f8>)
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	2380      	movs	r3, #128	@ 0x80
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	4013      	ands	r3, r2
 8002a4a:	d113      	bne.n	8002a74 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e07f      	b.n	8002b50 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d106      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a58:	4b41      	ldr	r3, [pc, #260]	@ (8002b60 <HAL_RCC_ClockConfig+0x1f8>)
 8002a5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a5c:	2202      	movs	r2, #2
 8002a5e:	4013      	ands	r3, r2
 8002a60:	d108      	bne.n	8002a74 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e074      	b.n	8002b50 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a66:	4b3e      	ldr	r3, [pc, #248]	@ (8002b60 <HAL_RCC_ClockConfig+0x1f8>)
 8002a68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	d101      	bne.n	8002a74 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e06d      	b.n	8002b50 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a74:	4b3a      	ldr	r3, [pc, #232]	@ (8002b60 <HAL_RCC_ClockConfig+0x1f8>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	2207      	movs	r2, #7
 8002a7a:	4393      	bics	r3, r2
 8002a7c:	0019      	movs	r1, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685a      	ldr	r2, [r3, #4]
 8002a82:	4b37      	ldr	r3, [pc, #220]	@ (8002b60 <HAL_RCC_ClockConfig+0x1f8>)
 8002a84:	430a      	orrs	r2, r1
 8002a86:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a88:	f7fe fa56 	bl	8000f38 <HAL_GetTick>
 8002a8c:	0003      	movs	r3, r0
 8002a8e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a90:	e009      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a92:	f7fe fa51 	bl	8000f38 <HAL_GetTick>
 8002a96:	0002      	movs	r2, r0
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	4a2f      	ldr	r2, [pc, #188]	@ (8002b5c <HAL_RCC_ClockConfig+0x1f4>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e054      	b.n	8002b50 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa6:	4b2e      	ldr	r3, [pc, #184]	@ (8002b60 <HAL_RCC_ClockConfig+0x1f8>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	2238      	movs	r2, #56	@ 0x38
 8002aac:	401a      	ands	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d1ec      	bne.n	8002a92 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ab8:	4b27      	ldr	r3, [pc, #156]	@ (8002b58 <HAL_RCC_ClockConfig+0x1f0>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2207      	movs	r2, #7
 8002abe:	4013      	ands	r3, r2
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d21e      	bcs.n	8002b04 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac6:	4b24      	ldr	r3, [pc, #144]	@ (8002b58 <HAL_RCC_ClockConfig+0x1f0>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2207      	movs	r2, #7
 8002acc:	4393      	bics	r3, r2
 8002ace:	0019      	movs	r1, r3
 8002ad0:	4b21      	ldr	r3, [pc, #132]	@ (8002b58 <HAL_RCC_ClockConfig+0x1f0>)
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ad8:	f7fe fa2e 	bl	8000f38 <HAL_GetTick>
 8002adc:	0003      	movs	r3, r0
 8002ade:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ae0:	e009      	b.n	8002af6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ae2:	f7fe fa29 	bl	8000f38 <HAL_GetTick>
 8002ae6:	0002      	movs	r2, r0
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	4a1b      	ldr	r2, [pc, #108]	@ (8002b5c <HAL_RCC_ClockConfig+0x1f4>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e02c      	b.n	8002b50 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002af6:	4b18      	ldr	r3, [pc, #96]	@ (8002b58 <HAL_RCC_ClockConfig+0x1f0>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2207      	movs	r2, #7
 8002afc:	4013      	ands	r3, r2
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d1ee      	bne.n	8002ae2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2204      	movs	r2, #4
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	d009      	beq.n	8002b22 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002b0e:	4b14      	ldr	r3, [pc, #80]	@ (8002b60 <HAL_RCC_ClockConfig+0x1f8>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	4a15      	ldr	r2, [pc, #84]	@ (8002b68 <HAL_RCC_ClockConfig+0x200>)
 8002b14:	4013      	ands	r3, r2
 8002b16:	0019      	movs	r1, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68da      	ldr	r2, [r3, #12]
 8002b1c:	4b10      	ldr	r3, [pc, #64]	@ (8002b60 <HAL_RCC_ClockConfig+0x1f8>)
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002b22:	f000 f829 	bl	8002b78 <HAL_RCC_GetSysClockFreq>
 8002b26:	0001      	movs	r1, r0
 8002b28:	4b0d      	ldr	r3, [pc, #52]	@ (8002b60 <HAL_RCC_ClockConfig+0x1f8>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	0a1b      	lsrs	r3, r3, #8
 8002b2e:	220f      	movs	r2, #15
 8002b30:	401a      	ands	r2, r3
 8002b32:	4b0e      	ldr	r3, [pc, #56]	@ (8002b6c <HAL_RCC_ClockConfig+0x204>)
 8002b34:	0092      	lsls	r2, r2, #2
 8002b36:	58d3      	ldr	r3, [r2, r3]
 8002b38:	221f      	movs	r2, #31
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	000a      	movs	r2, r1
 8002b3e:	40da      	lsrs	r2, r3
 8002b40:	4b0b      	ldr	r3, [pc, #44]	@ (8002b70 <HAL_RCC_ClockConfig+0x208>)
 8002b42:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002b44:	4b0b      	ldr	r3, [pc, #44]	@ (8002b74 <HAL_RCC_ClockConfig+0x20c>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	0018      	movs	r0, r3
 8002b4a:	f7fe f999 	bl	8000e80 <HAL_InitTick>
 8002b4e:	0003      	movs	r3, r0
}
 8002b50:	0018      	movs	r0, r3
 8002b52:	46bd      	mov	sp, r7
 8002b54:	b004      	add	sp, #16
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40022000 	.word	0x40022000
 8002b5c:	00001388 	.word	0x00001388
 8002b60:	40021000 	.word	0x40021000
 8002b64:	fffff0ff 	.word	0xfffff0ff
 8002b68:	ffff8fff 	.word	0xffff8fff
 8002b6c:	08004074 	.word	0x08004074
 8002b70:	20000000 	.word	0x20000000
 8002b74:	20000004 	.word	0x20000004

08002b78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b7e:	4b3c      	ldr	r3, [pc, #240]	@ (8002c70 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	2238      	movs	r2, #56	@ 0x38
 8002b84:	4013      	ands	r3, r2
 8002b86:	d10f      	bne.n	8002ba8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002b88:	4b39      	ldr	r3, [pc, #228]	@ (8002c70 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	0adb      	lsrs	r3, r3, #11
 8002b8e:	2207      	movs	r2, #7
 8002b90:	4013      	ands	r3, r2
 8002b92:	2201      	movs	r2, #1
 8002b94:	409a      	lsls	r2, r3
 8002b96:	0013      	movs	r3, r2
 8002b98:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002b9a:	6839      	ldr	r1, [r7, #0]
 8002b9c:	4835      	ldr	r0, [pc, #212]	@ (8002c74 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002b9e:	f7fd faaf 	bl	8000100 <__udivsi3>
 8002ba2:	0003      	movs	r3, r0
 8002ba4:	613b      	str	r3, [r7, #16]
 8002ba6:	e05d      	b.n	8002c64 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ba8:	4b31      	ldr	r3, [pc, #196]	@ (8002c70 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	2238      	movs	r2, #56	@ 0x38
 8002bae:	4013      	ands	r3, r2
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	d102      	bne.n	8002bba <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002bb4:	4b30      	ldr	r3, [pc, #192]	@ (8002c78 <HAL_RCC_GetSysClockFreq+0x100>)
 8002bb6:	613b      	str	r3, [r7, #16]
 8002bb8:	e054      	b.n	8002c64 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bba:	4b2d      	ldr	r3, [pc, #180]	@ (8002c70 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	2238      	movs	r2, #56	@ 0x38
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	2b10      	cmp	r3, #16
 8002bc4:	d138      	bne.n	8002c38 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002bc6:	4b2a      	ldr	r3, [pc, #168]	@ (8002c70 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	2203      	movs	r2, #3
 8002bcc:	4013      	ands	r3, r2
 8002bce:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bd0:	4b27      	ldr	r3, [pc, #156]	@ (8002c70 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	091b      	lsrs	r3, r3, #4
 8002bd6:	2207      	movs	r2, #7
 8002bd8:	4013      	ands	r3, r2
 8002bda:	3301      	adds	r3, #1
 8002bdc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2b03      	cmp	r3, #3
 8002be2:	d10d      	bne.n	8002c00 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002be4:	68b9      	ldr	r1, [r7, #8]
 8002be6:	4824      	ldr	r0, [pc, #144]	@ (8002c78 <HAL_RCC_GetSysClockFreq+0x100>)
 8002be8:	f7fd fa8a 	bl	8000100 <__udivsi3>
 8002bec:	0003      	movs	r3, r0
 8002bee:	0019      	movs	r1, r3
 8002bf0:	4b1f      	ldr	r3, [pc, #124]	@ (8002c70 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	0a1b      	lsrs	r3, r3, #8
 8002bf6:	227f      	movs	r2, #127	@ 0x7f
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	434b      	muls	r3, r1
 8002bfc:	617b      	str	r3, [r7, #20]
        break;
 8002bfe:	e00d      	b.n	8002c1c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002c00:	68b9      	ldr	r1, [r7, #8]
 8002c02:	481c      	ldr	r0, [pc, #112]	@ (8002c74 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002c04:	f7fd fa7c 	bl	8000100 <__udivsi3>
 8002c08:	0003      	movs	r3, r0
 8002c0a:	0019      	movs	r1, r3
 8002c0c:	4b18      	ldr	r3, [pc, #96]	@ (8002c70 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	0a1b      	lsrs	r3, r3, #8
 8002c12:	227f      	movs	r2, #127	@ 0x7f
 8002c14:	4013      	ands	r3, r2
 8002c16:	434b      	muls	r3, r1
 8002c18:	617b      	str	r3, [r7, #20]
        break;
 8002c1a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002c1c:	4b14      	ldr	r3, [pc, #80]	@ (8002c70 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	0f5b      	lsrs	r3, r3, #29
 8002c22:	2207      	movs	r2, #7
 8002c24:	4013      	ands	r3, r2
 8002c26:	3301      	adds	r3, #1
 8002c28:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002c2a:	6879      	ldr	r1, [r7, #4]
 8002c2c:	6978      	ldr	r0, [r7, #20]
 8002c2e:	f7fd fa67 	bl	8000100 <__udivsi3>
 8002c32:	0003      	movs	r3, r0
 8002c34:	613b      	str	r3, [r7, #16]
 8002c36:	e015      	b.n	8002c64 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002c38:	4b0d      	ldr	r3, [pc, #52]	@ (8002c70 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	2238      	movs	r2, #56	@ 0x38
 8002c3e:	4013      	ands	r3, r2
 8002c40:	2b20      	cmp	r3, #32
 8002c42:	d103      	bne.n	8002c4c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002c44:	2380      	movs	r3, #128	@ 0x80
 8002c46:	021b      	lsls	r3, r3, #8
 8002c48:	613b      	str	r3, [r7, #16]
 8002c4a:	e00b      	b.n	8002c64 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002c4c:	4b08      	ldr	r3, [pc, #32]	@ (8002c70 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	2238      	movs	r2, #56	@ 0x38
 8002c52:	4013      	ands	r3, r2
 8002c54:	2b18      	cmp	r3, #24
 8002c56:	d103      	bne.n	8002c60 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002c58:	23fa      	movs	r3, #250	@ 0xfa
 8002c5a:	01db      	lsls	r3, r3, #7
 8002c5c:	613b      	str	r3, [r7, #16]
 8002c5e:	e001      	b.n	8002c64 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002c64:	693b      	ldr	r3, [r7, #16]
}
 8002c66:	0018      	movs	r0, r3
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	b006      	add	sp, #24
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	46c0      	nop			@ (mov r8, r8)
 8002c70:	40021000 	.word	0x40021000
 8002c74:	00f42400 	.word	0x00f42400
 8002c78:	007a1200 	.word	0x007a1200

08002c7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002c84:	2313      	movs	r3, #19
 8002c86:	18fb      	adds	r3, r7, r3
 8002c88:	2200      	movs	r2, #0
 8002c8a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c8c:	2312      	movs	r3, #18
 8002c8e:	18fb      	adds	r3, r7, r3
 8002c90:	2200      	movs	r2, #0
 8002c92:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	2380      	movs	r3, #128	@ 0x80
 8002c9a:	029b      	lsls	r3, r3, #10
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	d100      	bne.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002ca0:	e0a3      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ca2:	2011      	movs	r0, #17
 8002ca4:	183b      	adds	r3, r7, r0
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002caa:	4b7f      	ldr	r3, [pc, #508]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002cac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002cae:	2380      	movs	r3, #128	@ 0x80
 8002cb0:	055b      	lsls	r3, r3, #21
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	d110      	bne.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cb6:	4b7c      	ldr	r3, [pc, #496]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002cb8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002cba:	4b7b      	ldr	r3, [pc, #492]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002cbc:	2180      	movs	r1, #128	@ 0x80
 8002cbe:	0549      	lsls	r1, r1, #21
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002cc4:	4b78      	ldr	r3, [pc, #480]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002cc6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002cc8:	2380      	movs	r3, #128	@ 0x80
 8002cca:	055b      	lsls	r3, r3, #21
 8002ccc:	4013      	ands	r3, r2
 8002cce:	60bb      	str	r3, [r7, #8]
 8002cd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cd2:	183b      	adds	r3, r7, r0
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cd8:	4b74      	ldr	r3, [pc, #464]	@ (8002eac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	4b73      	ldr	r3, [pc, #460]	@ (8002eac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002cde:	2180      	movs	r1, #128	@ 0x80
 8002ce0:	0049      	lsls	r1, r1, #1
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ce6:	f7fe f927 	bl	8000f38 <HAL_GetTick>
 8002cea:	0003      	movs	r3, r0
 8002cec:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cee:	e00b      	b.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cf0:	f7fe f922 	bl	8000f38 <HAL_GetTick>
 8002cf4:	0002      	movs	r2, r0
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d904      	bls.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002cfe:	2313      	movs	r3, #19
 8002d00:	18fb      	adds	r3, r7, r3
 8002d02:	2203      	movs	r2, #3
 8002d04:	701a      	strb	r2, [r3, #0]
        break;
 8002d06:	e005      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d08:	4b68      	ldr	r3, [pc, #416]	@ (8002eac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	2380      	movs	r3, #128	@ 0x80
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	4013      	ands	r3, r2
 8002d12:	d0ed      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002d14:	2313      	movs	r3, #19
 8002d16:	18fb      	adds	r3, r7, r3
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d154      	bne.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d1e:	4b62      	ldr	r3, [pc, #392]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d20:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002d22:	23c0      	movs	r3, #192	@ 0xc0
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	4013      	ands	r3, r2
 8002d28:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d019      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d014      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d3a:	4b5b      	ldr	r3, [pc, #364]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d3e:	4a5c      	ldr	r2, [pc, #368]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002d40:	4013      	ands	r3, r2
 8002d42:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d44:	4b58      	ldr	r3, [pc, #352]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d46:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002d48:	4b57      	ldr	r3, [pc, #348]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d4a:	2180      	movs	r1, #128	@ 0x80
 8002d4c:	0249      	lsls	r1, r1, #9
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d52:	4b55      	ldr	r3, [pc, #340]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d54:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002d56:	4b54      	ldr	r3, [pc, #336]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d58:	4956      	ldr	r1, [pc, #344]	@ (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002d5a:	400a      	ands	r2, r1
 8002d5c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d5e:	4b52      	ldr	r3, [pc, #328]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d60:	697a      	ldr	r2, [r7, #20]
 8002d62:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	2201      	movs	r2, #1
 8002d68:	4013      	ands	r3, r2
 8002d6a:	d016      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6c:	f7fe f8e4 	bl	8000f38 <HAL_GetTick>
 8002d70:	0003      	movs	r3, r0
 8002d72:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d74:	e00c      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d76:	f7fe f8df 	bl	8000f38 <HAL_GetTick>
 8002d7a:	0002      	movs	r2, r0
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	4a4d      	ldr	r2, [pc, #308]	@ (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d904      	bls.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002d86:	2313      	movs	r3, #19
 8002d88:	18fb      	adds	r3, r7, r3
 8002d8a:	2203      	movs	r2, #3
 8002d8c:	701a      	strb	r2, [r3, #0]
            break;
 8002d8e:	e004      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d90:	4b45      	ldr	r3, [pc, #276]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d94:	2202      	movs	r2, #2
 8002d96:	4013      	ands	r3, r2
 8002d98:	d0ed      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002d9a:	2313      	movs	r3, #19
 8002d9c:	18fb      	adds	r3, r7, r3
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10a      	bne.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002da4:	4b40      	ldr	r3, [pc, #256]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002da6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002da8:	4a41      	ldr	r2, [pc, #260]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002daa:	4013      	ands	r3, r2
 8002dac:	0019      	movs	r1, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	695a      	ldr	r2, [r3, #20]
 8002db2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002db4:	430a      	orrs	r2, r1
 8002db6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002db8:	e00c      	b.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002dba:	2312      	movs	r3, #18
 8002dbc:	18fb      	adds	r3, r7, r3
 8002dbe:	2213      	movs	r2, #19
 8002dc0:	18ba      	adds	r2, r7, r2
 8002dc2:	7812      	ldrb	r2, [r2, #0]
 8002dc4:	701a      	strb	r2, [r3, #0]
 8002dc6:	e005      	b.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dc8:	2312      	movs	r3, #18
 8002dca:	18fb      	adds	r3, r7, r3
 8002dcc:	2213      	movs	r2, #19
 8002dce:	18ba      	adds	r2, r7, r2
 8002dd0:	7812      	ldrb	r2, [r2, #0]
 8002dd2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002dd4:	2311      	movs	r3, #17
 8002dd6:	18fb      	adds	r3, r7, r3
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d105      	bne.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dde:	4b32      	ldr	r3, [pc, #200]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002de0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002de2:	4b31      	ldr	r3, [pc, #196]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002de4:	4935      	ldr	r1, [pc, #212]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002de6:	400a      	ands	r2, r1
 8002de8:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2201      	movs	r2, #1
 8002df0:	4013      	ands	r3, r2
 8002df2:	d009      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002df4:	4b2c      	ldr	r3, [pc, #176]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002df6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002df8:	2203      	movs	r2, #3
 8002dfa:	4393      	bics	r3, r2
 8002dfc:	0019      	movs	r1, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	4b29      	ldr	r3, [pc, #164]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e04:	430a      	orrs	r2, r1
 8002e06:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	4013      	ands	r3, r2
 8002e10:	d009      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e12:	4b25      	ldr	r3, [pc, #148]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e16:	4a2a      	ldr	r2, [pc, #168]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002e18:	4013      	ands	r3, r2
 8002e1a:	0019      	movs	r1, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	4b21      	ldr	r3, [pc, #132]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e22:	430a      	orrs	r2, r1
 8002e24:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	2380      	movs	r3, #128	@ 0x80
 8002e2c:	01db      	lsls	r3, r3, #7
 8002e2e:	4013      	ands	r3, r2
 8002e30:	d015      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e32:	4b1d      	ldr	r3, [pc, #116]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	0899      	lsrs	r1, r3, #2
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	691a      	ldr	r2, [r3, #16]
 8002e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e40:	430a      	orrs	r2, r1
 8002e42:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	691a      	ldr	r2, [r3, #16]
 8002e48:	2380      	movs	r3, #128	@ 0x80
 8002e4a:	05db      	lsls	r3, r3, #23
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d106      	bne.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002e50:	4b15      	ldr	r3, [pc, #84]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e52:	68da      	ldr	r2, [r3, #12]
 8002e54:	4b14      	ldr	r3, [pc, #80]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e56:	2180      	movs	r1, #128	@ 0x80
 8002e58:	0249      	lsls	r1, r1, #9
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	2380      	movs	r3, #128	@ 0x80
 8002e64:	011b      	lsls	r3, r3, #4
 8002e66:	4013      	ands	r3, r2
 8002e68:	d016      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002e6a:	4b0f      	ldr	r3, [pc, #60]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e6e:	4a15      	ldr	r2, [pc, #84]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e70:	4013      	ands	r3, r2
 8002e72:	0019      	movs	r1, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68da      	ldr	r2, [r3, #12]
 8002e78:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	68da      	ldr	r2, [r3, #12]
 8002e82:	2380      	movs	r3, #128	@ 0x80
 8002e84:	01db      	lsls	r3, r3, #7
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d106      	bne.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002e8a:	4b07      	ldr	r3, [pc, #28]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e8c:	68da      	ldr	r2, [r3, #12]
 8002e8e:	4b06      	ldr	r3, [pc, #24]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e90:	2180      	movs	r1, #128	@ 0x80
 8002e92:	0249      	lsls	r1, r1, #9
 8002e94:	430a      	orrs	r2, r1
 8002e96:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002e98:	2312      	movs	r3, #18
 8002e9a:	18fb      	adds	r3, r7, r3
 8002e9c:	781b      	ldrb	r3, [r3, #0]
}
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	b006      	add	sp, #24
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	46c0      	nop			@ (mov r8, r8)
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	40007000 	.word	0x40007000
 8002eb0:	fffffcff 	.word	0xfffffcff
 8002eb4:	fffeffff 	.word	0xfffeffff
 8002eb8:	00001388 	.word	0x00001388
 8002ebc:	efffffff 	.word	0xefffffff
 8002ec0:	ffffcfff 	.word	0xffffcfff
 8002ec4:	ffff3fff 	.word	0xffff3fff

08002ec8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e04a      	b.n	8002f70 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	223d      	movs	r2, #61	@ 0x3d
 8002ede:	5c9b      	ldrb	r3, [r3, r2]
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d107      	bne.n	8002ef6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	223c      	movs	r2, #60	@ 0x3c
 8002eea:	2100      	movs	r1, #0
 8002eec:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	f7fd fe33 	bl	8000b5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	223d      	movs	r2, #61	@ 0x3d
 8002efa:	2102      	movs	r1, #2
 8002efc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	3304      	adds	r3, #4
 8002f06:	0019      	movs	r1, r3
 8002f08:	0010      	movs	r0, r2
 8002f0a:	f000 fc19 	bl	8003740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2248      	movs	r2, #72	@ 0x48
 8002f12:	2101      	movs	r1, #1
 8002f14:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	223e      	movs	r2, #62	@ 0x3e
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	5499      	strb	r1, [r3, r2]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	223f      	movs	r2, #63	@ 0x3f
 8002f22:	2101      	movs	r1, #1
 8002f24:	5499      	strb	r1, [r3, r2]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2240      	movs	r2, #64	@ 0x40
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	5499      	strb	r1, [r3, r2]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2241      	movs	r2, #65	@ 0x41
 8002f32:	2101      	movs	r1, #1
 8002f34:	5499      	strb	r1, [r3, r2]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2242      	movs	r2, #66	@ 0x42
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	5499      	strb	r1, [r3, r2]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2243      	movs	r2, #67	@ 0x43
 8002f42:	2101      	movs	r1, #1
 8002f44:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2244      	movs	r2, #68	@ 0x44
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	5499      	strb	r1, [r3, r2]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2245      	movs	r2, #69	@ 0x45
 8002f52:	2101      	movs	r1, #1
 8002f54:	5499      	strb	r1, [r3, r2]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2246      	movs	r2, #70	@ 0x46
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	5499      	strb	r1, [r3, r2]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2247      	movs	r2, #71	@ 0x47
 8002f62:	2101      	movs	r1, #1
 8002f64:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	223d      	movs	r2, #61	@ 0x3d
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	0018      	movs	r0, r3
 8002f72:	46bd      	mov	sp, r7
 8002f74:	b002      	add	sp, #8
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e04a      	b.n	8003020 <HAL_TIM_OC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	223d      	movs	r2, #61	@ 0x3d
 8002f8e:	5c9b      	ldrb	r3, [r3, r2]
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d107      	bne.n	8002fa6 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	223c      	movs	r2, #60	@ 0x3c
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	f000 f841 	bl	8003028 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	223d      	movs	r2, #61	@ 0x3d
 8002faa:	2102      	movs	r1, #2
 8002fac:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	3304      	adds	r3, #4
 8002fb6:	0019      	movs	r1, r3
 8002fb8:	0010      	movs	r0, r2
 8002fba:	f000 fbc1 	bl	8003740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2248      	movs	r2, #72	@ 0x48
 8002fc2:	2101      	movs	r1, #1
 8002fc4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	223e      	movs	r2, #62	@ 0x3e
 8002fca:	2101      	movs	r1, #1
 8002fcc:	5499      	strb	r1, [r3, r2]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	223f      	movs	r2, #63	@ 0x3f
 8002fd2:	2101      	movs	r1, #1
 8002fd4:	5499      	strb	r1, [r3, r2]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2240      	movs	r2, #64	@ 0x40
 8002fda:	2101      	movs	r1, #1
 8002fdc:	5499      	strb	r1, [r3, r2]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2241      	movs	r2, #65	@ 0x41
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	5499      	strb	r1, [r3, r2]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2242      	movs	r2, #66	@ 0x42
 8002fea:	2101      	movs	r1, #1
 8002fec:	5499      	strb	r1, [r3, r2]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2243      	movs	r2, #67	@ 0x43
 8002ff2:	2101      	movs	r1, #1
 8002ff4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2244      	movs	r2, #68	@ 0x44
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	5499      	strb	r1, [r3, r2]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2245      	movs	r2, #69	@ 0x45
 8003002:	2101      	movs	r1, #1
 8003004:	5499      	strb	r1, [r3, r2]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2246      	movs	r2, #70	@ 0x46
 800300a:	2101      	movs	r1, #1
 800300c:	5499      	strb	r1, [r3, r2]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2247      	movs	r2, #71	@ 0x47
 8003012:	2101      	movs	r1, #1
 8003014:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	223d      	movs	r2, #61	@ 0x3d
 800301a:	2101      	movs	r1, #1
 800301c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	0018      	movs	r0, r3
 8003022:	46bd      	mov	sp, r7
 8003024:	b002      	add	sp, #8
 8003026:	bd80      	pop	{r7, pc}

08003028 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003030:	46c0      	nop			@ (mov r8, r8)
 8003032:	46bd      	mov	sp, r7
 8003034:	b002      	add	sp, #8
 8003036:	bd80      	pop	{r7, pc}

08003038 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003042:	230f      	movs	r3, #15
 8003044:	18fb      	adds	r3, r7, r3
 8003046:	2200      	movs	r2, #0
 8003048:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d108      	bne.n	8003062 <HAL_TIM_OC_Start_IT+0x2a>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	223e      	movs	r2, #62	@ 0x3e
 8003054:	5c9b      	ldrb	r3, [r3, r2]
 8003056:	b2db      	uxtb	r3, r3
 8003058:	3b01      	subs	r3, #1
 800305a:	1e5a      	subs	r2, r3, #1
 800305c:	4193      	sbcs	r3, r2
 800305e:	b2db      	uxtb	r3, r3
 8003060:	e037      	b.n	80030d2 <HAL_TIM_OC_Start_IT+0x9a>
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	2b04      	cmp	r3, #4
 8003066:	d108      	bne.n	800307a <HAL_TIM_OC_Start_IT+0x42>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	223f      	movs	r2, #63	@ 0x3f
 800306c:	5c9b      	ldrb	r3, [r3, r2]
 800306e:	b2db      	uxtb	r3, r3
 8003070:	3b01      	subs	r3, #1
 8003072:	1e5a      	subs	r2, r3, #1
 8003074:	4193      	sbcs	r3, r2
 8003076:	b2db      	uxtb	r3, r3
 8003078:	e02b      	b.n	80030d2 <HAL_TIM_OC_Start_IT+0x9a>
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	2b08      	cmp	r3, #8
 800307e:	d108      	bne.n	8003092 <HAL_TIM_OC_Start_IT+0x5a>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2240      	movs	r2, #64	@ 0x40
 8003084:	5c9b      	ldrb	r3, [r3, r2]
 8003086:	b2db      	uxtb	r3, r3
 8003088:	3b01      	subs	r3, #1
 800308a:	1e5a      	subs	r2, r3, #1
 800308c:	4193      	sbcs	r3, r2
 800308e:	b2db      	uxtb	r3, r3
 8003090:	e01f      	b.n	80030d2 <HAL_TIM_OC_Start_IT+0x9a>
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	2b0c      	cmp	r3, #12
 8003096:	d108      	bne.n	80030aa <HAL_TIM_OC_Start_IT+0x72>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2241      	movs	r2, #65	@ 0x41
 800309c:	5c9b      	ldrb	r3, [r3, r2]
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	3b01      	subs	r3, #1
 80030a2:	1e5a      	subs	r2, r3, #1
 80030a4:	4193      	sbcs	r3, r2
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	e013      	b.n	80030d2 <HAL_TIM_OC_Start_IT+0x9a>
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	2b10      	cmp	r3, #16
 80030ae:	d108      	bne.n	80030c2 <HAL_TIM_OC_Start_IT+0x8a>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2242      	movs	r2, #66	@ 0x42
 80030b4:	5c9b      	ldrb	r3, [r3, r2]
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	3b01      	subs	r3, #1
 80030ba:	1e5a      	subs	r2, r3, #1
 80030bc:	4193      	sbcs	r3, r2
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	e007      	b.n	80030d2 <HAL_TIM_OC_Start_IT+0x9a>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2243      	movs	r2, #67	@ 0x43
 80030c6:	5c9b      	ldrb	r3, [r3, r2]
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	3b01      	subs	r3, #1
 80030cc:	1e5a      	subs	r2, r3, #1
 80030ce:	4193      	sbcs	r3, r2
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <HAL_TIM_OC_Start_IT+0xa2>
  {
    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e0be      	b.n	8003258 <HAL_TIM_OC_Start_IT+0x220>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d104      	bne.n	80030ea <HAL_TIM_OC_Start_IT+0xb2>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	223e      	movs	r2, #62	@ 0x3e
 80030e4:	2102      	movs	r1, #2
 80030e6:	5499      	strb	r1, [r3, r2]
 80030e8:	e023      	b.n	8003132 <HAL_TIM_OC_Start_IT+0xfa>
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	2b04      	cmp	r3, #4
 80030ee:	d104      	bne.n	80030fa <HAL_TIM_OC_Start_IT+0xc2>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	223f      	movs	r2, #63	@ 0x3f
 80030f4:	2102      	movs	r1, #2
 80030f6:	5499      	strb	r1, [r3, r2]
 80030f8:	e01b      	b.n	8003132 <HAL_TIM_OC_Start_IT+0xfa>
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	2b08      	cmp	r3, #8
 80030fe:	d104      	bne.n	800310a <HAL_TIM_OC_Start_IT+0xd2>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2240      	movs	r2, #64	@ 0x40
 8003104:	2102      	movs	r1, #2
 8003106:	5499      	strb	r1, [r3, r2]
 8003108:	e013      	b.n	8003132 <HAL_TIM_OC_Start_IT+0xfa>
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	2b0c      	cmp	r3, #12
 800310e:	d104      	bne.n	800311a <HAL_TIM_OC_Start_IT+0xe2>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2241      	movs	r2, #65	@ 0x41
 8003114:	2102      	movs	r1, #2
 8003116:	5499      	strb	r1, [r3, r2]
 8003118:	e00b      	b.n	8003132 <HAL_TIM_OC_Start_IT+0xfa>
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	2b10      	cmp	r3, #16
 800311e:	d104      	bne.n	800312a <HAL_TIM_OC_Start_IT+0xf2>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2242      	movs	r2, #66	@ 0x42
 8003124:	2102      	movs	r1, #2
 8003126:	5499      	strb	r1, [r3, r2]
 8003128:	e003      	b.n	8003132 <HAL_TIM_OC_Start_IT+0xfa>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2243      	movs	r2, #67	@ 0x43
 800312e:	2102      	movs	r1, #2
 8003130:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	2b0c      	cmp	r3, #12
 8003136:	d02a      	beq.n	800318e <HAL_TIM_OC_Start_IT+0x156>
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	2b0c      	cmp	r3, #12
 800313c:	d830      	bhi.n	80031a0 <HAL_TIM_OC_Start_IT+0x168>
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	2b08      	cmp	r3, #8
 8003142:	d01b      	beq.n	800317c <HAL_TIM_OC_Start_IT+0x144>
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	2b08      	cmp	r3, #8
 8003148:	d82a      	bhi.n	80031a0 <HAL_TIM_OC_Start_IT+0x168>
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d003      	beq.n	8003158 <HAL_TIM_OC_Start_IT+0x120>
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	2b04      	cmp	r3, #4
 8003154:	d009      	beq.n	800316a <HAL_TIM_OC_Start_IT+0x132>
 8003156:	e023      	b.n	80031a0 <HAL_TIM_OC_Start_IT+0x168>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68da      	ldr	r2, [r3, #12]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2102      	movs	r1, #2
 8003164:	430a      	orrs	r2, r1
 8003166:	60da      	str	r2, [r3, #12]
      break;
 8003168:	e01f      	b.n	80031aa <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68da      	ldr	r2, [r3, #12]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2104      	movs	r1, #4
 8003176:	430a      	orrs	r2, r1
 8003178:	60da      	str	r2, [r3, #12]
      break;
 800317a:	e016      	b.n	80031aa <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68da      	ldr	r2, [r3, #12]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2108      	movs	r1, #8
 8003188:	430a      	orrs	r2, r1
 800318a:	60da      	str	r2, [r3, #12]
      break;
 800318c:	e00d      	b.n	80031aa <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68da      	ldr	r2, [r3, #12]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2110      	movs	r1, #16
 800319a:	430a      	orrs	r2, r1
 800319c:	60da      	str	r2, [r3, #12]
      break;
 800319e:	e004      	b.n	80031aa <HAL_TIM_OC_Start_IT+0x172>
    }

    default:
      status = HAL_ERROR;
 80031a0:	230f      	movs	r3, #15
 80031a2:	18fb      	adds	r3, r7, r3
 80031a4:	2201      	movs	r2, #1
 80031a6:	701a      	strb	r2, [r3, #0]
      break;
 80031a8:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 80031aa:	230f      	movs	r3, #15
 80031ac:	18fb      	adds	r3, r7, r3
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d14e      	bne.n	8003252 <HAL_TIM_OC_Start_IT+0x21a>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6839      	ldr	r1, [r7, #0]
 80031ba:	2201      	movs	r2, #1
 80031bc:	0018      	movs	r0, r3
 80031be:	f000 fe71 	bl	8003ea4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a26      	ldr	r2, [pc, #152]	@ (8003260 <HAL_TIM_OC_Start_IT+0x228>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d009      	beq.n	80031e0 <HAL_TIM_OC_Start_IT+0x1a8>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a24      	ldr	r2, [pc, #144]	@ (8003264 <HAL_TIM_OC_Start_IT+0x22c>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d004      	beq.n	80031e0 <HAL_TIM_OC_Start_IT+0x1a8>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a23      	ldr	r2, [pc, #140]	@ (8003268 <HAL_TIM_OC_Start_IT+0x230>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d101      	bne.n	80031e4 <HAL_TIM_OC_Start_IT+0x1ac>
 80031e0:	2301      	movs	r3, #1
 80031e2:	e000      	b.n	80031e6 <HAL_TIM_OC_Start_IT+0x1ae>
 80031e4:	2300      	movs	r3, #0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d008      	beq.n	80031fc <HAL_TIM_OC_Start_IT+0x1c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2180      	movs	r1, #128	@ 0x80
 80031f6:	0209      	lsls	r1, r1, #8
 80031f8:	430a      	orrs	r2, r1
 80031fa:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a17      	ldr	r2, [pc, #92]	@ (8003260 <HAL_TIM_OC_Start_IT+0x228>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d004      	beq.n	8003210 <HAL_TIM_OC_Start_IT+0x1d8>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a18      	ldr	r2, [pc, #96]	@ (800326c <HAL_TIM_OC_Start_IT+0x234>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d116      	bne.n	800323e <HAL_TIM_OC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	4a16      	ldr	r2, [pc, #88]	@ (8003270 <HAL_TIM_OC_Start_IT+0x238>)
 8003218:	4013      	ands	r3, r2
 800321a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	2b06      	cmp	r3, #6
 8003220:	d016      	beq.n	8003250 <HAL_TIM_OC_Start_IT+0x218>
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	2380      	movs	r3, #128	@ 0x80
 8003226:	025b      	lsls	r3, r3, #9
 8003228:	429a      	cmp	r2, r3
 800322a:	d011      	beq.n	8003250 <HAL_TIM_OC_Start_IT+0x218>
      {
        __HAL_TIM_ENABLE(htim);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2101      	movs	r1, #1
 8003238:	430a      	orrs	r2, r1
 800323a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800323c:	e008      	b.n	8003250 <HAL_TIM_OC_Start_IT+0x218>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2101      	movs	r1, #1
 800324a:	430a      	orrs	r2, r1
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	e000      	b.n	8003252 <HAL_TIM_OC_Start_IT+0x21a>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003250:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8003252:	230f      	movs	r3, #15
 8003254:	18fb      	adds	r3, r7, r3
 8003256:	781b      	ldrb	r3, [r3, #0]
}
 8003258:	0018      	movs	r0, r3
 800325a:	46bd      	mov	sp, r7
 800325c:	b004      	add	sp, #16
 800325e:	bd80      	pop	{r7, pc}
 8003260:	40012c00 	.word	0x40012c00
 8003264:	40014400 	.word	0x40014400
 8003268:	40014800 	.word	0x40014800
 800326c:	40000400 	.word	0x40000400
 8003270:	00010007 	.word	0x00010007

08003274 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	2202      	movs	r2, #2
 8003290:	4013      	ands	r3, r2
 8003292:	d021      	beq.n	80032d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2202      	movs	r2, #2
 8003298:	4013      	ands	r3, r2
 800329a:	d01d      	beq.n	80032d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2203      	movs	r2, #3
 80032a2:	4252      	negs	r2, r2
 80032a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	2203      	movs	r2, #3
 80032b4:	4013      	ands	r3, r2
 80032b6:	d004      	beq.n	80032c2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	0018      	movs	r0, r3
 80032bc:	f000 fa28 	bl	8003710 <HAL_TIM_IC_CaptureCallback>
 80032c0:	e007      	b.n	80032d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	0018      	movs	r0, r3
 80032c6:	f000 fa1b 	bl	8003700 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	0018      	movs	r0, r3
 80032ce:	f000 fa27 	bl	8003720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	2204      	movs	r2, #4
 80032dc:	4013      	ands	r3, r2
 80032de:	d022      	beq.n	8003326 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2204      	movs	r2, #4
 80032e4:	4013      	ands	r3, r2
 80032e6:	d01e      	beq.n	8003326 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2205      	movs	r2, #5
 80032ee:	4252      	negs	r2, r2
 80032f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2202      	movs	r2, #2
 80032f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	699a      	ldr	r2, [r3, #24]
 80032fe:	23c0      	movs	r3, #192	@ 0xc0
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4013      	ands	r3, r2
 8003304:	d004      	beq.n	8003310 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	0018      	movs	r0, r3
 800330a:	f000 fa01 	bl	8003710 <HAL_TIM_IC_CaptureCallback>
 800330e:	e007      	b.n	8003320 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	0018      	movs	r0, r3
 8003314:	f000 f9f4 	bl	8003700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	0018      	movs	r0, r3
 800331c:	f000 fa00 	bl	8003720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	2208      	movs	r2, #8
 800332a:	4013      	ands	r3, r2
 800332c:	d021      	beq.n	8003372 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2208      	movs	r2, #8
 8003332:	4013      	ands	r3, r2
 8003334:	d01d      	beq.n	8003372 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2209      	movs	r2, #9
 800333c:	4252      	negs	r2, r2
 800333e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2204      	movs	r2, #4
 8003344:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	69db      	ldr	r3, [r3, #28]
 800334c:	2203      	movs	r2, #3
 800334e:	4013      	ands	r3, r2
 8003350:	d004      	beq.n	800335c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	0018      	movs	r0, r3
 8003356:	f000 f9db 	bl	8003710 <HAL_TIM_IC_CaptureCallback>
 800335a:	e007      	b.n	800336c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	0018      	movs	r0, r3
 8003360:	f000 f9ce 	bl	8003700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	0018      	movs	r0, r3
 8003368:	f000 f9da 	bl	8003720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	2210      	movs	r2, #16
 8003376:	4013      	ands	r3, r2
 8003378:	d022      	beq.n	80033c0 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2210      	movs	r2, #16
 800337e:	4013      	ands	r3, r2
 8003380:	d01e      	beq.n	80033c0 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2211      	movs	r2, #17
 8003388:	4252      	negs	r2, r2
 800338a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2208      	movs	r2, #8
 8003390:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	69da      	ldr	r2, [r3, #28]
 8003398:	23c0      	movs	r3, #192	@ 0xc0
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4013      	ands	r3, r2
 800339e:	d004      	beq.n	80033aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	0018      	movs	r0, r3
 80033a4:	f000 f9b4 	bl	8003710 <HAL_TIM_IC_CaptureCallback>
 80033a8:	e007      	b.n	80033ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	0018      	movs	r0, r3
 80033ae:	f000 f9a7 	bl	8003700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	0018      	movs	r0, r3
 80033b6:	f000 f9b3 	bl	8003720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	2201      	movs	r2, #1
 80033c4:	4013      	ands	r3, r2
 80033c6:	d00c      	beq.n	80033e2 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2201      	movs	r2, #1
 80033cc:	4013      	ands	r3, r2
 80033ce:	d008      	beq.n	80033e2 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2202      	movs	r2, #2
 80033d6:	4252      	negs	r2, r2
 80033d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	0018      	movs	r0, r3
 80033de:	f000 f987 	bl	80036f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	2280      	movs	r2, #128	@ 0x80
 80033e6:	4013      	ands	r3, r2
 80033e8:	d104      	bne.n	80033f4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	2380      	movs	r3, #128	@ 0x80
 80033ee:	019b      	lsls	r3, r3, #6
 80033f0:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80033f2:	d00b      	beq.n	800340c <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2280      	movs	r2, #128	@ 0x80
 80033f8:	4013      	ands	r3, r2
 80033fa:	d007      	beq.n	800340c <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a1e      	ldr	r2, [pc, #120]	@ (800347c <HAL_TIM_IRQHandler+0x208>)
 8003402:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	0018      	movs	r0, r3
 8003408:	f000 fdda 	bl	8003fc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800340c:	68ba      	ldr	r2, [r7, #8]
 800340e:	2380      	movs	r3, #128	@ 0x80
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	4013      	ands	r3, r2
 8003414:	d00b      	beq.n	800342e <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2280      	movs	r2, #128	@ 0x80
 800341a:	4013      	ands	r3, r2
 800341c:	d007      	beq.n	800342e <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a17      	ldr	r2, [pc, #92]	@ (8003480 <HAL_TIM_IRQHandler+0x20c>)
 8003424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	0018      	movs	r0, r3
 800342a:	f000 fdd1 	bl	8003fd0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	2240      	movs	r2, #64	@ 0x40
 8003432:	4013      	ands	r3, r2
 8003434:	d00c      	beq.n	8003450 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2240      	movs	r2, #64	@ 0x40
 800343a:	4013      	ands	r3, r2
 800343c:	d008      	beq.n	8003450 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2241      	movs	r2, #65	@ 0x41
 8003444:	4252      	negs	r2, r2
 8003446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	0018      	movs	r0, r3
 800344c:	f000 f970 	bl	8003730 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	2220      	movs	r2, #32
 8003454:	4013      	ands	r3, r2
 8003456:	d00c      	beq.n	8003472 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2220      	movs	r2, #32
 800345c:	4013      	ands	r3, r2
 800345e:	d008      	beq.n	8003472 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2221      	movs	r2, #33	@ 0x21
 8003466:	4252      	negs	r2, r2
 8003468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	0018      	movs	r0, r3
 800346e:	f000 fd9f 	bl	8003fb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003472:	46c0      	nop			@ (mov r8, r8)
 8003474:	46bd      	mov	sp, r7
 8003476:	b004      	add	sp, #16
 8003478:	bd80      	pop	{r7, pc}
 800347a:	46c0      	nop			@ (mov r8, r8)
 800347c:	ffffdf7f 	.word	0xffffdf7f
 8003480:	fffffeff 	.word	0xfffffeff

08003484 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003490:	2317      	movs	r3, #23
 8003492:	18fb      	adds	r3, r7, r3
 8003494:	2200      	movs	r2, #0
 8003496:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	223c      	movs	r2, #60	@ 0x3c
 800349c:	5c9b      	ldrb	r3, [r3, r2]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d101      	bne.n	80034a6 <HAL_TIM_OC_ConfigChannel+0x22>
 80034a2:	2302      	movs	r3, #2
 80034a4:	e048      	b.n	8003538 <HAL_TIM_OC_ConfigChannel+0xb4>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	223c      	movs	r2, #60	@ 0x3c
 80034aa:	2101      	movs	r1, #1
 80034ac:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b14      	cmp	r3, #20
 80034b2:	d835      	bhi.n	8003520 <HAL_TIM_OC_ConfigChannel+0x9c>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	009a      	lsls	r2, r3, #2
 80034b8:	4b21      	ldr	r3, [pc, #132]	@ (8003540 <HAL_TIM_OC_ConfigChannel+0xbc>)
 80034ba:	18d3      	adds	r3, r2, r3
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68ba      	ldr	r2, [r7, #8]
 80034c6:	0011      	movs	r1, r2
 80034c8:	0018      	movs	r0, r3
 80034ca:	f000 f9b3 	bl	8003834 <TIM_OC1_SetConfig>
      break;
 80034ce:	e02c      	b.n	800352a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68ba      	ldr	r2, [r7, #8]
 80034d6:	0011      	movs	r1, r2
 80034d8:	0018      	movs	r0, r3
 80034da:	f000 fa2b 	bl	8003934 <TIM_OC2_SetConfig>
      break;
 80034de:	e024      	b.n	800352a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68ba      	ldr	r2, [r7, #8]
 80034e6:	0011      	movs	r1, r2
 80034e8:	0018      	movs	r0, r3
 80034ea:	f000 faa1 	bl	8003a30 <TIM_OC3_SetConfig>
      break;
 80034ee:	e01c      	b.n	800352a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68ba      	ldr	r2, [r7, #8]
 80034f6:	0011      	movs	r1, r2
 80034f8:	0018      	movs	r0, r3
 80034fa:	f000 fb1b 	bl	8003b34 <TIM_OC4_SetConfig>
      break;
 80034fe:	e014      	b.n	800352a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68ba      	ldr	r2, [r7, #8]
 8003506:	0011      	movs	r1, r2
 8003508:	0018      	movs	r0, r3
 800350a:	f000 fb77 	bl	8003bfc <TIM_OC5_SetConfig>
      break;
 800350e:	e00c      	b.n	800352a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68ba      	ldr	r2, [r7, #8]
 8003516:	0011      	movs	r1, r2
 8003518:	0018      	movs	r0, r3
 800351a:	f000 fbc9 	bl	8003cb0 <TIM_OC6_SetConfig>
      break;
 800351e:	e004      	b.n	800352a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003520:	2317      	movs	r3, #23
 8003522:	18fb      	adds	r3, r7, r3
 8003524:	2201      	movs	r2, #1
 8003526:	701a      	strb	r2, [r3, #0]
      break;
 8003528:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	223c      	movs	r2, #60	@ 0x3c
 800352e:	2100      	movs	r1, #0
 8003530:	5499      	strb	r1, [r3, r2]

  return status;
 8003532:	2317      	movs	r3, #23
 8003534:	18fb      	adds	r3, r7, r3
 8003536:	781b      	ldrb	r3, [r3, #0]
}
 8003538:	0018      	movs	r0, r3
 800353a:	46bd      	mov	sp, r7
 800353c:	b006      	add	sp, #24
 800353e:	bd80      	pop	{r7, pc}
 8003540:	080040b4 	.word	0x080040b4

08003544 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800354e:	230f      	movs	r3, #15
 8003550:	18fb      	adds	r3, r7, r3
 8003552:	2200      	movs	r2, #0
 8003554:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	223c      	movs	r2, #60	@ 0x3c
 800355a:	5c9b      	ldrb	r3, [r3, r2]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d101      	bne.n	8003564 <HAL_TIM_ConfigClockSource+0x20>
 8003560:	2302      	movs	r3, #2
 8003562:	e0bc      	b.n	80036de <HAL_TIM_ConfigClockSource+0x19a>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	223c      	movs	r2, #60	@ 0x3c
 8003568:	2101      	movs	r1, #1
 800356a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	223d      	movs	r2, #61	@ 0x3d
 8003570:	2102      	movs	r1, #2
 8003572:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	4a5a      	ldr	r2, [pc, #360]	@ (80036e8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003580:	4013      	ands	r3, r2
 8003582:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	4a59      	ldr	r2, [pc, #356]	@ (80036ec <HAL_TIM_ConfigClockSource+0x1a8>)
 8003588:	4013      	ands	r3, r2
 800358a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68ba      	ldr	r2, [r7, #8]
 8003592:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2280      	movs	r2, #128	@ 0x80
 800359a:	0192      	lsls	r2, r2, #6
 800359c:	4293      	cmp	r3, r2
 800359e:	d040      	beq.n	8003622 <HAL_TIM_ConfigClockSource+0xde>
 80035a0:	2280      	movs	r2, #128	@ 0x80
 80035a2:	0192      	lsls	r2, r2, #6
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d900      	bls.n	80035aa <HAL_TIM_ConfigClockSource+0x66>
 80035a8:	e088      	b.n	80036bc <HAL_TIM_ConfigClockSource+0x178>
 80035aa:	2280      	movs	r2, #128	@ 0x80
 80035ac:	0152      	lsls	r2, r2, #5
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d100      	bne.n	80035b4 <HAL_TIM_ConfigClockSource+0x70>
 80035b2:	e088      	b.n	80036c6 <HAL_TIM_ConfigClockSource+0x182>
 80035b4:	2280      	movs	r2, #128	@ 0x80
 80035b6:	0152      	lsls	r2, r2, #5
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d900      	bls.n	80035be <HAL_TIM_ConfigClockSource+0x7a>
 80035bc:	e07e      	b.n	80036bc <HAL_TIM_ConfigClockSource+0x178>
 80035be:	2b70      	cmp	r3, #112	@ 0x70
 80035c0:	d018      	beq.n	80035f4 <HAL_TIM_ConfigClockSource+0xb0>
 80035c2:	d900      	bls.n	80035c6 <HAL_TIM_ConfigClockSource+0x82>
 80035c4:	e07a      	b.n	80036bc <HAL_TIM_ConfigClockSource+0x178>
 80035c6:	2b60      	cmp	r3, #96	@ 0x60
 80035c8:	d04f      	beq.n	800366a <HAL_TIM_ConfigClockSource+0x126>
 80035ca:	d900      	bls.n	80035ce <HAL_TIM_ConfigClockSource+0x8a>
 80035cc:	e076      	b.n	80036bc <HAL_TIM_ConfigClockSource+0x178>
 80035ce:	2b50      	cmp	r3, #80	@ 0x50
 80035d0:	d03b      	beq.n	800364a <HAL_TIM_ConfigClockSource+0x106>
 80035d2:	d900      	bls.n	80035d6 <HAL_TIM_ConfigClockSource+0x92>
 80035d4:	e072      	b.n	80036bc <HAL_TIM_ConfigClockSource+0x178>
 80035d6:	2b40      	cmp	r3, #64	@ 0x40
 80035d8:	d057      	beq.n	800368a <HAL_TIM_ConfigClockSource+0x146>
 80035da:	d900      	bls.n	80035de <HAL_TIM_ConfigClockSource+0x9a>
 80035dc:	e06e      	b.n	80036bc <HAL_TIM_ConfigClockSource+0x178>
 80035de:	2b30      	cmp	r3, #48	@ 0x30
 80035e0:	d063      	beq.n	80036aa <HAL_TIM_ConfigClockSource+0x166>
 80035e2:	d86b      	bhi.n	80036bc <HAL_TIM_ConfigClockSource+0x178>
 80035e4:	2b20      	cmp	r3, #32
 80035e6:	d060      	beq.n	80036aa <HAL_TIM_ConfigClockSource+0x166>
 80035e8:	d868      	bhi.n	80036bc <HAL_TIM_ConfigClockSource+0x178>
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d05d      	beq.n	80036aa <HAL_TIM_ConfigClockSource+0x166>
 80035ee:	2b10      	cmp	r3, #16
 80035f0:	d05b      	beq.n	80036aa <HAL_TIM_ConfigClockSource+0x166>
 80035f2:	e063      	b.n	80036bc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003604:	f000 fc2e 	bl	8003e64 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	2277      	movs	r2, #119	@ 0x77
 8003614:	4313      	orrs	r3, r2
 8003616:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68ba      	ldr	r2, [r7, #8]
 800361e:	609a      	str	r2, [r3, #8]
      break;
 8003620:	e052      	b.n	80036c8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003632:	f000 fc17 	bl	8003e64 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2180      	movs	r1, #128	@ 0x80
 8003642:	01c9      	lsls	r1, r1, #7
 8003644:	430a      	orrs	r2, r1
 8003646:	609a      	str	r2, [r3, #8]
      break;
 8003648:	e03e      	b.n	80036c8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003656:	001a      	movs	r2, r3
 8003658:	f000 fb88 	bl	8003d6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2150      	movs	r1, #80	@ 0x50
 8003662:	0018      	movs	r0, r3
 8003664:	f000 fbe2 	bl	8003e2c <TIM_ITRx_SetConfig>
      break;
 8003668:	e02e      	b.n	80036c8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003676:	001a      	movs	r2, r3
 8003678:	f000 fba6 	bl	8003dc8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2160      	movs	r1, #96	@ 0x60
 8003682:	0018      	movs	r0, r3
 8003684:	f000 fbd2 	bl	8003e2c <TIM_ITRx_SetConfig>
      break;
 8003688:	e01e      	b.n	80036c8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003696:	001a      	movs	r2, r3
 8003698:	f000 fb68 	bl	8003d6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2140      	movs	r1, #64	@ 0x40
 80036a2:	0018      	movs	r0, r3
 80036a4:	f000 fbc2 	bl	8003e2c <TIM_ITRx_SetConfig>
      break;
 80036a8:	e00e      	b.n	80036c8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	0019      	movs	r1, r3
 80036b4:	0010      	movs	r0, r2
 80036b6:	f000 fbb9 	bl	8003e2c <TIM_ITRx_SetConfig>
      break;
 80036ba:	e005      	b.n	80036c8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80036bc:	230f      	movs	r3, #15
 80036be:	18fb      	adds	r3, r7, r3
 80036c0:	2201      	movs	r2, #1
 80036c2:	701a      	strb	r2, [r3, #0]
      break;
 80036c4:	e000      	b.n	80036c8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80036c6:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	223d      	movs	r2, #61	@ 0x3d
 80036cc:	2101      	movs	r1, #1
 80036ce:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	223c      	movs	r2, #60	@ 0x3c
 80036d4:	2100      	movs	r1, #0
 80036d6:	5499      	strb	r1, [r3, r2]

  return status;
 80036d8:	230f      	movs	r3, #15
 80036da:	18fb      	adds	r3, r7, r3
 80036dc:	781b      	ldrb	r3, [r3, #0]
}
 80036de:	0018      	movs	r0, r3
 80036e0:	46bd      	mov	sp, r7
 80036e2:	b004      	add	sp, #16
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	46c0      	nop			@ (mov r8, r8)
 80036e8:	ffceff88 	.word	0xffceff88
 80036ec:	ffff00ff 	.word	0xffff00ff

080036f0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80036f8:	46c0      	nop			@ (mov r8, r8)
 80036fa:	46bd      	mov	sp, r7
 80036fc:	b002      	add	sp, #8
 80036fe:	bd80      	pop	{r7, pc}

08003700 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003708:	46c0      	nop			@ (mov r8, r8)
 800370a:	46bd      	mov	sp, r7
 800370c:	b002      	add	sp, #8
 800370e:	bd80      	pop	{r7, pc}

08003710 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003718:	46c0      	nop			@ (mov r8, r8)
 800371a:	46bd      	mov	sp, r7
 800371c:	b002      	add	sp, #8
 800371e:	bd80      	pop	{r7, pc}

08003720 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003728:	46c0      	nop			@ (mov r8, r8)
 800372a:	46bd      	mov	sp, r7
 800372c:	b002      	add	sp, #8
 800372e:	bd80      	pop	{r7, pc}

08003730 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003738:	46c0      	nop			@ (mov r8, r8)
 800373a:	46bd      	mov	sp, r7
 800373c:	b002      	add	sp, #8
 800373e:	bd80      	pop	{r7, pc}

08003740 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a32      	ldr	r2, [pc, #200]	@ (800381c <TIM_Base_SetConfig+0xdc>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d003      	beq.n	8003760 <TIM_Base_SetConfig+0x20>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a31      	ldr	r2, [pc, #196]	@ (8003820 <TIM_Base_SetConfig+0xe0>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d108      	bne.n	8003772 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2270      	movs	r2, #112	@ 0x70
 8003764:	4393      	bics	r3, r2
 8003766:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	4313      	orrs	r3, r2
 8003770:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a29      	ldr	r2, [pc, #164]	@ (800381c <TIM_Base_SetConfig+0xdc>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d00f      	beq.n	800379a <TIM_Base_SetConfig+0x5a>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a28      	ldr	r2, [pc, #160]	@ (8003820 <TIM_Base_SetConfig+0xe0>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d00b      	beq.n	800379a <TIM_Base_SetConfig+0x5a>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a27      	ldr	r2, [pc, #156]	@ (8003824 <TIM_Base_SetConfig+0xe4>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d007      	beq.n	800379a <TIM_Base_SetConfig+0x5a>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a26      	ldr	r2, [pc, #152]	@ (8003828 <TIM_Base_SetConfig+0xe8>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d003      	beq.n	800379a <TIM_Base_SetConfig+0x5a>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a25      	ldr	r2, [pc, #148]	@ (800382c <TIM_Base_SetConfig+0xec>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d108      	bne.n	80037ac <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	4a24      	ldr	r2, [pc, #144]	@ (8003830 <TIM_Base_SetConfig+0xf0>)
 800379e:	4013      	ands	r3, r2
 80037a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2280      	movs	r2, #128	@ 0x80
 80037b0:	4393      	bics	r3, r2
 80037b2:	001a      	movs	r2, r3
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	695b      	ldr	r3, [r3, #20]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	689a      	ldr	r2, [r3, #8]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a11      	ldr	r2, [pc, #68]	@ (800381c <TIM_Base_SetConfig+0xdc>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d007      	beq.n	80037ea <TIM_Base_SetConfig+0xaa>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a12      	ldr	r2, [pc, #72]	@ (8003828 <TIM_Base_SetConfig+0xe8>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d003      	beq.n	80037ea <TIM_Base_SetConfig+0xaa>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a11      	ldr	r2, [pc, #68]	@ (800382c <TIM_Base_SetConfig+0xec>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d103      	bne.n	80037f2 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	691a      	ldr	r2, [r3, #16]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	2201      	movs	r2, #1
 80037fe:	4013      	ands	r3, r2
 8003800:	2b01      	cmp	r3, #1
 8003802:	d106      	bne.n	8003812 <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	2201      	movs	r2, #1
 800380a:	4393      	bics	r3, r2
 800380c:	001a      	movs	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	611a      	str	r2, [r3, #16]
  }
}
 8003812:	46c0      	nop			@ (mov r8, r8)
 8003814:	46bd      	mov	sp, r7
 8003816:	b004      	add	sp, #16
 8003818:	bd80      	pop	{r7, pc}
 800381a:	46c0      	nop			@ (mov r8, r8)
 800381c:	40012c00 	.word	0x40012c00
 8003820:	40000400 	.word	0x40000400
 8003824:	40002000 	.word	0x40002000
 8003828:	40014400 	.word	0x40014400
 800382c:	40014800 	.word	0x40014800
 8003830:	fffffcff 	.word	0xfffffcff

08003834 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	2201      	movs	r2, #1
 800384a:	4393      	bics	r3, r2
 800384c:	001a      	movs	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	4a2e      	ldr	r2, [pc, #184]	@ (800391c <TIM_OC1_SetConfig+0xe8>)
 8003862:	4013      	ands	r3, r2
 8003864:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2203      	movs	r2, #3
 800386a:	4393      	bics	r3, r2
 800386c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	4313      	orrs	r3, r2
 8003876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	2202      	movs	r2, #2
 800387c:	4393      	bics	r3, r2
 800387e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	4313      	orrs	r3, r2
 8003888:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a24      	ldr	r2, [pc, #144]	@ (8003920 <TIM_OC1_SetConfig+0xec>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d007      	beq.n	80038a2 <TIM_OC1_SetConfig+0x6e>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a23      	ldr	r2, [pc, #140]	@ (8003924 <TIM_OC1_SetConfig+0xf0>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d003      	beq.n	80038a2 <TIM_OC1_SetConfig+0x6e>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a22      	ldr	r2, [pc, #136]	@ (8003928 <TIM_OC1_SetConfig+0xf4>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d10c      	bne.n	80038bc <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	2208      	movs	r2, #8
 80038a6:	4393      	bics	r3, r2
 80038a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	2204      	movs	r2, #4
 80038b8:	4393      	bics	r3, r2
 80038ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a18      	ldr	r2, [pc, #96]	@ (8003920 <TIM_OC1_SetConfig+0xec>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d007      	beq.n	80038d4 <TIM_OC1_SetConfig+0xa0>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a17      	ldr	r2, [pc, #92]	@ (8003924 <TIM_OC1_SetConfig+0xf0>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d003      	beq.n	80038d4 <TIM_OC1_SetConfig+0xa0>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a16      	ldr	r2, [pc, #88]	@ (8003928 <TIM_OC1_SetConfig+0xf4>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d111      	bne.n	80038f8 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	4a15      	ldr	r2, [pc, #84]	@ (800392c <TIM_OC1_SetConfig+0xf8>)
 80038d8:	4013      	ands	r3, r2
 80038da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	4a14      	ldr	r2, [pc, #80]	@ (8003930 <TIM_OC1_SetConfig+0xfc>)
 80038e0:	4013      	ands	r3, r2
 80038e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	621a      	str	r2, [r3, #32]
}
 8003912:	46c0      	nop			@ (mov r8, r8)
 8003914:	46bd      	mov	sp, r7
 8003916:	b006      	add	sp, #24
 8003918:	bd80      	pop	{r7, pc}
 800391a:	46c0      	nop			@ (mov r8, r8)
 800391c:	fffeff8f 	.word	0xfffeff8f
 8003920:	40012c00 	.word	0x40012c00
 8003924:	40014400 	.word	0x40014400
 8003928:	40014800 	.word	0x40014800
 800392c:	fffffeff 	.word	0xfffffeff
 8003930:	fffffdff 	.word	0xfffffdff

08003934 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a1b      	ldr	r3, [r3, #32]
 8003948:	2210      	movs	r2, #16
 800394a:	4393      	bics	r3, r2
 800394c:	001a      	movs	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	4a2c      	ldr	r2, [pc, #176]	@ (8003a14 <TIM_OC2_SetConfig+0xe0>)
 8003962:	4013      	ands	r3, r2
 8003964:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	4a2b      	ldr	r2, [pc, #172]	@ (8003a18 <TIM_OC2_SetConfig+0xe4>)
 800396a:	4013      	ands	r3, r2
 800396c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	021b      	lsls	r3, r3, #8
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	4313      	orrs	r3, r2
 8003978:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	2220      	movs	r2, #32
 800397e:	4393      	bics	r3, r2
 8003980:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	4313      	orrs	r3, r2
 800398c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a22      	ldr	r2, [pc, #136]	@ (8003a1c <TIM_OC2_SetConfig+0xe8>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d10d      	bne.n	80039b2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	2280      	movs	r2, #128	@ 0x80
 800399a:	4393      	bics	r3, r2
 800399c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	011b      	lsls	r3, r3, #4
 80039a4:	697a      	ldr	r2, [r7, #20]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	2240      	movs	r2, #64	@ 0x40
 80039ae:	4393      	bics	r3, r2
 80039b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a19      	ldr	r2, [pc, #100]	@ (8003a1c <TIM_OC2_SetConfig+0xe8>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d007      	beq.n	80039ca <TIM_OC2_SetConfig+0x96>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a18      	ldr	r2, [pc, #96]	@ (8003a20 <TIM_OC2_SetConfig+0xec>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d003      	beq.n	80039ca <TIM_OC2_SetConfig+0x96>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a17      	ldr	r2, [pc, #92]	@ (8003a24 <TIM_OC2_SetConfig+0xf0>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d113      	bne.n	80039f2 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	4a16      	ldr	r2, [pc, #88]	@ (8003a28 <TIM_OC2_SetConfig+0xf4>)
 80039ce:	4013      	ands	r3, r2
 80039d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	4a15      	ldr	r2, [pc, #84]	@ (8003a2c <TIM_OC2_SetConfig+0xf8>)
 80039d6:	4013      	ands	r3, r2
 80039d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	697a      	ldr	r2, [r7, #20]
 8003a0a:	621a      	str	r2, [r3, #32]
}
 8003a0c:	46c0      	nop			@ (mov r8, r8)
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	b006      	add	sp, #24
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	feff8fff 	.word	0xfeff8fff
 8003a18:	fffffcff 	.word	0xfffffcff
 8003a1c:	40012c00 	.word	0x40012c00
 8003a20:	40014400 	.word	0x40014400
 8003a24:	40014800 	.word	0x40014800
 8003a28:	fffffbff 	.word	0xfffffbff
 8003a2c:	fffff7ff 	.word	0xfffff7ff

08003a30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	4a31      	ldr	r2, [pc, #196]	@ (8003b0c <TIM_OC3_SetConfig+0xdc>)
 8003a46:	401a      	ands	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	69db      	ldr	r3, [r3, #28]
 8003a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	4a2d      	ldr	r2, [pc, #180]	@ (8003b10 <TIM_OC3_SetConfig+0xe0>)
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2203      	movs	r2, #3
 8003a64:	4393      	bics	r3, r2
 8003a66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	4a27      	ldr	r2, [pc, #156]	@ (8003b14 <TIM_OC3_SetConfig+0xe4>)
 8003a76:	4013      	ands	r3, r2
 8003a78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	021b      	lsls	r3, r3, #8
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a23      	ldr	r2, [pc, #140]	@ (8003b18 <TIM_OC3_SetConfig+0xe8>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d10d      	bne.n	8003aaa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	4a22      	ldr	r2, [pc, #136]	@ (8003b1c <TIM_OC3_SetConfig+0xec>)
 8003a92:	4013      	ands	r3, r2
 8003a94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	021b      	lsls	r3, r3, #8
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	4a1e      	ldr	r2, [pc, #120]	@ (8003b20 <TIM_OC3_SetConfig+0xf0>)
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a1a      	ldr	r2, [pc, #104]	@ (8003b18 <TIM_OC3_SetConfig+0xe8>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d007      	beq.n	8003ac2 <TIM_OC3_SetConfig+0x92>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a1b      	ldr	r2, [pc, #108]	@ (8003b24 <TIM_OC3_SetConfig+0xf4>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d003      	beq.n	8003ac2 <TIM_OC3_SetConfig+0x92>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a1a      	ldr	r2, [pc, #104]	@ (8003b28 <TIM_OC3_SetConfig+0xf8>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d113      	bne.n	8003aea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	4a19      	ldr	r2, [pc, #100]	@ (8003b2c <TIM_OC3_SetConfig+0xfc>)
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	4a18      	ldr	r2, [pc, #96]	@ (8003b30 <TIM_OC3_SetConfig+0x100>)
 8003ace:	4013      	ands	r3, r2
 8003ad0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	011b      	lsls	r3, r3, #4
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	011b      	lsls	r3, r3, #4
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	621a      	str	r2, [r3, #32]
}
 8003b04:	46c0      	nop			@ (mov r8, r8)
 8003b06:	46bd      	mov	sp, r7
 8003b08:	b006      	add	sp, #24
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	fffffeff 	.word	0xfffffeff
 8003b10:	fffeff8f 	.word	0xfffeff8f
 8003b14:	fffffdff 	.word	0xfffffdff
 8003b18:	40012c00 	.word	0x40012c00
 8003b1c:	fffff7ff 	.word	0xfffff7ff
 8003b20:	fffffbff 	.word	0xfffffbff
 8003b24:	40014400 	.word	0x40014400
 8003b28:	40014800 	.word	0x40014800
 8003b2c:	ffffefff 	.word	0xffffefff
 8003b30:	ffffdfff 	.word	0xffffdfff

08003b34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a1b      	ldr	r3, [r3, #32]
 8003b48:	4a24      	ldr	r2, [pc, #144]	@ (8003bdc <TIM_OC4_SetConfig+0xa8>)
 8003b4a:	401a      	ands	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	4a20      	ldr	r2, [pc, #128]	@ (8003be0 <TIM_OC4_SetConfig+0xac>)
 8003b60:	4013      	ands	r3, r2
 8003b62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	4a1f      	ldr	r2, [pc, #124]	@ (8003be4 <TIM_OC4_SetConfig+0xb0>)
 8003b68:	4013      	ands	r3, r2
 8003b6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	021b      	lsls	r3, r3, #8
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	4a1b      	ldr	r2, [pc, #108]	@ (8003be8 <TIM_OC4_SetConfig+0xb4>)
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	031b      	lsls	r3, r3, #12
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a17      	ldr	r2, [pc, #92]	@ (8003bec <TIM_OC4_SetConfig+0xb8>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d007      	beq.n	8003ba4 <TIM_OC4_SetConfig+0x70>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a16      	ldr	r2, [pc, #88]	@ (8003bf0 <TIM_OC4_SetConfig+0xbc>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d003      	beq.n	8003ba4 <TIM_OC4_SetConfig+0x70>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a15      	ldr	r2, [pc, #84]	@ (8003bf4 <TIM_OC4_SetConfig+0xc0>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d109      	bne.n	8003bb8 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	4a14      	ldr	r2, [pc, #80]	@ (8003bf8 <TIM_OC4_SetConfig+0xc4>)
 8003ba8:	4013      	ands	r3, r2
 8003baa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	019b      	lsls	r3, r3, #6
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	621a      	str	r2, [r3, #32]
}
 8003bd2:	46c0      	nop			@ (mov r8, r8)
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	b006      	add	sp, #24
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	46c0      	nop			@ (mov r8, r8)
 8003bdc:	ffffefff 	.word	0xffffefff
 8003be0:	feff8fff 	.word	0xfeff8fff
 8003be4:	fffffcff 	.word	0xfffffcff
 8003be8:	ffffdfff 	.word	0xffffdfff
 8003bec:	40012c00 	.word	0x40012c00
 8003bf0:	40014400 	.word	0x40014400
 8003bf4:	40014800 	.word	0x40014800
 8003bf8:	ffffbfff 	.word	0xffffbfff

08003bfc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a1b      	ldr	r3, [r3, #32]
 8003c10:	4a21      	ldr	r2, [pc, #132]	@ (8003c98 <TIM_OC5_SetConfig+0x9c>)
 8003c12:	401a      	ands	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	4a1d      	ldr	r2, [pc, #116]	@ (8003c9c <TIM_OC5_SetConfig+0xa0>)
 8003c28:	4013      	ands	r3, r2
 8003c2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	4a19      	ldr	r2, [pc, #100]	@ (8003ca0 <TIM_OC5_SetConfig+0xa4>)
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	041b      	lsls	r3, r3, #16
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a15      	ldr	r2, [pc, #84]	@ (8003ca4 <TIM_OC5_SetConfig+0xa8>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d007      	beq.n	8003c62 <TIM_OC5_SetConfig+0x66>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a14      	ldr	r2, [pc, #80]	@ (8003ca8 <TIM_OC5_SetConfig+0xac>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d003      	beq.n	8003c62 <TIM_OC5_SetConfig+0x66>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a13      	ldr	r2, [pc, #76]	@ (8003cac <TIM_OC5_SetConfig+0xb0>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d109      	bne.n	8003c76 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	4a0c      	ldr	r2, [pc, #48]	@ (8003c98 <TIM_OC5_SetConfig+0x9c>)
 8003c66:	4013      	ands	r3, r2
 8003c68:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	021b      	lsls	r3, r3, #8
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	685a      	ldr	r2, [r3, #4]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	621a      	str	r2, [r3, #32]
}
 8003c90:	46c0      	nop			@ (mov r8, r8)
 8003c92:	46bd      	mov	sp, r7
 8003c94:	b006      	add	sp, #24
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	fffeffff 	.word	0xfffeffff
 8003c9c:	fffeff8f 	.word	0xfffeff8f
 8003ca0:	fffdffff 	.word	0xfffdffff
 8003ca4:	40012c00 	.word	0x40012c00
 8003ca8:	40014400 	.word	0x40014400
 8003cac:	40014800 	.word	0x40014800

08003cb0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b086      	sub	sp, #24
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	4a22      	ldr	r2, [pc, #136]	@ (8003d50 <TIM_OC6_SetConfig+0xa0>)
 8003cc6:	401a      	ands	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	4a1e      	ldr	r2, [pc, #120]	@ (8003d54 <TIM_OC6_SetConfig+0xa4>)
 8003cdc:	4013      	ands	r3, r2
 8003cde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	021b      	lsls	r3, r3, #8
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	4a1a      	ldr	r2, [pc, #104]	@ (8003d58 <TIM_OC6_SetConfig+0xa8>)
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	051b      	lsls	r3, r3, #20
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a16      	ldr	r2, [pc, #88]	@ (8003d5c <TIM_OC6_SetConfig+0xac>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d007      	beq.n	8003d18 <TIM_OC6_SetConfig+0x68>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a15      	ldr	r2, [pc, #84]	@ (8003d60 <TIM_OC6_SetConfig+0xb0>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d003      	beq.n	8003d18 <TIM_OC6_SetConfig+0x68>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a14      	ldr	r2, [pc, #80]	@ (8003d64 <TIM_OC6_SetConfig+0xb4>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d109      	bne.n	8003d2c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	4a13      	ldr	r2, [pc, #76]	@ (8003d68 <TIM_OC6_SetConfig+0xb8>)
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	695b      	ldr	r3, [r3, #20]
 8003d24:	029b      	lsls	r3, r3, #10
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685a      	ldr	r2, [r3, #4]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	621a      	str	r2, [r3, #32]
}
 8003d46:	46c0      	nop			@ (mov r8, r8)
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	b006      	add	sp, #24
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	46c0      	nop			@ (mov r8, r8)
 8003d50:	ffefffff 	.word	0xffefffff
 8003d54:	feff8fff 	.word	0xfeff8fff
 8003d58:	ffdfffff 	.word	0xffdfffff
 8003d5c:	40012c00 	.word	0x40012c00
 8003d60:	40014400 	.word	0x40014400
 8003d64:	40014800 	.word	0x40014800
 8003d68:	fffbffff 	.word	0xfffbffff

08003d6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	2201      	movs	r2, #1
 8003d84:	4393      	bics	r3, r2
 8003d86:	001a      	movs	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	22f0      	movs	r2, #240	@ 0xf0
 8003d96:	4393      	bics	r3, r2
 8003d98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	011b      	lsls	r3, r3, #4
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	220a      	movs	r2, #10
 8003da8:	4393      	bics	r3, r2
 8003daa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	621a      	str	r2, [r3, #32]
}
 8003dc0:	46c0      	nop			@ (mov r8, r8)
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	b006      	add	sp, #24
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6a1b      	ldr	r3, [r3, #32]
 8003dd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	2210      	movs	r2, #16
 8003de0:	4393      	bics	r3, r2
 8003de2:	001a      	movs	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	4a0d      	ldr	r2, [pc, #52]	@ (8003e28 <TIM_TI2_ConfigInputStage+0x60>)
 8003df2:	4013      	ands	r3, r2
 8003df4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	031b      	lsls	r3, r3, #12
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	22a0      	movs	r2, #160	@ 0xa0
 8003e04:	4393      	bics	r3, r2
 8003e06:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	011b      	lsls	r3, r3, #4
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	621a      	str	r2, [r3, #32]
}
 8003e1e:	46c0      	nop			@ (mov r8, r8)
 8003e20:	46bd      	mov	sp, r7
 8003e22:	b006      	add	sp, #24
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	46c0      	nop			@ (mov r8, r8)
 8003e28:	ffff0fff 	.word	0xffff0fff

08003e2c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	4a08      	ldr	r2, [pc, #32]	@ (8003e60 <TIM_ITRx_SetConfig+0x34>)
 8003e40:	4013      	ands	r3, r2
 8003e42:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e44:	683a      	ldr	r2, [r7, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	2207      	movs	r2, #7
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	609a      	str	r2, [r3, #8]
}
 8003e56:	46c0      	nop			@ (mov r8, r8)
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	b004      	add	sp, #16
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	46c0      	nop			@ (mov r8, r8)
 8003e60:	ffcfff8f 	.word	0xffcfff8f

08003e64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
 8003e70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	4a09      	ldr	r2, [pc, #36]	@ (8003ea0 <TIM_ETR_SetConfig+0x3c>)
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	021a      	lsls	r2, r3, #8
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	431a      	orrs	r2, r3
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	697a      	ldr	r2, [r7, #20]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	609a      	str	r2, [r3, #8]
}
 8003e98:	46c0      	nop			@ (mov r8, r8)
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	b006      	add	sp, #24
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	ffff00ff 	.word	0xffff00ff

08003ea4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	221f      	movs	r2, #31
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	409a      	lsls	r2, r3
 8003eba:	0013      	movs	r3, r2
 8003ebc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	43d2      	mvns	r2, r2
 8003ec6:	401a      	ands	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6a1a      	ldr	r2, [r3, #32]
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	211f      	movs	r1, #31
 8003ed4:	400b      	ands	r3, r1
 8003ed6:	6879      	ldr	r1, [r7, #4]
 8003ed8:	4099      	lsls	r1, r3
 8003eda:	000b      	movs	r3, r1
 8003edc:	431a      	orrs	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	621a      	str	r2, [r3, #32]
}
 8003ee2:	46c0      	nop			@ (mov r8, r8)
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	b006      	add	sp, #24
 8003ee8:	bd80      	pop	{r7, pc}
	...

08003eec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	223c      	movs	r2, #60	@ 0x3c
 8003efa:	5c9b      	ldrb	r3, [r3, r2]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d101      	bne.n	8003f04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f00:	2302      	movs	r3, #2
 8003f02:	e04a      	b.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	223c      	movs	r2, #60	@ 0x3c
 8003f08:	2101      	movs	r1, #1
 8003f0a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	223d      	movs	r2, #61	@ 0x3d
 8003f10:	2102      	movs	r1, #2
 8003f12:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a1e      	ldr	r2, [pc, #120]	@ (8003fa4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d108      	bne.n	8003f40 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	4a1d      	ldr	r2, [pc, #116]	@ (8003fa8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8003f32:	4013      	ands	r3, r2
 8003f34:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2270      	movs	r2, #112	@ 0x70
 8003f44:	4393      	bics	r3, r2
 8003f46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a11      	ldr	r2, [pc, #68]	@ (8003fa4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d004      	beq.n	8003f6e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a10      	ldr	r2, [pc, #64]	@ (8003fac <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d10c      	bne.n	8003f88 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	2280      	movs	r2, #128	@ 0x80
 8003f72:	4393      	bics	r3, r2
 8003f74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68ba      	ldr	r2, [r7, #8]
 8003f86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	223d      	movs	r2, #61	@ 0x3d
 8003f8c:	2101      	movs	r1, #1
 8003f8e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	223c      	movs	r2, #60	@ 0x3c
 8003f94:	2100      	movs	r1, #0
 8003f96:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	0018      	movs	r0, r3
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	b004      	add	sp, #16
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	46c0      	nop			@ (mov r8, r8)
 8003fa4:	40012c00 	.word	0x40012c00
 8003fa8:	ff0fffff 	.word	0xff0fffff
 8003fac:	40000400 	.word	0x40000400

08003fb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fb8:	46c0      	nop			@ (mov r8, r8)
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	b002      	add	sp, #8
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fc8:	46c0      	nop			@ (mov r8, r8)
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	b002      	add	sp, #8
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003fd8:	46c0      	nop			@ (mov r8, r8)
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	b002      	add	sp, #8
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <memset>:
 8003fe0:	0003      	movs	r3, r0
 8003fe2:	1882      	adds	r2, r0, r2
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d100      	bne.n	8003fea <memset+0xa>
 8003fe8:	4770      	bx	lr
 8003fea:	7019      	strb	r1, [r3, #0]
 8003fec:	3301      	adds	r3, #1
 8003fee:	e7f9      	b.n	8003fe4 <memset+0x4>

08003ff0 <__libc_init_array>:
 8003ff0:	b570      	push	{r4, r5, r6, lr}
 8003ff2:	2600      	movs	r6, #0
 8003ff4:	4c0c      	ldr	r4, [pc, #48]	@ (8004028 <__libc_init_array+0x38>)
 8003ff6:	4d0d      	ldr	r5, [pc, #52]	@ (800402c <__libc_init_array+0x3c>)
 8003ff8:	1b64      	subs	r4, r4, r5
 8003ffa:	10a4      	asrs	r4, r4, #2
 8003ffc:	42a6      	cmp	r6, r4
 8003ffe:	d109      	bne.n	8004014 <__libc_init_array+0x24>
 8004000:	2600      	movs	r6, #0
 8004002:	f000 f819 	bl	8004038 <_init>
 8004006:	4c0a      	ldr	r4, [pc, #40]	@ (8004030 <__libc_init_array+0x40>)
 8004008:	4d0a      	ldr	r5, [pc, #40]	@ (8004034 <__libc_init_array+0x44>)
 800400a:	1b64      	subs	r4, r4, r5
 800400c:	10a4      	asrs	r4, r4, #2
 800400e:	42a6      	cmp	r6, r4
 8004010:	d105      	bne.n	800401e <__libc_init_array+0x2e>
 8004012:	bd70      	pop	{r4, r5, r6, pc}
 8004014:	00b3      	lsls	r3, r6, #2
 8004016:	58eb      	ldr	r3, [r5, r3]
 8004018:	4798      	blx	r3
 800401a:	3601      	adds	r6, #1
 800401c:	e7ee      	b.n	8003ffc <__libc_init_array+0xc>
 800401e:	00b3      	lsls	r3, r6, #2
 8004020:	58eb      	ldr	r3, [r5, r3]
 8004022:	4798      	blx	r3
 8004024:	3601      	adds	r6, #1
 8004026:	e7f2      	b.n	800400e <__libc_init_array+0x1e>
 8004028:	08004108 	.word	0x08004108
 800402c:	08004108 	.word	0x08004108
 8004030:	0800410c 	.word	0x0800410c
 8004034:	08004108 	.word	0x08004108

08004038 <_init>:
 8004038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800403a:	46c0      	nop			@ (mov r8, r8)
 800403c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800403e:	bc08      	pop	{r3}
 8004040:	469e      	mov	lr, r3
 8004042:	4770      	bx	lr

08004044 <_fini>:
 8004044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004046:	46c0      	nop			@ (mov r8, r8)
 8004048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800404a:	bc08      	pop	{r3}
 800404c:	469e      	mov	lr, r3
 800404e:	4770      	bx	lr
