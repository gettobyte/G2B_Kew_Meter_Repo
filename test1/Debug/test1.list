
test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056c4  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  0800577c  0800577c  0000677c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058b8  080058b8  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080058b8  080058b8  0000705c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080058b8  080058b8  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058b8  080058b8  000068b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080058bc  080058bc  000068bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080058c0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000354  2000005c  0800591c  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b0  0800591c  000073b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ae3  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024d9  00000000  00000000  00018b67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  0001b040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c3f  00000000  00000000  0001bfd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000161c9  00000000  00000000  0001cc0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012a13  00000000  00000000  00032dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009394a  00000000  00000000  000457eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d9135  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003db0  00000000  00000000  000d9178  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000dcf28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000005c 	.word	0x2000005c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08005764 	.word	0x08005764

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000060 	.word	0x20000060
 80000fc:	08005764 	.word	0x08005764

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	@ 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	@ 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	@ 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			@ (mov r8, r8)

08000400 <ADC_Convert_Rank1>:
        value /= 10;
    }
}

uint16_t ADC_Convert_Rank1(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b084      	sub	sp, #16
 8000404:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	0018      	movs	r0, r3
 800040a:	230c      	movs	r3, #12
 800040c:	001a      	movs	r2, r3
 800040e:	2100      	movs	r1, #0
 8000410:	f004 fd2e 	bl	8004e70 <memset>

	  sConfig.Channel = ADC_CHANNEL_0;
 8000414:	1d3b      	adds	r3, r7, #4
 8000416:	2201      	movs	r2, #1
 8000418:	601a      	str	r2, [r3, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 800041a:	1d3b      	adds	r3, r7, #4
 800041c:	2200      	movs	r2, #0
 800041e:	605a      	str	r2, [r3, #4]
	  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000420:	1d3b      	adds	r3, r7, #4
 8000422:	2200      	movs	r2, #0
 8000424:	609a      	str	r2, [r3, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000426:	1d3a      	adds	r2, r7, #4
 8000428:	4b16      	ldr	r3, [pc, #88]	@ (8000484 <ADC_Convert_Rank1+0x84>)
 800042a:	0011      	movs	r1, r2
 800042c:	0018      	movs	r0, r3
 800042e:	f001 fb35 	bl	8001a9c <HAL_ADC_ConfigChannel>
 8000432:	1e03      	subs	r3, r0, #0
 8000434:	d001      	beq.n	800043a <ADC_Convert_Rank1+0x3a>
	  {
	    Error_Handler();
 8000436:	f000 fbbb 	bl	8000bb0 <Error_Handler>
	  }

	status = HAL_ADC_Start(&hadc1);
 800043a:	4b12      	ldr	r3, [pc, #72]	@ (8000484 <ADC_Convert_Rank1+0x84>)
 800043c:	0018      	movs	r0, r3
 800043e:	f001 fa03 	bl	8001848 <HAL_ADC_Start>
 8000442:	0003      	movs	r3, r0
 8000444:	001a      	movs	r2, r3
 8000446:	4b10      	ldr	r3, [pc, #64]	@ (8000488 <ADC_Convert_Rank1+0x88>)
 8000448:	701a      	strb	r2, [r3, #0]
	status = HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800044a:	2301      	movs	r3, #1
 800044c:	425a      	negs	r2, r3
 800044e:	4b0d      	ldr	r3, [pc, #52]	@ (8000484 <ADC_Convert_Rank1+0x84>)
 8000450:	0011      	movs	r1, r2
 8000452:	0018      	movs	r0, r3
 8000454:	f001 fa82 	bl	800195c <HAL_ADC_PollForConversion>
 8000458:	0003      	movs	r3, r0
 800045a:	001a      	movs	r2, r3
 800045c:	4b0a      	ldr	r3, [pc, #40]	@ (8000488 <ADC_Convert_Rank1+0x88>)
 800045e:	701a      	strb	r2, [r3, #0]
	adc_Value_1 = HAL_ADC_GetValue(&hadc1);
 8000460:	4b08      	ldr	r3, [pc, #32]	@ (8000484 <ADC_Convert_Rank1+0x84>)
 8000462:	0018      	movs	r0, r3
 8000464:	f001 fb0e 	bl	8001a84 <HAL_ADC_GetValue>
 8000468:	0003      	movs	r3, r0
 800046a:	b29a      	uxth	r2, r3
 800046c:	4b07      	ldr	r3, [pc, #28]	@ (800048c <ADC_Convert_Rank1+0x8c>)
 800046e:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 8000470:	4b04      	ldr	r3, [pc, #16]	@ (8000484 <ADC_Convert_Rank1+0x84>)
 8000472:	0018      	movs	r0, r3
 8000474:	f001 fa36 	bl	80018e4 <HAL_ADC_Stop>

	return adc_Value_1;
 8000478:	4b04      	ldr	r3, [pc, #16]	@ (800048c <ADC_Convert_Rank1+0x8c>)
 800047a:	881b      	ldrh	r3, [r3, #0]
}
 800047c:	0018      	movs	r0, r3
 800047e:	46bd      	mov	sp, r7
 8000480:	b004      	add	sp, #16
 8000482:	bd80      	pop	{r7, pc}
 8000484:	20000078 	.word	0x20000078
 8000488:	200001bc 	.word	0x200001bc
 800048c:	200001c8 	.word	0x200001c8

08000490 <ADC_Convert_Rank2>:

uint16_t ADC_Convert_Rank2(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b084      	sub	sp, #16
 8000494:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	0018      	movs	r0, r3
 800049a:	230c      	movs	r3, #12
 800049c:	001a      	movs	r2, r3
 800049e:	2100      	movs	r1, #0
 80004a0:	f004 fce6 	bl	8004e70 <memset>

	  sConfig.Channel = ADC_CHANNEL_1;
 80004a4:	1d3b      	adds	r3, r7, #4
 80004a6:	4a1a      	ldr	r2, [pc, #104]	@ (8000510 <ADC_Convert_Rank2+0x80>)
 80004a8:	601a      	str	r2, [r3, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004aa:	1d3b      	adds	r3, r7, #4
 80004ac:	2200      	movs	r2, #0
 80004ae:	605a      	str	r2, [r3, #4]
	  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80004b0:	1d3b      	adds	r3, r7, #4
 80004b2:	2200      	movs	r2, #0
 80004b4:	609a      	str	r2, [r3, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004b6:	1d3a      	adds	r2, r7, #4
 80004b8:	4b16      	ldr	r3, [pc, #88]	@ (8000514 <ADC_Convert_Rank2+0x84>)
 80004ba:	0011      	movs	r1, r2
 80004bc:	0018      	movs	r0, r3
 80004be:	f001 faed 	bl	8001a9c <HAL_ADC_ConfigChannel>
 80004c2:	1e03      	subs	r3, r0, #0
 80004c4:	d001      	beq.n	80004ca <ADC_Convert_Rank2+0x3a>
	  {
	    Error_Handler();
 80004c6:	f000 fb73 	bl	8000bb0 <Error_Handler>
	  }

	status = HAL_ADC_Start(&hadc1);
 80004ca:	4b12      	ldr	r3, [pc, #72]	@ (8000514 <ADC_Convert_Rank2+0x84>)
 80004cc:	0018      	movs	r0, r3
 80004ce:	f001 f9bb 	bl	8001848 <HAL_ADC_Start>
 80004d2:	0003      	movs	r3, r0
 80004d4:	001a      	movs	r2, r3
 80004d6:	4b10      	ldr	r3, [pc, #64]	@ (8000518 <ADC_Convert_Rank2+0x88>)
 80004d8:	701a      	strb	r2, [r3, #0]
	status = HAL_ADC_PollForConversion(&hadc1, 1);
 80004da:	4b0e      	ldr	r3, [pc, #56]	@ (8000514 <ADC_Convert_Rank2+0x84>)
 80004dc:	2101      	movs	r1, #1
 80004de:	0018      	movs	r0, r3
 80004e0:	f001 fa3c 	bl	800195c <HAL_ADC_PollForConversion>
 80004e4:	0003      	movs	r3, r0
 80004e6:	001a      	movs	r2, r3
 80004e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000518 <ADC_Convert_Rank2+0x88>)
 80004ea:	701a      	strb	r2, [r3, #0]
	adc_Value_2= HAL_ADC_GetValue(&hadc1);
 80004ec:	4b09      	ldr	r3, [pc, #36]	@ (8000514 <ADC_Convert_Rank2+0x84>)
 80004ee:	0018      	movs	r0, r3
 80004f0:	f001 fac8 	bl	8001a84 <HAL_ADC_GetValue>
 80004f4:	0003      	movs	r3, r0
 80004f6:	b29a      	uxth	r2, r3
 80004f8:	4b08      	ldr	r3, [pc, #32]	@ (800051c <ADC_Convert_Rank2+0x8c>)
 80004fa:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 80004fc:	4b05      	ldr	r3, [pc, #20]	@ (8000514 <ADC_Convert_Rank2+0x84>)
 80004fe:	0018      	movs	r0, r3
 8000500:	f001 f9f0 	bl	80018e4 <HAL_ADC_Stop>

	return adc_Value_2;
 8000504:	4b05      	ldr	r3, [pc, #20]	@ (800051c <ADC_Convert_Rank2+0x8c>)
 8000506:	881b      	ldrh	r3, [r3, #0]
}
 8000508:	0018      	movs	r0, r3
 800050a:	46bd      	mov	sp, r7
 800050c:	b004      	add	sp, #16
 800050e:	bd80      	pop	{r7, pc}
 8000510:	04000002 	.word	0x04000002
 8000514:	20000078 	.word	0x20000078
 8000518:	200001bc 	.word	0x200001bc
 800051c:	200001ca 	.word	0x200001ca

08000520 <ADC_Convert_Rank3>:

uint16_t ADC_Convert_Rank3(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000526:	1d3b      	adds	r3, r7, #4
 8000528:	0018      	movs	r0, r3
 800052a:	230c      	movs	r3, #12
 800052c:	001a      	movs	r2, r3
 800052e:	2100      	movs	r1, #0
 8000530:	f004 fc9e 	bl	8004e70 <memset>

	  sConfig.Channel = ADC_CHANNEL_2;
 8000534:	1d3b      	adds	r3, r7, #4
 8000536:	4a1a      	ldr	r2, [pc, #104]	@ (80005a0 <ADC_Convert_Rank3+0x80>)
 8000538:	601a      	str	r2, [r3, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	2200      	movs	r2, #0
 800053e:	605a      	str	r2, [r3, #4]
	  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000540:	1d3b      	adds	r3, r7, #4
 8000542:	2200      	movs	r2, #0
 8000544:	609a      	str	r2, [r3, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000546:	1d3a      	adds	r2, r7, #4
 8000548:	4b16      	ldr	r3, [pc, #88]	@ (80005a4 <ADC_Convert_Rank3+0x84>)
 800054a:	0011      	movs	r1, r2
 800054c:	0018      	movs	r0, r3
 800054e:	f001 faa5 	bl	8001a9c <HAL_ADC_ConfigChannel>
 8000552:	1e03      	subs	r3, r0, #0
 8000554:	d001      	beq.n	800055a <ADC_Convert_Rank3+0x3a>
	  {
	    Error_Handler();
 8000556:	f000 fb2b 	bl	8000bb0 <Error_Handler>
	  }

	status = HAL_ADC_Start(&hadc1);
 800055a:	4b12      	ldr	r3, [pc, #72]	@ (80005a4 <ADC_Convert_Rank3+0x84>)
 800055c:	0018      	movs	r0, r3
 800055e:	f001 f973 	bl	8001848 <HAL_ADC_Start>
 8000562:	0003      	movs	r3, r0
 8000564:	001a      	movs	r2, r3
 8000566:	4b10      	ldr	r3, [pc, #64]	@ (80005a8 <ADC_Convert_Rank3+0x88>)
 8000568:	701a      	strb	r2, [r3, #0]
	status = HAL_ADC_PollForConversion(&hadc1, 1);
 800056a:	4b0e      	ldr	r3, [pc, #56]	@ (80005a4 <ADC_Convert_Rank3+0x84>)
 800056c:	2101      	movs	r1, #1
 800056e:	0018      	movs	r0, r3
 8000570:	f001 f9f4 	bl	800195c <HAL_ADC_PollForConversion>
 8000574:	0003      	movs	r3, r0
 8000576:	001a      	movs	r2, r3
 8000578:	4b0b      	ldr	r3, [pc, #44]	@ (80005a8 <ADC_Convert_Rank3+0x88>)
 800057a:	701a      	strb	r2, [r3, #0]
	adc_Value_2= HAL_ADC_GetValue(&hadc1);
 800057c:	4b09      	ldr	r3, [pc, #36]	@ (80005a4 <ADC_Convert_Rank3+0x84>)
 800057e:	0018      	movs	r0, r3
 8000580:	f001 fa80 	bl	8001a84 <HAL_ADC_GetValue>
 8000584:	0003      	movs	r3, r0
 8000586:	b29a      	uxth	r2, r3
 8000588:	4b08      	ldr	r3, [pc, #32]	@ (80005ac <ADC_Convert_Rank3+0x8c>)
 800058a:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 800058c:	4b05      	ldr	r3, [pc, #20]	@ (80005a4 <ADC_Convert_Rank3+0x84>)
 800058e:	0018      	movs	r0, r3
 8000590:	f001 f9a8 	bl	80018e4 <HAL_ADC_Stop>

	return adc_Value_2;
 8000594:	4b05      	ldr	r3, [pc, #20]	@ (80005ac <ADC_Convert_Rank3+0x8c>)
 8000596:	881b      	ldrh	r3, [r3, #0]
}
 8000598:	0018      	movs	r0, r3
 800059a:	46bd      	mov	sp, r7
 800059c:	b004      	add	sp, #16
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	08000004 	.word	0x08000004
 80005a4:	20000078 	.word	0x20000078
 80005a8:	200001bc 	.word	0x200001bc
 80005ac:	200001ca 	.word	0x200001ca

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b6:	f000 fd8b 	bl	80010d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ba:	f000 f929 	bl	8000810 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005be:	f000 fae1 	bl	8000b84 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005c2:	f000 f981 	bl	80008c8 <MX_ADC1_Init>
  MX_TIM3_Init();
 80005c6:	f000 fa13 	bl	80009f0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80005ca:	f000 fa8d 	bl	8000ae8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  status = HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 80005ce:	4b77      	ldr	r3, [pc, #476]	@ (80007ac <main+0x1fc>)
 80005d0:	2100      	movs	r1, #0
 80005d2:	0018      	movs	r0, r3
 80005d4:	f002 fea4 	bl	8003320 <HAL_TIM_OC_Start_IT>
 80005d8:	0003      	movs	r3, r0
 80005da:	001a      	movs	r2, r3
 80005dc:	4b74      	ldr	r3, [pc, #464]	@ (80007b0 <main+0x200>)
 80005de:	701a      	strb	r2, [r3, #0]
//	  HAL_Delay(100);

	  // === Case 1: Show raw 12-bit ADC value (0–4095) ===
	  // Comment this block when testing voltage

	  sum_1 = 0;
 80005e0:	4b74      	ldr	r3, [pc, #464]	@ (80007b4 <main+0x204>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
	  sum_2 = 0;
 80005e6:	4b74      	ldr	r3, [pc, #464]	@ (80007b8 <main+0x208>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]

	  for (uint8_t i = 0; i < SAMPLES; i++)
 80005ec:	1dfb      	adds	r3, r7, #7
 80005ee:	2200      	movs	r2, #0
 80005f0:	701a      	strb	r2, [r3, #0]
 80005f2:	e022      	b.n	800063a <main+0x8a>
	  {
		  a = ADC_Convert_Rank1();
 80005f4:	f7ff ff04 	bl	8000400 <ADC_Convert_Rank1>
 80005f8:	0003      	movs	r3, r0
 80005fa:	b21a      	sxth	r2, r3
 80005fc:	4b6f      	ldr	r3, [pc, #444]	@ (80007bc <main+0x20c>)
 80005fe:	801a      	strh	r2, [r3, #0]
		  b = ADC_Convert_Rank2();
 8000600:	f7ff ff46 	bl	8000490 <ADC_Convert_Rank2>
 8000604:	0003      	movs	r3, r0
 8000606:	b21a      	sxth	r2, r3
 8000608:	4b6d      	ldr	r3, [pc, #436]	@ (80007c0 <main+0x210>)
 800060a:	801a      	strh	r2, [r3, #0]

		  sum_1 += a;
 800060c:	4b6b      	ldr	r3, [pc, #428]	@ (80007bc <main+0x20c>)
 800060e:	2200      	movs	r2, #0
 8000610:	5e9b      	ldrsh	r3, [r3, r2]
 8000612:	001a      	movs	r2, r3
 8000614:	4b67      	ldr	r3, [pc, #412]	@ (80007b4 <main+0x204>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	18d2      	adds	r2, r2, r3
 800061a:	4b66      	ldr	r3, [pc, #408]	@ (80007b4 <main+0x204>)
 800061c:	601a      	str	r2, [r3, #0]
		  sum_2 += b;
 800061e:	4b68      	ldr	r3, [pc, #416]	@ (80007c0 <main+0x210>)
 8000620:	2200      	movs	r2, #0
 8000622:	5e9b      	ldrsh	r3, [r3, r2]
 8000624:	001a      	movs	r2, r3
 8000626:	4b64      	ldr	r3, [pc, #400]	@ (80007b8 <main+0x208>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	18d2      	adds	r2, r2, r3
 800062c:	4b62      	ldr	r3, [pc, #392]	@ (80007b8 <main+0x208>)
 800062e:	601a      	str	r2, [r3, #0]
	  for (uint8_t i = 0; i < SAMPLES; i++)
 8000630:	1dfb      	adds	r3, r7, #7
 8000632:	781a      	ldrb	r2, [r3, #0]
 8000634:	1dfb      	adds	r3, r7, #7
 8000636:	3201      	adds	r2, #1
 8000638:	701a      	strb	r2, [r3, #0]
 800063a:	1dfb      	adds	r3, r7, #7
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	2bff      	cmp	r3, #255	@ 0xff
 8000640:	d1d8      	bne.n	80005f4 <main+0x44>
	  }

	  average_1 = sum_1 / SAMPLES;
 8000642:	4b5c      	ldr	r3, [pc, #368]	@ (80007b4 <main+0x204>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	21ff      	movs	r1, #255	@ 0xff
 8000648:	0018      	movs	r0, r3
 800064a:	f7ff fd63 	bl	8000114 <__udivsi3>
 800064e:	0003      	movs	r3, r0
 8000650:	b29a      	uxth	r2, r3
 8000652:	4b5c      	ldr	r3, [pc, #368]	@ (80007c4 <main+0x214>)
 8000654:	801a      	strh	r2, [r3, #0]

	  average_2 = sum_2 / SAMPLES;
 8000656:	4b58      	ldr	r3, [pc, #352]	@ (80007b8 <main+0x208>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	21ff      	movs	r1, #255	@ 0xff
 800065c:	0018      	movs	r0, r3
 800065e:	f7ff fd59 	bl	8000114 <__udivsi3>
 8000662:	0003      	movs	r3, r0
 8000664:	b29a      	uxth	r2, r3
 8000666:	4b58      	ldr	r3, [pc, #352]	@ (80007c8 <main+0x218>)
 8000668:	801a      	strh	r2, [r3, #0]

	  deviation = ((average_1 - average_2));
 800066a:	4b56      	ldr	r3, [pc, #344]	@ (80007c4 <main+0x214>)
 800066c:	881a      	ldrh	r2, [r3, #0]
 800066e:	4b56      	ldr	r3, [pc, #344]	@ (80007c8 <main+0x218>)
 8000670:	881b      	ldrh	r3, [r3, #0]
 8000672:	1ad3      	subs	r3, r2, r3
 8000674:	b29b      	uxth	r3, r3
 8000676:	b21a      	sxth	r2, r3
 8000678:	4b54      	ldr	r3, [pc, #336]	@ (80007cc <main+0x21c>)
 800067a:	801a      	strh	r2, [r3, #0]

	  corrected_1 = deviation + 4;
 800067c:	4b53      	ldr	r3, [pc, #332]	@ (80007cc <main+0x21c>)
 800067e:	2200      	movs	r2, #0
 8000680:	5e9b      	ldrsh	r3, [r3, r2]
 8000682:	b29b      	uxth	r3, r3
 8000684:	3304      	adds	r3, #4
 8000686:	b29b      	uxth	r3, r3
 8000688:	b21a      	sxth	r2, r3
 800068a:	4b51      	ldr	r3, [pc, #324]	@ (80007d0 <main+0x220>)
 800068c:	801a      	strh	r2, [r3, #0]

//	  Apply EMA filtering
	  filtered_adc_1 = ((filtered_adc_1 * ((1 << SMOOTHING_SHIFT) - 1)) + corrected_1) >> SMOOTHING_SHIFT;
 800068e:	4b51      	ldr	r3, [pc, #324]	@ (80007d4 <main+0x224>)
 8000690:	2200      	movs	r2, #0
 8000692:	5e9b      	ldrsh	r3, [r3, r2]
 8000694:	001a      	movs	r2, r3
 8000696:	0013      	movs	r3, r2
 8000698:	00db      	lsls	r3, r3, #3
 800069a:	1a9b      	subs	r3, r3, r2
 800069c:	4a4c      	ldr	r2, [pc, #304]	@ (80007d0 <main+0x220>)
 800069e:	2100      	movs	r1, #0
 80006a0:	5e52      	ldrsh	r2, [r2, r1]
 80006a2:	189b      	adds	r3, r3, r2
 80006a4:	10db      	asrs	r3, r3, #3
 80006a6:	b21a      	sxth	r2, r3
 80006a8:	4b4a      	ldr	r3, [pc, #296]	@ (80007d4 <main+0x224>)
 80006aa:	801a      	strh	r2, [r3, #0]

	  current_A = ((filtered_adc_1) * 1075) / (4095);  // Scale to mV
 80006ac:	4b49      	ldr	r3, [pc, #292]	@ (80007d4 <main+0x224>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	5e9b      	ldrsh	r3, [r3, r2]
 80006b2:	001a      	movs	r2, r3
 80006b4:	4b48      	ldr	r3, [pc, #288]	@ (80007d8 <main+0x228>)
 80006b6:	4353      	muls	r3, r2
 80006b8:	4948      	ldr	r1, [pc, #288]	@ (80007dc <main+0x22c>)
 80006ba:	0018      	movs	r0, r3
 80006bc:	f7ff fdb4 	bl	8000228 <__divsi3>
 80006c0:	0003      	movs	r3, r0
 80006c2:	b21a      	sxth	r2, r3
 80006c4:	4b46      	ldr	r3, [pc, #280]	@ (80007e0 <main+0x230>)
 80006c6:	801a      	strh	r2, [r3, #0]
//	  digits[3] = (average_2 / 100) % 10;
//	  digits[4] = (average_2 / 10) % 10;
//	  digits[5] = average_2 % 10;
//
	  // Optional: blank last 2 digits
	  digits[0] = digits[1] = 10;  // Assuming 10 means blank pattern
 80006c8:	4b46      	ldr	r3, [pc, #280]	@ (80007e4 <main+0x234>)
 80006ca:	220a      	movs	r2, #10
 80006cc:	705a      	strb	r2, [r3, #1]
 80006ce:	4b45      	ldr	r3, [pc, #276]	@ (80007e4 <main+0x234>)
 80006d0:	785a      	ldrb	r2, [r3, #1]
 80006d2:	4b44      	ldr	r3, [pc, #272]	@ (80007e4 <main+0x234>)
 80006d4:	701a      	strb	r2, [r3, #0]

	  HAL_Delay(10);
 80006d6:	200a      	movs	r0, #10
 80006d8:	f000 fd80 	bl	80011dc <HAL_Delay>


	  // === Case 2: Show voltage (e.g., 3.245 V = 3245 mV) ===
	  // Comment this block when testing raw ADC value

		sum = 0;
 80006dc:	4b42      	ldr	r3, [pc, #264]	@ (80007e8 <main+0x238>)
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]

		for (uint8_t i = 0; i < SAMPLES; i++)
 80006e2:	1dbb      	adds	r3, r7, #6
 80006e4:	2200      	movs	r2, #0
 80006e6:	701a      	strb	r2, [r3, #0]
 80006e8:	e012      	b.n	8000710 <main+0x160>
		{
			adc_Value = ADC_Convert_Rank3();
 80006ea:	f7ff ff19 	bl	8000520 <ADC_Convert_Rank3>
 80006ee:	0003      	movs	r3, r0
 80006f0:	001a      	movs	r2, r3
 80006f2:	4b3e      	ldr	r3, [pc, #248]	@ (80007ec <main+0x23c>)
 80006f4:	801a      	strh	r2, [r3, #0]
			sum += adc_Value;
 80006f6:	4b3d      	ldr	r3, [pc, #244]	@ (80007ec <main+0x23c>)
 80006f8:	881b      	ldrh	r3, [r3, #0]
 80006fa:	001a      	movs	r2, r3
 80006fc:	4b3a      	ldr	r3, [pc, #232]	@ (80007e8 <main+0x238>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	18d2      	adds	r2, r2, r3
 8000702:	4b39      	ldr	r3, [pc, #228]	@ (80007e8 <main+0x238>)
 8000704:	601a      	str	r2, [r3, #0]
		for (uint8_t i = 0; i < SAMPLES; i++)
 8000706:	1dbb      	adds	r3, r7, #6
 8000708:	781a      	ldrb	r2, [r3, #0]
 800070a:	1dbb      	adds	r3, r7, #6
 800070c:	3201      	adds	r2, #1
 800070e:	701a      	strb	r2, [r3, #0]
 8000710:	1dbb      	adds	r3, r7, #6
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2bff      	cmp	r3, #255	@ 0xff
 8000716:	d1e8      	bne.n	80006ea <main+0x13a>
		}

		average = sum / SAMPLES;
 8000718:	4b33      	ldr	r3, [pc, #204]	@ (80007e8 <main+0x238>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	21ff      	movs	r1, #255	@ 0xff
 800071e:	0018      	movs	r0, r3
 8000720:	f7ff fcf8 	bl	8000114 <__udivsi3>
 8000724:	0003      	movs	r3, r0
 8000726:	b29a      	uxth	r2, r3
 8000728:	4b31      	ldr	r3, [pc, #196]	@ (80007f0 <main+0x240>)
 800072a:	801a      	strh	r2, [r3, #0]

		corrected_2 = (average > 82) ? (average - 82) : 0;
 800072c:	4b30      	ldr	r3, [pc, #192]	@ (80007f0 <main+0x240>)
 800072e:	881b      	ldrh	r3, [r3, #0]
 8000730:	2b52      	cmp	r3, #82	@ 0x52
 8000732:	d905      	bls.n	8000740 <main+0x190>
 8000734:	4b2e      	ldr	r3, [pc, #184]	@ (80007f0 <main+0x240>)
 8000736:	881b      	ldrh	r3, [r3, #0]
 8000738:	3b52      	subs	r3, #82	@ 0x52
 800073a:	b29b      	uxth	r3, r3
 800073c:	b21a      	sxth	r2, r3
 800073e:	e000      	b.n	8000742 <main+0x192>
 8000740:	2200      	movs	r2, #0
 8000742:	4b2c      	ldr	r3, [pc, #176]	@ (80007f4 <main+0x244>)
 8000744:	801a      	strh	r2, [r3, #0]

	    // Apply EMA filtering
//	    filtered_adc_2 = ((filtered_adc_2 * ((1 << SMOOTHING_SHIFT) - 1)) + corrected_2) >> SMOOTHING_SHIFT;

		voltage_V = ((corrected_2) * 1000) / (4095);  // Scale to mV
 8000746:	4b2b      	ldr	r3, [pc, #172]	@ (80007f4 <main+0x244>)
 8000748:	2200      	movs	r2, #0
 800074a:	5e9b      	ldrsh	r3, [r3, r2]
 800074c:	001a      	movs	r2, r3
 800074e:	0013      	movs	r3, r2
 8000750:	015b      	lsls	r3, r3, #5
 8000752:	1a9b      	subs	r3, r3, r2
 8000754:	009b      	lsls	r3, r3, #2
 8000756:	189b      	adds	r3, r3, r2
 8000758:	00db      	lsls	r3, r3, #3
 800075a:	4920      	ldr	r1, [pc, #128]	@ (80007dc <main+0x22c>)
 800075c:	0018      	movs	r0, r3
 800075e:	f7ff fd63 	bl	8000228 <__divsi3>
 8000762:	0003      	movs	r3, r0
 8000764:	b29a      	uxth	r2, r3
 8000766:	4b24      	ldr	r3, [pc, #144]	@ (80007f8 <main+0x248>)
 8000768:	801a      	strh	r2, [r3, #0]
//
////		 Optional: enable DP on digit 0 or 1
////		 In TIM callback, check seg==0 or seg==1 and enable DP accordingly
//
//		digits[0] = digits[1] = 10;  // Blank
		HAL_Delay(10);
 800076a:	200a      	movs	r0, #10
 800076c:	f000 fd36 	bl	80011dc <HAL_Delay>

		power = voltage_V * current_A;
 8000770:	4b21      	ldr	r3, [pc, #132]	@ (80007f8 <main+0x248>)
 8000772:	881b      	ldrh	r3, [r3, #0]
 8000774:	001a      	movs	r2, r3
 8000776:	4b1a      	ldr	r3, [pc, #104]	@ (80007e0 <main+0x230>)
 8000778:	2100      	movs	r1, #0
 800077a:	5e5b      	ldrsh	r3, [r3, r1]
 800077c:	435a      	muls	r2, r3
 800077e:	4b1f      	ldr	r3, [pc, #124]	@ (80007fc <main+0x24c>)
 8000780:	601a      	str	r2, [r3, #0]

	  len = sprintf(uart_data, "%d\r\n", power);
 8000782:	4b1e      	ldr	r3, [pc, #120]	@ (80007fc <main+0x24c>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	491e      	ldr	r1, [pc, #120]	@ (8000800 <main+0x250>)
 8000788:	4b1e      	ldr	r3, [pc, #120]	@ (8000804 <main+0x254>)
 800078a:	0018      	movs	r0, r3
 800078c:	f004 fb4e 	bl	8004e2c <siprintf>
 8000790:	0003      	movs	r3, r0
 8000792:	001a      	movs	r2, r3
 8000794:	4b1c      	ldr	r3, [pc, #112]	@ (8000808 <main+0x258>)
 8000796:	601a      	str	r2, [r3, #0]

	  HAL_UART_Transmit(&huart1, uart_data, len, HAL_MAX_DELAY);
 8000798:	4b1b      	ldr	r3, [pc, #108]	@ (8000808 <main+0x258>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	b29a      	uxth	r2, r3
 800079e:	2301      	movs	r3, #1
 80007a0:	425b      	negs	r3, r3
 80007a2:	4918      	ldr	r1, [pc, #96]	@ (8000804 <main+0x254>)
 80007a4:	4819      	ldr	r0, [pc, #100]	@ (800080c <main+0x25c>)
 80007a6:	f003 fde5 	bl	8004374 <HAL_UART_Transmit>
  {
 80007aa:	e719      	b.n	80005e0 <main+0x30>
 80007ac:	200000dc 	.word	0x200000dc
 80007b0:	200001bc 	.word	0x200001bc
 80007b4:	200001d0 	.word	0x200001d0
 80007b8:	200001d4 	.word	0x200001d4
 80007bc:	200001e6 	.word	0x200001e6
 80007c0:	200001e8 	.word	0x200001e8
 80007c4:	200001da 	.word	0x200001da
 80007c8:	200001dc 	.word	0x200001dc
 80007cc:	200001e4 	.word	0x200001e4
 80007d0:	200001e0 	.word	0x200001e0
 80007d4:	200001ec 	.word	0x200001ec
 80007d8:	00000433 	.word	0x00000433
 80007dc:	00000fff 	.word	0x00000fff
 80007e0:	200001ea 	.word	0x200001ea
 80007e4:	200001c0 	.word	0x200001c0
 80007e8:	200001cc 	.word	0x200001cc
 80007ec:	200001c6 	.word	0x200001c6
 80007f0:	200001d8 	.word	0x200001d8
 80007f4:	200001e2 	.word	0x200001e2
 80007f8:	200001de 	.word	0x200001de
 80007fc:	200001f0 	.word	0x200001f0
 8000800:	0800577c 	.word	0x0800577c
 8000804:	200001f4 	.word	0x200001f4
 8000808:	20000258 	.word	0x20000258
 800080c:	20000128 	.word	0x20000128

08000810 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000810:	b590      	push	{r4, r7, lr}
 8000812:	b093      	sub	sp, #76	@ 0x4c
 8000814:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000816:	2414      	movs	r4, #20
 8000818:	193b      	adds	r3, r7, r4
 800081a:	0018      	movs	r0, r3
 800081c:	2334      	movs	r3, #52	@ 0x34
 800081e:	001a      	movs	r2, r3
 8000820:	2100      	movs	r1, #0
 8000822:	f004 fb25 	bl	8004e70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	0018      	movs	r0, r3
 800082a:	2310      	movs	r3, #16
 800082c:	001a      	movs	r2, r3
 800082e:	2100      	movs	r1, #0
 8000830:	f004 fb1e 	bl	8004e70 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000834:	2380      	movs	r3, #128	@ 0x80
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	0018      	movs	r0, r3
 800083a:	f001 fe8d 	bl	8002558 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800083e:	193b      	adds	r3, r7, r4
 8000840:	2202      	movs	r2, #2
 8000842:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000844:	193b      	adds	r3, r7, r4
 8000846:	2280      	movs	r2, #128	@ 0x80
 8000848:	0052      	lsls	r2, r2, #1
 800084a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800084c:	0021      	movs	r1, r4
 800084e:	187b      	adds	r3, r7, r1
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000854:	187b      	adds	r3, r7, r1
 8000856:	2240      	movs	r2, #64	@ 0x40
 8000858:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800085a:	187b      	adds	r3, r7, r1
 800085c:	2202      	movs	r2, #2
 800085e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000860:	187b      	adds	r3, r7, r1
 8000862:	2202      	movs	r2, #2
 8000864:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000866:	187b      	adds	r3, r7, r1
 8000868:	2200      	movs	r2, #0
 800086a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800086c:	187b      	adds	r3, r7, r1
 800086e:	2208      	movs	r2, #8
 8000870:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000872:	187b      	adds	r3, r7, r1
 8000874:	22c0      	movs	r2, #192	@ 0xc0
 8000876:	02d2      	lsls	r2, r2, #11
 8000878:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800087a:	187b      	adds	r3, r7, r1
 800087c:	2280      	movs	r2, #128	@ 0x80
 800087e:	0592      	lsls	r2, r2, #22
 8000880:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000882:	187b      	adds	r3, r7, r1
 8000884:	0018      	movs	r0, r3
 8000886:	f001 feb3 	bl	80025f0 <HAL_RCC_OscConfig>
 800088a:	1e03      	subs	r3, r0, #0
 800088c:	d001      	beq.n	8000892 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800088e:	f000 f98f 	bl	8000bb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	2207      	movs	r2, #7
 8000896:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	2202      	movs	r2, #2
 800089c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	22a0      	movs	r2, #160	@ 0xa0
 80008a8:	01d2      	lsls	r2, r2, #7
 80008aa:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	2102      	movs	r1, #2
 80008b0:	0018      	movs	r0, r3
 80008b2:	f002 f9ad 	bl	8002c10 <HAL_RCC_ClockConfig>
 80008b6:	1e03      	subs	r3, r0, #0
 80008b8:	d001      	beq.n	80008be <SystemClock_Config+0xae>
  {
    Error_Handler();
 80008ba:	f000 f979 	bl	8000bb0 <Error_Handler>
  }
}
 80008be:	46c0      	nop			@ (mov r8, r8)
 80008c0:	46bd      	mov	sp, r7
 80008c2:	b013      	add	sp, #76	@ 0x4c
 80008c4:	bd90      	pop	{r4, r7, pc}
	...

080008c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	0018      	movs	r0, r3
 80008d2:	230c      	movs	r3, #12
 80008d4:	001a      	movs	r2, r3
 80008d6:	2100      	movs	r1, #0
 80008d8:	f004 faca 	bl	8004e70 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008dc:	4b3f      	ldr	r3, [pc, #252]	@ (80009dc <MX_ADC1_Init+0x114>)
 80008de:	4a40      	ldr	r2, [pc, #256]	@ (80009e0 <MX_ADC1_Init+0x118>)
 80008e0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008e2:	4b3e      	ldr	r3, [pc, #248]	@ (80009dc <MX_ADC1_Init+0x114>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008e8:	4b3c      	ldr	r3, [pc, #240]	@ (80009dc <MX_ADC1_Init+0x114>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008ee:	4b3b      	ldr	r3, [pc, #236]	@ (80009dc <MX_ADC1_Init+0x114>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80008f4:	4b39      	ldr	r3, [pc, #228]	@ (80009dc <MX_ADC1_Init+0x114>)
 80008f6:	2280      	movs	r2, #128	@ 0x80
 80008f8:	0392      	lsls	r2, r2, #14
 80008fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008fc:	4b37      	ldr	r3, [pc, #220]	@ (80009dc <MX_ADC1_Init+0x114>)
 80008fe:	2204      	movs	r2, #4
 8000900:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000902:	4b36      	ldr	r3, [pc, #216]	@ (80009dc <MX_ADC1_Init+0x114>)
 8000904:	2200      	movs	r2, #0
 8000906:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000908:	4b34      	ldr	r3, [pc, #208]	@ (80009dc <MX_ADC1_Init+0x114>)
 800090a:	2200      	movs	r2, #0
 800090c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800090e:	4b33      	ldr	r3, [pc, #204]	@ (80009dc <MX_ADC1_Init+0x114>)
 8000910:	2200      	movs	r2, #0
 8000912:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 3;
 8000914:	4b31      	ldr	r3, [pc, #196]	@ (80009dc <MX_ADC1_Init+0x114>)
 8000916:	2203      	movs	r2, #3
 8000918:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 800091a:	4b30      	ldr	r3, [pc, #192]	@ (80009dc <MX_ADC1_Init+0x114>)
 800091c:	2220      	movs	r2, #32
 800091e:	2101      	movs	r1, #1
 8000920:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000922:	4b2e      	ldr	r3, [pc, #184]	@ (80009dc <MX_ADC1_Init+0x114>)
 8000924:	2200      	movs	r2, #0
 8000926:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000928:	4b2c      	ldr	r3, [pc, #176]	@ (80009dc <MX_ADC1_Init+0x114>)
 800092a:	2200      	movs	r2, #0
 800092c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800092e:	4b2b      	ldr	r3, [pc, #172]	@ (80009dc <MX_ADC1_Init+0x114>)
 8000930:	222c      	movs	r2, #44	@ 0x2c
 8000932:	2100      	movs	r1, #0
 8000934:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000936:	4b29      	ldr	r3, [pc, #164]	@ (80009dc <MX_ADC1_Init+0x114>)
 8000938:	2280      	movs	r2, #128	@ 0x80
 800093a:	0152      	lsls	r2, r2, #5
 800093c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_39CYCLES_5;
 800093e:	4b27      	ldr	r3, [pc, #156]	@ (80009dc <MX_ADC1_Init+0x114>)
 8000940:	2205      	movs	r2, #5
 8000942:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000944:	4b25      	ldr	r3, [pc, #148]	@ (80009dc <MX_ADC1_Init+0x114>)
 8000946:	2207      	movs	r2, #7
 8000948:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800094a:	4b24      	ldr	r3, [pc, #144]	@ (80009dc <MX_ADC1_Init+0x114>)
 800094c:	223c      	movs	r2, #60	@ 0x3c
 800094e:	2100      	movs	r1, #0
 8000950:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000952:	4b22      	ldr	r3, [pc, #136]	@ (80009dc <MX_ADC1_Init+0x114>)
 8000954:	2200      	movs	r2, #0
 8000956:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000958:	4b20      	ldr	r3, [pc, #128]	@ (80009dc <MX_ADC1_Init+0x114>)
 800095a:	0018      	movs	r0, r3
 800095c:	f000 fdcc 	bl	80014f8 <HAL_ADC_Init>
 8000960:	1e03      	subs	r3, r0, #0
 8000962:	d001      	beq.n	8000968 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8000964:	f000 f924 	bl	8000bb0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	2201      	movs	r2, #1
 800096c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	2200      	movs	r2, #0
 8000972:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000974:	1d3b      	adds	r3, r7, #4
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800097a:	1d3a      	adds	r2, r7, #4
 800097c:	4b17      	ldr	r3, [pc, #92]	@ (80009dc <MX_ADC1_Init+0x114>)
 800097e:	0011      	movs	r1, r2
 8000980:	0018      	movs	r0, r3
 8000982:	f001 f88b 	bl	8001a9c <HAL_ADC_ConfigChannel>
 8000986:	1e03      	subs	r3, r0, #0
 8000988:	d001      	beq.n	800098e <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800098a:	f000 f911 	bl	8000bb0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	4a14      	ldr	r2, [pc, #80]	@ (80009e4 <MX_ADC1_Init+0x11c>)
 8000992:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	2204      	movs	r2, #4
 8000998:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800099a:	1d3a      	adds	r2, r7, #4
 800099c:	4b0f      	ldr	r3, [pc, #60]	@ (80009dc <MX_ADC1_Init+0x114>)
 800099e:	0011      	movs	r1, r2
 80009a0:	0018      	movs	r0, r3
 80009a2:	f001 f87b 	bl	8001a9c <HAL_ADC_ConfigChannel>
 80009a6:	1e03      	subs	r3, r0, #0
 80009a8:	d001      	beq.n	80009ae <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 80009aa:	f000 f901 	bl	8000bb0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	4a0d      	ldr	r2, [pc, #52]	@ (80009e8 <MX_ADC1_Init+0x120>)
 80009b2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	2208      	movs	r2, #8
 80009b8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_2;
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	4a0b      	ldr	r2, [pc, #44]	@ (80009ec <MX_ADC1_Init+0x124>)
 80009be:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009c0:	1d3a      	adds	r2, r7, #4
 80009c2:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <MX_ADC1_Init+0x114>)
 80009c4:	0011      	movs	r1, r2
 80009c6:	0018      	movs	r0, r3
 80009c8:	f001 f868 	bl	8001a9c <HAL_ADC_ConfigChannel>
 80009cc:	1e03      	subs	r3, r0, #0
 80009ce:	d001      	beq.n	80009d4 <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 80009d0:	f000 f8ee 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009d4:	46c0      	nop			@ (mov r8, r8)
 80009d6:	46bd      	mov	sp, r7
 80009d8:	b004      	add	sp, #16
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000078 	.word	0x20000078
 80009e0:	40012400 	.word	0x40012400
 80009e4:	04000002 	.word	0x04000002
 80009e8:	08000004 	.word	0x08000004
 80009ec:	07ffff04 	.word	0x07ffff04

080009f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08e      	sub	sp, #56	@ 0x38
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009f6:	2328      	movs	r3, #40	@ 0x28
 80009f8:	18fb      	adds	r3, r7, r3
 80009fa:	0018      	movs	r0, r3
 80009fc:	2310      	movs	r3, #16
 80009fe:	001a      	movs	r2, r3
 8000a00:	2100      	movs	r1, #0
 8000a02:	f004 fa35 	bl	8004e70 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a06:	231c      	movs	r3, #28
 8000a08:	18fb      	adds	r3, r7, r3
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	230c      	movs	r3, #12
 8000a0e:	001a      	movs	r2, r3
 8000a10:	2100      	movs	r1, #0
 8000a12:	f004 fa2d 	bl	8004e70 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a16:	003b      	movs	r3, r7
 8000a18:	0018      	movs	r0, r3
 8000a1a:	231c      	movs	r3, #28
 8000a1c:	001a      	movs	r2, r3
 8000a1e:	2100      	movs	r1, #0
 8000a20:	f004 fa26 	bl	8004e70 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a24:	4b2e      	ldr	r3, [pc, #184]	@ (8000ae0 <MX_TIM3_Init+0xf0>)
 8000a26:	4a2f      	ldr	r2, [pc, #188]	@ (8000ae4 <MX_TIM3_Init+0xf4>)
 8000a28:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8000a2a:	4b2d      	ldr	r3, [pc, #180]	@ (8000ae0 <MX_TIM3_Init+0xf0>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a30:	4b2b      	ldr	r3, [pc, #172]	@ (8000ae0 <MX_TIM3_Init+0xf0>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 32768;
 8000a36:	4b2a      	ldr	r3, [pc, #168]	@ (8000ae0 <MX_TIM3_Init+0xf0>)
 8000a38:	2280      	movs	r2, #128	@ 0x80
 8000a3a:	0212      	lsls	r2, r2, #8
 8000a3c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a3e:	4b28      	ldr	r3, [pc, #160]	@ (8000ae0 <MX_TIM3_Init+0xf0>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a44:	4b26      	ldr	r3, [pc, #152]	@ (8000ae0 <MX_TIM3_Init+0xf0>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a4a:	4b25      	ldr	r3, [pc, #148]	@ (8000ae0 <MX_TIM3_Init+0xf0>)
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f002 fbaf 	bl	80031b0 <HAL_TIM_Base_Init>
 8000a52:	1e03      	subs	r3, r0, #0
 8000a54:	d001      	beq.n	8000a5a <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000a56:	f000 f8ab 	bl	8000bb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a5a:	2128      	movs	r1, #40	@ 0x28
 8000a5c:	187b      	adds	r3, r7, r1
 8000a5e:	2280      	movs	r2, #128	@ 0x80
 8000a60:	0152      	lsls	r2, r2, #5
 8000a62:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a64:	187a      	adds	r2, r7, r1
 8000a66:	4b1e      	ldr	r3, [pc, #120]	@ (8000ae0 <MX_TIM3_Init+0xf0>)
 8000a68:	0011      	movs	r1, r2
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f002 fede 	bl	800382c <HAL_TIM_ConfigClockSource>
 8000a70:	1e03      	subs	r3, r0, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000a74:	f000 f89c 	bl	8000bb0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000a78:	4b19      	ldr	r3, [pc, #100]	@ (8000ae0 <MX_TIM3_Init+0xf0>)
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f002 fbf0 	bl	8003260 <HAL_TIM_OC_Init>
 8000a80:	1e03      	subs	r3, r0, #0
 8000a82:	d001      	beq.n	8000a88 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000a84:	f000 f894 	bl	8000bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a88:	211c      	movs	r1, #28
 8000a8a:	187b      	adds	r3, r7, r1
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a90:	187b      	adds	r3, r7, r1
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a96:	187a      	adds	r2, r7, r1
 8000a98:	4b11      	ldr	r3, [pc, #68]	@ (8000ae0 <MX_TIM3_Init+0xf0>)
 8000a9a:	0011      	movs	r1, r2
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f003 fb99 	bl	80041d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000aa2:	1e03      	subs	r3, r0, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8000aa6:	f000 f883 	bl	8000bb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000aaa:	003b      	movs	r3, r7
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000ab0:	003b      	movs	r3, r7
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ab6:	003b      	movs	r3, r7
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000abc:	003b      	movs	r3, r7
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ac2:	0039      	movs	r1, r7
 8000ac4:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <MX_TIM3_Init+0xf0>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f002 fe4f 	bl	800376c <HAL_TIM_OC_ConfigChannel>
 8000ace:	1e03      	subs	r3, r0, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8000ad2:	f000 f86d 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ad6:	46c0      	nop			@ (mov r8, r8)
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	b00e      	add	sp, #56	@ 0x38
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	46c0      	nop			@ (mov r8, r8)
 8000ae0:	200000dc 	.word	0x200000dc
 8000ae4:	40000400 	.word	0x40000400

08000ae8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000aec:	4b23      	ldr	r3, [pc, #140]	@ (8000b7c <MX_USART1_UART_Init+0x94>)
 8000aee:	4a24      	ldr	r2, [pc, #144]	@ (8000b80 <MX_USART1_UART_Init+0x98>)
 8000af0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000af2:	4b22      	ldr	r3, [pc, #136]	@ (8000b7c <MX_USART1_UART_Init+0x94>)
 8000af4:	22e1      	movs	r2, #225	@ 0xe1
 8000af6:	0252      	lsls	r2, r2, #9
 8000af8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000afa:	4b20      	ldr	r3, [pc, #128]	@ (8000b7c <MX_USART1_UART_Init+0x94>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b00:	4b1e      	ldr	r3, [pc, #120]	@ (8000b7c <MX_USART1_UART_Init+0x94>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b06:	4b1d      	ldr	r3, [pc, #116]	@ (8000b7c <MX_USART1_UART_Init+0x94>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000b7c <MX_USART1_UART_Init+0x94>)
 8000b0e:	220c      	movs	r2, #12
 8000b10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b12:	4b1a      	ldr	r3, [pc, #104]	@ (8000b7c <MX_USART1_UART_Init+0x94>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b18:	4b18      	ldr	r3, [pc, #96]	@ (8000b7c <MX_USART1_UART_Init+0x94>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b1e:	4b17      	ldr	r3, [pc, #92]	@ (8000b7c <MX_USART1_UART_Init+0x94>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b24:	4b15      	ldr	r3, [pc, #84]	@ (8000b7c <MX_USART1_UART_Init+0x94>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b2a:	4b14      	ldr	r3, [pc, #80]	@ (8000b7c <MX_USART1_UART_Init+0x94>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b30:	4b12      	ldr	r3, [pc, #72]	@ (8000b7c <MX_USART1_UART_Init+0x94>)
 8000b32:	0018      	movs	r0, r3
 8000b34:	f003 fbc8 	bl	80042c8 <HAL_UART_Init>
 8000b38:	1e03      	subs	r3, r0, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b3c:	f000 f838 	bl	8000bb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b40:	4b0e      	ldr	r3, [pc, #56]	@ (8000b7c <MX_USART1_UART_Init+0x94>)
 8000b42:	2100      	movs	r1, #0
 8000b44:	0018      	movs	r0, r3
 8000b46:	f004 f891 	bl	8004c6c <HAL_UARTEx_SetTxFifoThreshold>
 8000b4a:	1e03      	subs	r3, r0, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b4e:	f000 f82f 	bl	8000bb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b52:	4b0a      	ldr	r3, [pc, #40]	@ (8000b7c <MX_USART1_UART_Init+0x94>)
 8000b54:	2100      	movs	r1, #0
 8000b56:	0018      	movs	r0, r3
 8000b58:	f004 f8c8 	bl	8004cec <HAL_UARTEx_SetRxFifoThreshold>
 8000b5c:	1e03      	subs	r3, r0, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b60:	f000 f826 	bl	8000bb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b64:	4b05      	ldr	r3, [pc, #20]	@ (8000b7c <MX_USART1_UART_Init+0x94>)
 8000b66:	0018      	movs	r0, r3
 8000b68:	f004 f846 	bl	8004bf8 <HAL_UARTEx_DisableFifoMode>
 8000b6c:	1e03      	subs	r3, r0, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b70:	f000 f81e 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b74:	46c0      	nop			@ (mov r8, r8)
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	46c0      	nop			@ (mov r8, r8)
 8000b7c:	20000128 	.word	0x20000128
 8000b80:	40013800 	.word	0x40013800

08000b84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8a:	4b08      	ldr	r3, [pc, #32]	@ (8000bac <MX_GPIO_Init+0x28>)
 8000b8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b8e:	4b07      	ldr	r3, [pc, #28]	@ (8000bac <MX_GPIO_Init+0x28>)
 8000b90:	2101      	movs	r1, #1
 8000b92:	430a      	orrs	r2, r1
 8000b94:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b96:	4b05      	ldr	r3, [pc, #20]	@ (8000bac <MX_GPIO_Init+0x28>)
 8000b98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ba2:	46c0      	nop			@ (mov r8, r8)
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	b002      	add	sp, #8
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	46c0      	nop			@ (mov r8, r8)
 8000bac:	40021000 	.word	0x40021000

08000bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb4:	b672      	cpsid	i
}
 8000bb6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb8:	46c0      	nop			@ (mov r8, r8)
 8000bba:	e7fd      	b.n	8000bb8 <Error_Handler+0x8>

08000bbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c00 <HAL_MspInit+0x44>)
 8000bc4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000bc6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c00 <HAL_MspInit+0x44>)
 8000bc8:	2101      	movs	r1, #1
 8000bca:	430a      	orrs	r2, r1
 8000bcc:	641a      	str	r2, [r3, #64]	@ 0x40
 8000bce:	4b0c      	ldr	r3, [pc, #48]	@ (8000c00 <HAL_MspInit+0x44>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bda:	4b09      	ldr	r3, [pc, #36]	@ (8000c00 <HAL_MspInit+0x44>)
 8000bdc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000bde:	4b08      	ldr	r3, [pc, #32]	@ (8000c00 <HAL_MspInit+0x44>)
 8000be0:	2180      	movs	r1, #128	@ 0x80
 8000be2:	0549      	lsls	r1, r1, #21
 8000be4:	430a      	orrs	r2, r1
 8000be6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000be8:	4b05      	ldr	r3, [pc, #20]	@ (8000c00 <HAL_MspInit+0x44>)
 8000bea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000bec:	2380      	movs	r3, #128	@ 0x80
 8000bee:	055b      	lsls	r3, r3, #21
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	603b      	str	r3, [r7, #0]
 8000bf4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf6:	46c0      	nop			@ (mov r8, r8)
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	b002      	add	sp, #8
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	46c0      	nop			@ (mov r8, r8)
 8000c00:	40021000 	.word	0x40021000

08000c04 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c04:	b590      	push	{r4, r7, lr}
 8000c06:	b091      	sub	sp, #68	@ 0x44
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	232c      	movs	r3, #44	@ 0x2c
 8000c0e:	18fb      	adds	r3, r7, r3
 8000c10:	0018      	movs	r0, r3
 8000c12:	2314      	movs	r3, #20
 8000c14:	001a      	movs	r2, r3
 8000c16:	2100      	movs	r1, #0
 8000c18:	f004 f92a 	bl	8004e70 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c1c:	2414      	movs	r4, #20
 8000c1e:	193b      	adds	r3, r7, r4
 8000c20:	0018      	movs	r0, r3
 8000c22:	2318      	movs	r3, #24
 8000c24:	001a      	movs	r2, r3
 8000c26:	2100      	movs	r1, #0
 8000c28:	f004 f922 	bl	8004e70 <memset>
  if(hadc->Instance==ADC1)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a20      	ldr	r2, [pc, #128]	@ (8000cb4 <HAL_ADC_MspInit+0xb0>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d13a      	bne.n	8000cac <HAL_ADC_MspInit+0xa8>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c36:	193b      	adds	r3, r7, r4
 8000c38:	2280      	movs	r2, #128	@ 0x80
 8000c3a:	01d2      	lsls	r2, r2, #7
 8000c3c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_HSI;
 8000c3e:	193b      	adds	r3, r7, r4
 8000c40:	2280      	movs	r2, #128	@ 0x80
 8000c42:	0612      	lsls	r2, r2, #24
 8000c44:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c46:	193b      	adds	r3, r7, r4
 8000c48:	0018      	movs	r0, r3
 8000c4a:	f002 f98b 	bl	8002f64 <HAL_RCCEx_PeriphCLKConfig>
 8000c4e:	1e03      	subs	r3, r0, #0
 8000c50:	d001      	beq.n	8000c56 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8000c52:	f7ff ffad 	bl	8000bb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c56:	4b18      	ldr	r3, [pc, #96]	@ (8000cb8 <HAL_ADC_MspInit+0xb4>)
 8000c58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c5a:	4b17      	ldr	r3, [pc, #92]	@ (8000cb8 <HAL_ADC_MspInit+0xb4>)
 8000c5c:	2180      	movs	r1, #128	@ 0x80
 8000c5e:	0349      	lsls	r1, r1, #13
 8000c60:	430a      	orrs	r2, r1
 8000c62:	641a      	str	r2, [r3, #64]	@ 0x40
 8000c64:	4b14      	ldr	r3, [pc, #80]	@ (8000cb8 <HAL_ADC_MspInit+0xb4>)
 8000c66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c68:	2380      	movs	r3, #128	@ 0x80
 8000c6a:	035b      	lsls	r3, r3, #13
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c72:	4b11      	ldr	r3, [pc, #68]	@ (8000cb8 <HAL_ADC_MspInit+0xb4>)
 8000c74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c76:	4b10      	ldr	r3, [pc, #64]	@ (8000cb8 <HAL_ADC_MspInit+0xb4>)
 8000c78:	2101      	movs	r1, #1
 8000c7a:	430a      	orrs	r2, r1
 8000c7c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb8 <HAL_ADC_MspInit+0xb4>)
 8000c80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c82:	2201      	movs	r2, #1
 8000c84:	4013      	ands	r3, r2
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000c8a:	212c      	movs	r1, #44	@ 0x2c
 8000c8c:	187b      	adds	r3, r7, r1
 8000c8e:	2207      	movs	r2, #7
 8000c90:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c92:	187b      	adds	r3, r7, r1
 8000c94:	2203      	movs	r2, #3
 8000c96:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	187b      	adds	r3, r7, r1
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9e:	187a      	adds	r2, r7, r1
 8000ca0:	23a0      	movs	r3, #160	@ 0xa0
 8000ca2:	05db      	lsls	r3, r3, #23
 8000ca4:	0011      	movs	r1, r2
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f001 fad4 	bl	8002254 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000cac:	46c0      	nop			@ (mov r8, r8)
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	b011      	add	sp, #68	@ 0x44
 8000cb2:	bd90      	pop	{r4, r7, pc}
 8000cb4:	40012400 	.word	0x40012400
 8000cb8:	40021000 	.word	0x40021000

08000cbc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d00 <HAL_TIM_Base_MspInit+0x44>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d113      	bne.n	8000cf6 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cce:	4b0d      	ldr	r3, [pc, #52]	@ (8000d04 <HAL_TIM_Base_MspInit+0x48>)
 8000cd0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8000d04 <HAL_TIM_Base_MspInit+0x48>)
 8000cd4:	2102      	movs	r1, #2
 8000cd6:	430a      	orrs	r2, r1
 8000cd8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000cda:	4b0a      	ldr	r3, [pc, #40]	@ (8000d04 <HAL_TIM_Base_MspInit+0x48>)
 8000cdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000cde:	2202      	movs	r2, #2
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2100      	movs	r1, #0
 8000cea:	2010      	movs	r0, #16
 8000cec:	f001 fa80 	bl	80021f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000cf0:	2010      	movs	r0, #16
 8000cf2:	f001 fa92 	bl	800221a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000cf6:	46c0      	nop			@ (mov r8, r8)
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	b004      	add	sp, #16
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	46c0      	nop			@ (mov r8, r8)
 8000d00:	40000400 	.word	0x40000400
 8000d04:	40021000 	.word	0x40021000

08000d08 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d08:	b590      	push	{r4, r7, lr}
 8000d0a:	b091      	sub	sp, #68	@ 0x44
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	232c      	movs	r3, #44	@ 0x2c
 8000d12:	18fb      	adds	r3, r7, r3
 8000d14:	0018      	movs	r0, r3
 8000d16:	2314      	movs	r3, #20
 8000d18:	001a      	movs	r2, r3
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	f004 f8a8 	bl	8004e70 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d20:	2414      	movs	r4, #20
 8000d22:	193b      	adds	r3, r7, r4
 8000d24:	0018      	movs	r0, r3
 8000d26:	2318      	movs	r3, #24
 8000d28:	001a      	movs	r2, r3
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	f004 f8a0 	bl	8004e70 <memset>
  if(huart->Instance==USART1)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a23      	ldr	r2, [pc, #140]	@ (8000dc4 <HAL_UART_MspInit+0xbc>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d13f      	bne.n	8000dba <HAL_UART_MspInit+0xb2>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d3a:	193b      	adds	r3, r7, r4
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000d40:	193b      	adds	r3, r7, r4
 8000d42:	2200      	movs	r2, #0
 8000d44:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d46:	193b      	adds	r3, r7, r4
 8000d48:	0018      	movs	r0, r3
 8000d4a:	f002 f90b 	bl	8002f64 <HAL_RCCEx_PeriphCLKConfig>
 8000d4e:	1e03      	subs	r3, r0, #0
 8000d50:	d001      	beq.n	8000d56 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d52:	f7ff ff2d 	bl	8000bb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d56:	4b1c      	ldr	r3, [pc, #112]	@ (8000dc8 <HAL_UART_MspInit+0xc0>)
 8000d58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d5a:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc8 <HAL_UART_MspInit+0xc0>)
 8000d5c:	2180      	movs	r1, #128	@ 0x80
 8000d5e:	01c9      	lsls	r1, r1, #7
 8000d60:	430a      	orrs	r2, r1
 8000d62:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d64:	4b18      	ldr	r3, [pc, #96]	@ (8000dc8 <HAL_UART_MspInit+0xc0>)
 8000d66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d68:	2380      	movs	r3, #128	@ 0x80
 8000d6a:	01db      	lsls	r3, r3, #7
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
 8000d70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d72:	4b15      	ldr	r3, [pc, #84]	@ (8000dc8 <HAL_UART_MspInit+0xc0>)
 8000d74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d76:	4b14      	ldr	r3, [pc, #80]	@ (8000dc8 <HAL_UART_MspInit+0xc0>)
 8000d78:	2101      	movs	r1, #1
 8000d7a:	430a      	orrs	r2, r1
 8000d7c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d7e:	4b12      	ldr	r3, [pc, #72]	@ (8000dc8 <HAL_UART_MspInit+0xc0>)
 8000d80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d82:	2201      	movs	r2, #1
 8000d84:	4013      	ands	r3, r2
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d8a:	212c      	movs	r1, #44	@ 0x2c
 8000d8c:	187b      	adds	r3, r7, r1
 8000d8e:	22c0      	movs	r2, #192	@ 0xc0
 8000d90:	00d2      	lsls	r2, r2, #3
 8000d92:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d94:	187b      	adds	r3, r7, r1
 8000d96:	2202      	movs	r2, #2
 8000d98:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	187b      	adds	r3, r7, r1
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da0:	187b      	adds	r3, r7, r1
 8000da2:	2200      	movs	r2, #0
 8000da4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000da6:	187b      	adds	r3, r7, r1
 8000da8:	2201      	movs	r2, #1
 8000daa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dac:	187a      	adds	r2, r7, r1
 8000dae:	23a0      	movs	r3, #160	@ 0xa0
 8000db0:	05db      	lsls	r3, r3, #23
 8000db2:	0011      	movs	r1, r2
 8000db4:	0018      	movs	r0, r3
 8000db6:	f001 fa4d 	bl	8002254 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000dba:	46c0      	nop			@ (mov r8, r8)
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	b011      	add	sp, #68	@ 0x44
 8000dc0:	bd90      	pop	{r4, r7, pc}
 8000dc2:	46c0      	nop			@ (mov r8, r8)
 8000dc4:	40013800 	.word	0x40013800
 8000dc8:	40021000 	.word	0x40021000

08000dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dd0:	46c0      	nop			@ (mov r8, r8)
 8000dd2:	e7fd      	b.n	8000dd0 <NMI_Handler+0x4>

08000dd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd8:	46c0      	nop			@ (mov r8, r8)
 8000dda:	e7fd      	b.n	8000dd8 <HardFault_Handler+0x4>

08000ddc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000de0:	46c0      	nop			@ (mov r8, r8)
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dea:	46c0      	nop			@ (mov r8, r8)
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df4:	f000 f9d6 	bl	80011a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df8:	46c0      	nop			@ (mov r8, r8)
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e00:	b590      	push	{r4, r7, lr}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000e06:	4b79      	ldr	r3, [pc, #484]	@ (8000fec <TIM3_IRQHandler+0x1ec>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	2108      	movs	r1, #8
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f001 fb85 	bl	800251c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000e12:	4b76      	ldr	r3, [pc, #472]	@ (8000fec <TIM3_IRQHandler+0x1ec>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	2110      	movs	r1, #16
 8000e18:	0018      	movs	r0, r3
 8000e1a:	f001 fb7f 	bl	800251c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000e1e:	4b73      	ldr	r3, [pc, #460]	@ (8000fec <TIM3_IRQHandler+0x1ec>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	2120      	movs	r1, #32
 8000e24:	0018      	movs	r0, r3
 8000e26:	f001 fb79 	bl	800251c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000e2a:	4b70      	ldr	r3, [pc, #448]	@ (8000fec <TIM3_IRQHandler+0x1ec>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	2140      	movs	r1, #64	@ 0x40
 8000e30:	0018      	movs	r0, r3
 8000e32:	f001 fb73 	bl	800251c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000e36:	4b6d      	ldr	r3, [pc, #436]	@ (8000fec <TIM3_IRQHandler+0x1ec>)
 8000e38:	2201      	movs	r2, #1
 8000e3a:	2180      	movs	r1, #128	@ 0x80
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	f001 fb6d 	bl	800251c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000e42:	2380      	movs	r3, #128	@ 0x80
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	4869      	ldr	r0, [pc, #420]	@ (8000fec <TIM3_IRQHandler+0x1ec>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	0019      	movs	r1, r3
 8000e4c:	f001 fb66 	bl	800251c <HAL_GPIO_WritePin>

	// === Get pattern for current digit ===
	uint8_t val = digits[seg] % 10;  // Avoid invalid index
 8000e50:	4b67      	ldr	r3, [pc, #412]	@ (8000ff0 <TIM3_IRQHandler+0x1f0>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	001a      	movs	r2, r3
 8000e56:	4b67      	ldr	r3, [pc, #412]	@ (8000ff4 <TIM3_IRQHandler+0x1f4>)
 8000e58:	5c9b      	ldrb	r3, [r3, r2]
 8000e5a:	1dfc      	adds	r4, r7, #7
 8000e5c:	210a      	movs	r1, #10
 8000e5e:	0018      	movs	r0, r3
 8000e60:	f7ff f9de 	bl	8000220 <__aeabi_uidivmod>
 8000e64:	000b      	movs	r3, r1
 8000e66:	7023      	strb	r3, [r4, #0]
	uint8_t pattern = Segment_Patterns[val];
 8000e68:	1dfb      	adds	r3, r7, #7
 8000e6a:	781a      	ldrb	r2, [r3, #0]
 8000e6c:	1dbb      	adds	r3, r7, #6
 8000e6e:	4962      	ldr	r1, [pc, #392]	@ (8000ff8 <TIM3_IRQHandler+0x1f8>)
 8000e70:	5c8a      	ldrb	r2, [r1, r2]
 8000e72:	701a      	strb	r2, [r3, #0]

	// === Set segments A-G and DP ===
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, (pattern & 0x40) ? GPIO_PIN_RESET : GPIO_PIN_SET); // A
 8000e74:	1dbb      	adds	r3, r7, #6
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	2240      	movs	r2, #64	@ 0x40
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	425a      	negs	r2, r3
 8000e7e:	4153      	adcs	r3, r2
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	001a      	movs	r2, r3
 8000e84:	23a0      	movs	r3, #160	@ 0xa0
 8000e86:	05db      	lsls	r3, r3, #23
 8000e88:	2101      	movs	r1, #1
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f001 fb46 	bl	800251c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, (pattern & 0x20) ? GPIO_PIN_RESET : GPIO_PIN_SET); // B
 8000e90:	1dbb      	adds	r3, r7, #6
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2220      	movs	r2, #32
 8000e96:	4013      	ands	r3, r2
 8000e98:	425a      	negs	r2, r3
 8000e9a:	4153      	adcs	r3, r2
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	001a      	movs	r2, r3
 8000ea0:	23a0      	movs	r3, #160	@ 0xa0
 8000ea2:	05db      	lsls	r3, r3, #23
 8000ea4:	2102      	movs	r1, #2
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	f001 fb38 	bl	800251c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, (pattern & 0x10) ? GPIO_PIN_RESET : GPIO_PIN_SET); // C
 8000eac:	1dbb      	adds	r3, r7, #6
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2210      	movs	r2, #16
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	425a      	negs	r2, r3
 8000eb6:	4153      	adcs	r3, r2
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	001a      	movs	r2, r3
 8000ebc:	23a0      	movs	r3, #160	@ 0xa0
 8000ebe:	05db      	lsls	r3, r3, #23
 8000ec0:	2104      	movs	r1, #4
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	f001 fb2a 	bl	800251c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, (pattern & 0x08) ? GPIO_PIN_RESET : GPIO_PIN_SET); // D
 8000ec8:	1dbb      	adds	r3, r7, #6
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2208      	movs	r2, #8
 8000ece:	4013      	ands	r3, r2
 8000ed0:	425a      	negs	r2, r3
 8000ed2:	4153      	adcs	r3, r2
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	001a      	movs	r2, r3
 8000ed8:	23a0      	movs	r3, #160	@ 0xa0
 8000eda:	05db      	lsls	r3, r3, #23
 8000edc:	2108      	movs	r1, #8
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f001 fb1c 	bl	800251c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, (pattern & 0x04) ? GPIO_PIN_RESET : GPIO_PIN_SET); // E
 8000ee4:	1dbb      	adds	r3, r7, #6
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2204      	movs	r2, #4
 8000eea:	4013      	ands	r3, r2
 8000eec:	425a      	negs	r2, r3
 8000eee:	4153      	adcs	r3, r2
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	001a      	movs	r2, r3
 8000ef4:	23a0      	movs	r3, #160	@ 0xa0
 8000ef6:	05db      	lsls	r3, r3, #23
 8000ef8:	2110      	movs	r1, #16
 8000efa:	0018      	movs	r0, r3
 8000efc:	f001 fb0e 	bl	800251c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, (pattern & 0x02) ? GPIO_PIN_RESET : GPIO_PIN_SET); // F
 8000f00:	1dbb      	adds	r3, r7, #6
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	2202      	movs	r2, #2
 8000f06:	4013      	ands	r3, r2
 8000f08:	425a      	negs	r2, r3
 8000f0a:	4153      	adcs	r3, r2
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	001a      	movs	r2, r3
 8000f10:	23a0      	movs	r3, #160	@ 0xa0
 8000f12:	05db      	lsls	r3, r3, #23
 8000f14:	2120      	movs	r1, #32
 8000f16:	0018      	movs	r0, r3
 8000f18:	f001 fb00 	bl	800251c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, (pattern & 0x01) ? GPIO_PIN_RESET : GPIO_PIN_SET); // G
 8000f1c:	1dbb      	adds	r3, r7, #6
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2201      	movs	r2, #1
 8000f22:	4013      	ands	r3, r2
 8000f24:	425a      	negs	r2, r3
 8000f26:	4153      	adcs	r3, r2
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	001a      	movs	r2, r3
 8000f2c:	23a0      	movs	r3, #160	@ 0xa0
 8000f2e:	05db      	lsls	r3, r3, #23
 8000f30:	2140      	movs	r1, #64	@ 0x40
 8000f32:	0018      	movs	r0, r3
 8000f34:	f001 faf2 	bl	800251c <HAL_GPIO_WritePin>

//	Handle Dot Point (DP) on PA7
    if (seg == 0)
 8000f38:	4b2d      	ldr	r3, [pc, #180]	@ (8000ff0 <TIM3_IRQHandler+0x1f0>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d107      	bne.n	8000f50 <TIM3_IRQHandler+0x150>
    {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);  // DP ON
 8000f40:	23a0      	movs	r3, #160	@ 0xa0
 8000f42:	05db      	lsls	r3, r3, #23
 8000f44:	2201      	movs	r2, #1
 8000f46:	2180      	movs	r1, #128	@ 0x80
 8000f48:	0018      	movs	r0, r3
 8000f4a:	f001 fae7 	bl	800251c <HAL_GPIO_WritePin>
 8000f4e:	e006      	b.n	8000f5e <TIM3_IRQHandler+0x15e>
    }
    else
    {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);    // DP OFF otherwise
 8000f50:	23a0      	movs	r3, #160	@ 0xa0
 8000f52:	05db      	lsls	r3, r3, #23
 8000f54:	2200      	movs	r2, #0
 8000f56:	2180      	movs	r1, #128	@ 0x80
 8000f58:	0018      	movs	r0, r3
 8000f5a:	f001 fadf 	bl	800251c <HAL_GPIO_WritePin>
    }

	// === Enable current digit (active-low) ===
	switch (seg)
 8000f5e:	4b24      	ldr	r3, [pc, #144]	@ (8000ff0 <TIM3_IRQHandler+0x1f0>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b05      	cmp	r3, #5
 8000f64:	d82f      	bhi.n	8000fc6 <TIM3_IRQHandler+0x1c6>
 8000f66:	009a      	lsls	r2, r3, #2
 8000f68:	4b24      	ldr	r3, [pc, #144]	@ (8000ffc <TIM3_IRQHandler+0x1fc>)
 8000f6a:	18d3      	adds	r3, r2, r3
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	469f      	mov	pc, r3
	{
		case 0: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); break;
 8000f70:	4b1e      	ldr	r3, [pc, #120]	@ (8000fec <TIM3_IRQHandler+0x1ec>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	2108      	movs	r1, #8
 8000f76:	0018      	movs	r0, r3
 8000f78:	f001 fad0 	bl	800251c <HAL_GPIO_WritePin>
 8000f7c:	e023      	b.n	8000fc6 <TIM3_IRQHandler+0x1c6>
		case 1: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); break;
 8000f7e:	4b1b      	ldr	r3, [pc, #108]	@ (8000fec <TIM3_IRQHandler+0x1ec>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	2110      	movs	r1, #16
 8000f84:	0018      	movs	r0, r3
 8000f86:	f001 fac9 	bl	800251c <HAL_GPIO_WritePin>
 8000f8a:	e01c      	b.n	8000fc6 <TIM3_IRQHandler+0x1c6>
		case 2: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); break;
 8000f8c:	4b17      	ldr	r3, [pc, #92]	@ (8000fec <TIM3_IRQHandler+0x1ec>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2120      	movs	r1, #32
 8000f92:	0018      	movs	r0, r3
 8000f94:	f001 fac2 	bl	800251c <HAL_GPIO_WritePin>
 8000f98:	e015      	b.n	8000fc6 <TIM3_IRQHandler+0x1c6>
		case 3: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); break;
 8000f9a:	4b14      	ldr	r3, [pc, #80]	@ (8000fec <TIM3_IRQHandler+0x1ec>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2140      	movs	r1, #64	@ 0x40
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	f001 fabb 	bl	800251c <HAL_GPIO_WritePin>
 8000fa6:	e00e      	b.n	8000fc6 <TIM3_IRQHandler+0x1c6>
		case 4: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); break;
 8000fa8:	4b10      	ldr	r3, [pc, #64]	@ (8000fec <TIM3_IRQHandler+0x1ec>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	2180      	movs	r1, #128	@ 0x80
 8000fae:	0018      	movs	r0, r3
 8000fb0:	f001 fab4 	bl	800251c <HAL_GPIO_WritePin>
 8000fb4:	e007      	b.n	8000fc6 <TIM3_IRQHandler+0x1c6>
		case 5: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET); break;
 8000fb6:	2380      	movs	r3, #128	@ 0x80
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	480c      	ldr	r0, [pc, #48]	@ (8000fec <TIM3_IRQHandler+0x1ec>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	0019      	movs	r1, r3
 8000fc0:	f001 faac 	bl	800251c <HAL_GPIO_WritePin>
 8000fc4:	46c0      	nop			@ (mov r8, r8)
	}

	// === Advance to next digit ===
	seg = (seg + 1) % 6;
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff0 <TIM3_IRQHandler+0x1f0>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	2106      	movs	r1, #6
 8000fce:	0018      	movs	r0, r3
 8000fd0:	f7ff fa10 	bl	80003f4 <__aeabi_idivmod>
 8000fd4:	000b      	movs	r3, r1
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	4b05      	ldr	r3, [pc, #20]	@ (8000ff0 <TIM3_IRQHandler+0x1f0>)
 8000fda:	701a      	strb	r2, [r3, #0]

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000fdc:	4b08      	ldr	r3, [pc, #32]	@ (8001000 <TIM3_IRQHandler+0x200>)
 8000fde:	0018      	movs	r0, r3
 8000fe0:	f002 fabc 	bl	800355c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000fe4:	46c0      	nop			@ (mov r8, r8)
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	b003      	add	sp, #12
 8000fea:	bd90      	pop	{r4, r7, pc}
 8000fec:	50000400 	.word	0x50000400
 8000ff0:	2000025c 	.word	0x2000025c
 8000ff4:	200001c0 	.word	0x200001c0
 8000ff8:	08005784 	.word	0x08005784
 8000ffc:	08005790 	.word	0x08005790
 8001000:	200000dc 	.word	0x200000dc

08001004 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800100c:	4a14      	ldr	r2, [pc, #80]	@ (8001060 <_sbrk+0x5c>)
 800100e:	4b15      	ldr	r3, [pc, #84]	@ (8001064 <_sbrk+0x60>)
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001018:	4b13      	ldr	r3, [pc, #76]	@ (8001068 <_sbrk+0x64>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d102      	bne.n	8001026 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001020:	4b11      	ldr	r3, [pc, #68]	@ (8001068 <_sbrk+0x64>)
 8001022:	4a12      	ldr	r2, [pc, #72]	@ (800106c <_sbrk+0x68>)
 8001024:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001026:	4b10      	ldr	r3, [pc, #64]	@ (8001068 <_sbrk+0x64>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	18d3      	adds	r3, r2, r3
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	429a      	cmp	r2, r3
 8001032:	d207      	bcs.n	8001044 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001034:	f003 ff24 	bl	8004e80 <__errno>
 8001038:	0003      	movs	r3, r0
 800103a:	220c      	movs	r2, #12
 800103c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800103e:	2301      	movs	r3, #1
 8001040:	425b      	negs	r3, r3
 8001042:	e009      	b.n	8001058 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001044:	4b08      	ldr	r3, [pc, #32]	@ (8001068 <_sbrk+0x64>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800104a:	4b07      	ldr	r3, [pc, #28]	@ (8001068 <_sbrk+0x64>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	18d2      	adds	r2, r2, r3
 8001052:	4b05      	ldr	r3, [pc, #20]	@ (8001068 <_sbrk+0x64>)
 8001054:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001056:	68fb      	ldr	r3, [r7, #12]
}
 8001058:	0018      	movs	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	b006      	add	sp, #24
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20002000 	.word	0x20002000
 8001064:	00000400 	.word	0x00000400
 8001068:	20000260 	.word	0x20000260
 800106c:	200003b0 	.word	0x200003b0

08001070 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001074:	46c0      	nop			@ (mov r8, r8)
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800107c:	480d      	ldr	r0, [pc, #52]	@ (80010b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800107e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001080:	f7ff fff6 	bl	8001070 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001084:	480c      	ldr	r0, [pc, #48]	@ (80010b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001086:	490d      	ldr	r1, [pc, #52]	@ (80010bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001088:	4a0d      	ldr	r2, [pc, #52]	@ (80010c0 <LoopForever+0xe>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800108c:	e002      	b.n	8001094 <LoopCopyDataInit>

0800108e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001092:	3304      	adds	r3, #4

08001094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001098:	d3f9      	bcc.n	800108e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109a:	4a0a      	ldr	r2, [pc, #40]	@ (80010c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800109c:	4c0a      	ldr	r4, [pc, #40]	@ (80010c8 <LoopForever+0x16>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a0:	e001      	b.n	80010a6 <LoopFillZerobss>

080010a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a4:	3204      	adds	r2, #4

080010a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a8:	d3fb      	bcc.n	80010a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010aa:	f003 feef 	bl	8004e8c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80010ae:	f7ff fa7f 	bl	80005b0 <main>

080010b2 <LoopForever>:

LoopForever:
  b LoopForever
 80010b2:	e7fe      	b.n	80010b2 <LoopForever>
  ldr   r0, =_estack
 80010b4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80010b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010bc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80010c0:	080058c0 	.word	0x080058c0
  ldr r2, =_sbss
 80010c4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80010c8:	200003b0 	.word	0x200003b0

080010cc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010cc:	e7fe      	b.n	80010cc <ADC1_IRQHandler>
	...

080010d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010d6:	1dfb      	adds	r3, r7, #7
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010dc:	4b0b      	ldr	r3, [pc, #44]	@ (800110c <HAL_Init+0x3c>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4b0a      	ldr	r3, [pc, #40]	@ (800110c <HAL_Init+0x3c>)
 80010e2:	2180      	movs	r1, #128	@ 0x80
 80010e4:	0049      	lsls	r1, r1, #1
 80010e6:	430a      	orrs	r2, r1
 80010e8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010ea:	2003      	movs	r0, #3
 80010ec:	f000 f810 	bl	8001110 <HAL_InitTick>
 80010f0:	1e03      	subs	r3, r0, #0
 80010f2:	d003      	beq.n	80010fc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80010f4:	1dfb      	adds	r3, r7, #7
 80010f6:	2201      	movs	r2, #1
 80010f8:	701a      	strb	r2, [r3, #0]
 80010fa:	e001      	b.n	8001100 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80010fc:	f7ff fd5e 	bl	8000bbc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001100:	1dfb      	adds	r3, r7, #7
 8001102:	781b      	ldrb	r3, [r3, #0]
}
 8001104:	0018      	movs	r0, r3
 8001106:	46bd      	mov	sp, r7
 8001108:	b002      	add	sp, #8
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40022000 	.word	0x40022000

08001110 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001110:	b590      	push	{r4, r7, lr}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001118:	230f      	movs	r3, #15
 800111a:	18fb      	adds	r3, r7, r3
 800111c:	2200      	movs	r2, #0
 800111e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001120:	4b1d      	ldr	r3, [pc, #116]	@ (8001198 <HAL_InitTick+0x88>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d02b      	beq.n	8001180 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001128:	4b1c      	ldr	r3, [pc, #112]	@ (800119c <HAL_InitTick+0x8c>)
 800112a:	681c      	ldr	r4, [r3, #0]
 800112c:	4b1a      	ldr	r3, [pc, #104]	@ (8001198 <HAL_InitTick+0x88>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	0019      	movs	r1, r3
 8001132:	23fa      	movs	r3, #250	@ 0xfa
 8001134:	0098      	lsls	r0, r3, #2
 8001136:	f7fe ffed 	bl	8000114 <__udivsi3>
 800113a:	0003      	movs	r3, r0
 800113c:	0019      	movs	r1, r3
 800113e:	0020      	movs	r0, r4
 8001140:	f7fe ffe8 	bl	8000114 <__udivsi3>
 8001144:	0003      	movs	r3, r0
 8001146:	0018      	movs	r0, r3
 8001148:	f001 f877 	bl	800223a <HAL_SYSTICK_Config>
 800114c:	1e03      	subs	r3, r0, #0
 800114e:	d112      	bne.n	8001176 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2b03      	cmp	r3, #3
 8001154:	d80a      	bhi.n	800116c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	2301      	movs	r3, #1
 800115a:	425b      	negs	r3, r3
 800115c:	2200      	movs	r2, #0
 800115e:	0018      	movs	r0, r3
 8001160:	f001 f846 	bl	80021f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001164:	4b0e      	ldr	r3, [pc, #56]	@ (80011a0 <HAL_InitTick+0x90>)
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	e00d      	b.n	8001188 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800116c:	230f      	movs	r3, #15
 800116e:	18fb      	adds	r3, r7, r3
 8001170:	2201      	movs	r2, #1
 8001172:	701a      	strb	r2, [r3, #0]
 8001174:	e008      	b.n	8001188 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001176:	230f      	movs	r3, #15
 8001178:	18fb      	adds	r3, r7, r3
 800117a:	2201      	movs	r2, #1
 800117c:	701a      	strb	r2, [r3, #0]
 800117e:	e003      	b.n	8001188 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001180:	230f      	movs	r3, #15
 8001182:	18fb      	adds	r3, r7, r3
 8001184:	2201      	movs	r2, #1
 8001186:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001188:	230f      	movs	r3, #15
 800118a:	18fb      	adds	r3, r7, r3
 800118c:	781b      	ldrb	r3, [r3, #0]
}
 800118e:	0018      	movs	r0, r3
 8001190:	46bd      	mov	sp, r7
 8001192:	b005      	add	sp, #20
 8001194:	bd90      	pop	{r4, r7, pc}
 8001196:	46c0      	nop			@ (mov r8, r8)
 8001198:	20000008 	.word	0x20000008
 800119c:	20000000 	.word	0x20000000
 80011a0:	20000004 	.word	0x20000004

080011a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011a8:	4b05      	ldr	r3, [pc, #20]	@ (80011c0 <HAL_IncTick+0x1c>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	001a      	movs	r2, r3
 80011ae:	4b05      	ldr	r3, [pc, #20]	@ (80011c4 <HAL_IncTick+0x20>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	18d2      	adds	r2, r2, r3
 80011b4:	4b03      	ldr	r3, [pc, #12]	@ (80011c4 <HAL_IncTick+0x20>)
 80011b6:	601a      	str	r2, [r3, #0]
}
 80011b8:	46c0      	nop			@ (mov r8, r8)
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	46c0      	nop			@ (mov r8, r8)
 80011c0:	20000008 	.word	0x20000008
 80011c4:	20000264 	.word	0x20000264

080011c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  return uwTick;
 80011cc:	4b02      	ldr	r3, [pc, #8]	@ (80011d8 <HAL_GetTick+0x10>)
 80011ce:	681b      	ldr	r3, [r3, #0]
}
 80011d0:	0018      	movs	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	46c0      	nop			@ (mov r8, r8)
 80011d8:	20000264 	.word	0x20000264

080011dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011e4:	f7ff fff0 	bl	80011c8 <HAL_GetTick>
 80011e8:	0003      	movs	r3, r0
 80011ea:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	3301      	adds	r3, #1
 80011f4:	d005      	beq.n	8001202 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001220 <HAL_Delay+0x44>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	001a      	movs	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	189b      	adds	r3, r3, r2
 8001200:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001202:	46c0      	nop			@ (mov r8, r8)
 8001204:	f7ff ffe0 	bl	80011c8 <HAL_GetTick>
 8001208:	0002      	movs	r2, r0
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	429a      	cmp	r2, r3
 8001212:	d8f7      	bhi.n	8001204 <HAL_Delay+0x28>
  {
  }
}
 8001214:	46c0      	nop			@ (mov r8, r8)
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	46bd      	mov	sp, r7
 800121a:	b004      	add	sp, #16
 800121c:	bd80      	pop	{r7, pc}
 800121e:	46c0      	nop			@ (mov r8, r8)
 8001220:	20000008 	.word	0x20000008

08001224 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a05      	ldr	r2, [pc, #20]	@ (8001248 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001234:	401a      	ands	r2, r3
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	431a      	orrs	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	601a      	str	r2, [r3, #0]
}
 800123e:	46c0      	nop			@ (mov r8, r8)
 8001240:	46bd      	mov	sp, r7
 8001242:	b002      	add	sp, #8
 8001244:	bd80      	pop	{r7, pc}
 8001246:	46c0      	nop			@ (mov r8, r8)
 8001248:	fe3fffff 	.word	0xfe3fffff

0800124c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	23e0      	movs	r3, #224	@ 0xe0
 800125a:	045b      	lsls	r3, r3, #17
 800125c:	4013      	ands	r3, r2
}
 800125e:	0018      	movs	r0, r3
 8001260:	46bd      	mov	sp, r7
 8001262:	b002      	add	sp, #8
 8001264:	bd80      	pop	{r7, pc}

08001266 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b084      	sub	sp, #16
 800126a:	af00      	add	r7, sp, #0
 800126c:	60f8      	str	r0, [r7, #12]
 800126e:	60b9      	str	r1, [r7, #8]
 8001270:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	68ba      	ldr	r2, [r7, #8]
 8001278:	2104      	movs	r1, #4
 800127a:	400a      	ands	r2, r1
 800127c:	2107      	movs	r1, #7
 800127e:	4091      	lsls	r1, r2
 8001280:	000a      	movs	r2, r1
 8001282:	43d2      	mvns	r2, r2
 8001284:	401a      	ands	r2, r3
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	2104      	movs	r1, #4
 800128a:	400b      	ands	r3, r1
 800128c:	6879      	ldr	r1, [r7, #4]
 800128e:	4099      	lsls	r1, r3
 8001290:	000b      	movs	r3, r1
 8001292:	431a      	orrs	r2, r3
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001298:	46c0      	nop			@ (mov r8, r8)
 800129a:	46bd      	mov	sp, r7
 800129c:	b004      	add	sp, #16
 800129e:	bd80      	pop	{r7, pc}

080012a0 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	683a      	ldr	r2, [r7, #0]
 80012b0:	2104      	movs	r1, #4
 80012b2:	400a      	ands	r2, r1
 80012b4:	2107      	movs	r1, #7
 80012b6:	4091      	lsls	r1, r2
 80012b8:	000a      	movs	r2, r1
 80012ba:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	2104      	movs	r1, #4
 80012c0:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80012c2:	40da      	lsrs	r2, r3
 80012c4:	0013      	movs	r3, r2
}
 80012c6:	0018      	movs	r0, r3
 80012c8:	46bd      	mov	sp, r7
 80012ca:	b002      	add	sp, #8
 80012cc:	bd80      	pop	{r7, pc}

080012ce <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	68da      	ldr	r2, [r3, #12]
 80012da:	23c0      	movs	r3, #192	@ 0xc0
 80012dc:	011b      	lsls	r3, r3, #4
 80012de:	4013      	ands	r3, r2
 80012e0:	d101      	bne.n	80012e6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80012e2:	2301      	movs	r3, #1
 80012e4:	e000      	b.n	80012e8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	0018      	movs	r0, r3
 80012ea:	46bd      	mov	sp, r7
 80012ec:	b002      	add	sp, #8
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001300:	68ba      	ldr	r2, [r7, #8]
 8001302:	211f      	movs	r1, #31
 8001304:	400a      	ands	r2, r1
 8001306:	210f      	movs	r1, #15
 8001308:	4091      	lsls	r1, r2
 800130a:	000a      	movs	r2, r1
 800130c:	43d2      	mvns	r2, r2
 800130e:	401a      	ands	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	0e9b      	lsrs	r3, r3, #26
 8001314:	210f      	movs	r1, #15
 8001316:	4019      	ands	r1, r3
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	201f      	movs	r0, #31
 800131c:	4003      	ands	r3, r0
 800131e:	4099      	lsls	r1, r3
 8001320:	000b      	movs	r3, r1
 8001322:	431a      	orrs	r2, r3
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001328:	46c0      	nop			@ (mov r8, r8)
 800132a:	46bd      	mov	sp, r7
 800132c:	b004      	add	sp, #16
 800132e:	bd80      	pop	{r7, pc}

08001330 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	035b      	lsls	r3, r3, #13
 8001342:	0b5b      	lsrs	r3, r3, #13
 8001344:	431a      	orrs	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800134a:	46c0      	nop			@ (mov r8, r8)
 800134c:	46bd      	mov	sp, r7
 800134e:	b002      	add	sp, #8
 8001350:	bd80      	pop	{r7, pc}

08001352 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
 800135a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001360:	683a      	ldr	r2, [r7, #0]
 8001362:	0352      	lsls	r2, r2, #13
 8001364:	0b52      	lsrs	r2, r2, #13
 8001366:	43d2      	mvns	r2, r2
 8001368:	401a      	ands	r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800136e:	46c0      	nop			@ (mov r8, r8)
 8001370:	46bd      	mov	sp, r7
 8001372:	b002      	add	sp, #8
 8001374:	bd80      	pop	{r7, pc}
	...

08001378 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	695b      	ldr	r3, [r3, #20]
 8001388:	68ba      	ldr	r2, [r7, #8]
 800138a:	0212      	lsls	r2, r2, #8
 800138c:	43d2      	mvns	r2, r2
 800138e:	401a      	ands	r2, r3
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	021b      	lsls	r3, r3, #8
 8001394:	6879      	ldr	r1, [r7, #4]
 8001396:	400b      	ands	r3, r1
 8001398:	4904      	ldr	r1, [pc, #16]	@ (80013ac <LL_ADC_SetChannelSamplingTime+0x34>)
 800139a:	400b      	ands	r3, r1
 800139c:	431a      	orrs	r2, r3
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80013a2:	46c0      	nop			@ (mov r8, r8)
 80013a4:	46bd      	mov	sp, r7
 80013a6:	b004      	add	sp, #16
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	46c0      	nop			@ (mov r8, r8)
 80013ac:	07ffff00 	.word	0x07ffff00

080013b0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	4a05      	ldr	r2, [pc, #20]	@ (80013d4 <LL_ADC_EnableInternalRegulator+0x24>)
 80013be:	4013      	ands	r3, r2
 80013c0:	2280      	movs	r2, #128	@ 0x80
 80013c2:	0552      	lsls	r2, r2, #21
 80013c4:	431a      	orrs	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80013ca:	46c0      	nop			@ (mov r8, r8)
 80013cc:	46bd      	mov	sp, r7
 80013ce:	b002      	add	sp, #8
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	46c0      	nop			@ (mov r8, r8)
 80013d4:	6fffffe8 	.word	0x6fffffe8

080013d8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689a      	ldr	r2, [r3, #8]
 80013e4:	2380      	movs	r3, #128	@ 0x80
 80013e6:	055b      	lsls	r3, r3, #21
 80013e8:	401a      	ands	r2, r3
 80013ea:	2380      	movs	r3, #128	@ 0x80
 80013ec:	055b      	lsls	r3, r3, #21
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d101      	bne.n	80013f6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80013f2:	2301      	movs	r3, #1
 80013f4:	e000      	b.n	80013f8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	0018      	movs	r0, r3
 80013fa:	46bd      	mov	sp, r7
 80013fc:	b002      	add	sp, #8
 80013fe:	bd80      	pop	{r7, pc}

08001400 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	4a04      	ldr	r2, [pc, #16]	@ (8001420 <LL_ADC_Enable+0x20>)
 800140e:	4013      	ands	r3, r2
 8001410:	2201      	movs	r2, #1
 8001412:	431a      	orrs	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001418:	46c0      	nop			@ (mov r8, r8)
 800141a:	46bd      	mov	sp, r7
 800141c:	b002      	add	sp, #8
 800141e:	bd80      	pop	{r7, pc}
 8001420:	7fffffe8 	.word	0x7fffffe8

08001424 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	4a04      	ldr	r2, [pc, #16]	@ (8001444 <LL_ADC_Disable+0x20>)
 8001432:	4013      	ands	r3, r2
 8001434:	2202      	movs	r2, #2
 8001436:	431a      	orrs	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800143c:	46c0      	nop			@ (mov r8, r8)
 800143e:	46bd      	mov	sp, r7
 8001440:	b002      	add	sp, #8
 8001442:	bd80      	pop	{r7, pc}
 8001444:	7fffffe8 	.word	0x7fffffe8

08001448 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	2201      	movs	r2, #1
 8001456:	4013      	ands	r3, r2
 8001458:	2b01      	cmp	r3, #1
 800145a:	d101      	bne.n	8001460 <LL_ADC_IsEnabled+0x18>
 800145c:	2301      	movs	r3, #1
 800145e:	e000      	b.n	8001462 <LL_ADC_IsEnabled+0x1a>
 8001460:	2300      	movs	r3, #0
}
 8001462:	0018      	movs	r0, r3
 8001464:	46bd      	mov	sp, r7
 8001466:	b002      	add	sp, #8
 8001468:	bd80      	pop	{r7, pc}

0800146a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b082      	sub	sp, #8
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	2202      	movs	r2, #2
 8001478:	4013      	ands	r3, r2
 800147a:	2b02      	cmp	r3, #2
 800147c:	d101      	bne.n	8001482 <LL_ADC_IsDisableOngoing+0x18>
 800147e:	2301      	movs	r3, #1
 8001480:	e000      	b.n	8001484 <LL_ADC_IsDisableOngoing+0x1a>
 8001482:	2300      	movs	r3, #0
}
 8001484:	0018      	movs	r0, r3
 8001486:	46bd      	mov	sp, r7
 8001488:	b002      	add	sp, #8
 800148a:	bd80      	pop	{r7, pc}

0800148c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	4a04      	ldr	r2, [pc, #16]	@ (80014ac <LL_ADC_REG_StartConversion+0x20>)
 800149a:	4013      	ands	r3, r2
 800149c:	2204      	movs	r2, #4
 800149e:	431a      	orrs	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80014a4:	46c0      	nop			@ (mov r8, r8)
 80014a6:	46bd      	mov	sp, r7
 80014a8:	b002      	add	sp, #8
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	7fffffe8 	.word	0x7fffffe8

080014b0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	4a04      	ldr	r2, [pc, #16]	@ (80014d0 <LL_ADC_REG_StopConversion+0x20>)
 80014be:	4013      	ands	r3, r2
 80014c0:	2210      	movs	r2, #16
 80014c2:	431a      	orrs	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80014c8:	46c0      	nop			@ (mov r8, r8)
 80014ca:	46bd      	mov	sp, r7
 80014cc:	b002      	add	sp, #8
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	7fffffe8 	.word	0x7fffffe8

080014d4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	2204      	movs	r2, #4
 80014e2:	4013      	ands	r3, r2
 80014e4:	2b04      	cmp	r3, #4
 80014e6:	d101      	bne.n	80014ec <LL_ADC_REG_IsConversionOngoing+0x18>
 80014e8:	2301      	movs	r3, #1
 80014ea:	e000      	b.n	80014ee <LL_ADC_REG_IsConversionOngoing+0x1a>
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	0018      	movs	r0, r3
 80014f0:	46bd      	mov	sp, r7
 80014f2:	b002      	add	sp, #8
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b088      	sub	sp, #32
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001500:	231f      	movs	r3, #31
 8001502:	18fb      	adds	r3, r7, r3
 8001504:	2200      	movs	r2, #0
 8001506:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001508:	2300      	movs	r3, #0
 800150a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001510:	2300      	movs	r3, #0
 8001512:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d101      	bne.n	800151e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e17f      	b.n	800181e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001522:	2b00      	cmp	r3, #0
 8001524:	d10a      	bne.n	800153c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	0018      	movs	r0, r3
 800152a:	f7ff fb6b 	bl	8000c04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2254      	movs	r2, #84	@ 0x54
 8001538:	2100      	movs	r1, #0
 800153a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	0018      	movs	r0, r3
 8001542:	f7ff ff49 	bl	80013d8 <LL_ADC_IsInternalRegulatorEnabled>
 8001546:	1e03      	subs	r3, r0, #0
 8001548:	d115      	bne.n	8001576 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	0018      	movs	r0, r3
 8001550:	f7ff ff2e 	bl	80013b0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001554:	4bb4      	ldr	r3, [pc, #720]	@ (8001828 <HAL_ADC_Init+0x330>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	49b4      	ldr	r1, [pc, #720]	@ (800182c <HAL_ADC_Init+0x334>)
 800155a:	0018      	movs	r0, r3
 800155c:	f7fe fdda 	bl	8000114 <__udivsi3>
 8001560:	0003      	movs	r3, r0
 8001562:	3301      	adds	r3, #1
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001568:	e002      	b.n	8001570 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	3b01      	subs	r3, #1
 800156e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1f9      	bne.n	800156a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	0018      	movs	r0, r3
 800157c:	f7ff ff2c 	bl	80013d8 <LL_ADC_IsInternalRegulatorEnabled>
 8001580:	1e03      	subs	r3, r0, #0
 8001582:	d10f      	bne.n	80015a4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001588:	2210      	movs	r2, #16
 800158a:	431a      	orrs	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001594:	2201      	movs	r2, #1
 8001596:	431a      	orrs	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800159c:	231f      	movs	r3, #31
 800159e:	18fb      	adds	r3, r7, r3
 80015a0:	2201      	movs	r2, #1
 80015a2:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	0018      	movs	r0, r3
 80015aa:	f7ff ff93 	bl	80014d4 <LL_ADC_REG_IsConversionOngoing>
 80015ae:	0003      	movs	r3, r0
 80015b0:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b6:	2210      	movs	r2, #16
 80015b8:	4013      	ands	r3, r2
 80015ba:	d000      	beq.n	80015be <HAL_ADC_Init+0xc6>
 80015bc:	e122      	b.n	8001804 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d000      	beq.n	80015c6 <HAL_ADC_Init+0xce>
 80015c4:	e11e      	b.n	8001804 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ca:	4a99      	ldr	r2, [pc, #612]	@ (8001830 <HAL_ADC_Init+0x338>)
 80015cc:	4013      	ands	r3, r2
 80015ce:	2202      	movs	r2, #2
 80015d0:	431a      	orrs	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	0018      	movs	r0, r3
 80015dc:	f7ff ff34 	bl	8001448 <LL_ADC_IsEnabled>
 80015e0:	1e03      	subs	r3, r0, #0
 80015e2:	d000      	beq.n	80015e6 <HAL_ADC_Init+0xee>
 80015e4:	e0ad      	b.n	8001742 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	7e1b      	ldrb	r3, [r3, #24]
 80015ee:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80015f0:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	7e5b      	ldrb	r3, [r3, #25]
 80015f6:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80015f8:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	7e9b      	ldrb	r3, [r3, #26]
 80015fe:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001600:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001606:	2b00      	cmp	r3, #0
 8001608:	d002      	beq.n	8001610 <HAL_ADC_Init+0x118>
 800160a:	2380      	movs	r3, #128	@ 0x80
 800160c:	015b      	lsls	r3, r3, #5
 800160e:	e000      	b.n	8001612 <HAL_ADC_Init+0x11a>
 8001610:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001612:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001618:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	2b00      	cmp	r3, #0
 8001620:	da04      	bge.n	800162c <HAL_ADC_Init+0x134>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	085b      	lsrs	r3, r3, #1
 800162a:	e001      	b.n	8001630 <HAL_ADC_Init+0x138>
 800162c:	2380      	movs	r3, #128	@ 0x80
 800162e:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001630:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	212c      	movs	r1, #44	@ 0x2c
 8001636:	5c5b      	ldrb	r3, [r3, r1]
 8001638:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800163a:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4313      	orrs	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2220      	movs	r2, #32
 8001646:	5c9b      	ldrb	r3, [r3, r2]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d115      	bne.n	8001678 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	7e9b      	ldrb	r3, [r3, #26]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d105      	bne.n	8001660 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	2280      	movs	r2, #128	@ 0x80
 8001658:	0252      	lsls	r2, r2, #9
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
 800165e:	e00b      	b.n	8001678 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001664:	2220      	movs	r2, #32
 8001666:	431a      	orrs	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001670:	2201      	movs	r2, #1
 8001672:	431a      	orrs	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800167c:	2b00      	cmp	r3, #0
 800167e:	d00a      	beq.n	8001696 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001684:	23e0      	movs	r3, #224	@ 0xe0
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800168e:	4313      	orrs	r3, r2
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	4313      	orrs	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	4a65      	ldr	r2, [pc, #404]	@ (8001834 <HAL_ADC_Init+0x33c>)
 800169e:	4013      	ands	r3, r2
 80016a0:	0019      	movs	r1, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	430a      	orrs	r2, r1
 80016aa:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	0f9b      	lsrs	r3, r3, #30
 80016b2:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80016b8:	4313      	orrs	r3, r2
 80016ba:	697a      	ldr	r2, [r7, #20]
 80016bc:	4313      	orrs	r3, r2
 80016be:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	223c      	movs	r2, #60	@ 0x3c
 80016c4:	5c9b      	ldrb	r3, [r3, r2]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d111      	bne.n	80016ee <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	0f9b      	lsrs	r3, r3, #30
 80016d0:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80016d6:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 80016dc:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80016e2:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	2201      	movs	r2, #1
 80016ea:	4313      	orrs	r3, r2
 80016ec:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	691b      	ldr	r3, [r3, #16]
 80016f4:	4a50      	ldr	r2, [pc, #320]	@ (8001838 <HAL_ADC_Init+0x340>)
 80016f6:	4013      	ands	r3, r2
 80016f8:	0019      	movs	r1, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	697a      	ldr	r2, [r7, #20]
 8001700:	430a      	orrs	r2, r1
 8001702:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685a      	ldr	r2, [r3, #4]
 8001708:	23c0      	movs	r3, #192	@ 0xc0
 800170a:	061b      	lsls	r3, r3, #24
 800170c:	429a      	cmp	r2, r3
 800170e:	d018      	beq.n	8001742 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001714:	2380      	movs	r3, #128	@ 0x80
 8001716:	05db      	lsls	r3, r3, #23
 8001718:	429a      	cmp	r2, r3
 800171a:	d012      	beq.n	8001742 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001720:	2380      	movs	r3, #128	@ 0x80
 8001722:	061b      	lsls	r3, r3, #24
 8001724:	429a      	cmp	r2, r3
 8001726:	d00c      	beq.n	8001742 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001728:	4b44      	ldr	r3, [pc, #272]	@ (800183c <HAL_ADC_Init+0x344>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a44      	ldr	r2, [pc, #272]	@ (8001840 <HAL_ADC_Init+0x348>)
 800172e:	4013      	ands	r3, r2
 8001730:	0019      	movs	r1, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	23f0      	movs	r3, #240	@ 0xf0
 8001738:	039b      	lsls	r3, r3, #14
 800173a:	401a      	ands	r2, r3
 800173c:	4b3f      	ldr	r3, [pc, #252]	@ (800183c <HAL_ADC_Init+0x344>)
 800173e:	430a      	orrs	r2, r1
 8001740:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6818      	ldr	r0, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800174a:	001a      	movs	r2, r3
 800174c:	2100      	movs	r1, #0
 800174e:	f7ff fd8a 	bl	8001266 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6818      	ldr	r0, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800175a:	493a      	ldr	r1, [pc, #232]	@ (8001844 <HAL_ADC_Init+0x34c>)
 800175c:	001a      	movs	r2, r3
 800175e:	f7ff fd82 	bl	8001266 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d109      	bne.n	800177e <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2110      	movs	r1, #16
 8001776:	4249      	negs	r1, r1
 8001778:	430a      	orrs	r2, r1
 800177a:	629a      	str	r2, [r3, #40]	@ 0x28
 800177c:	e018      	b.n	80017b0 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	691a      	ldr	r2, [r3, #16]
 8001782:	2380      	movs	r3, #128	@ 0x80
 8001784:	039b      	lsls	r3, r3, #14
 8001786:	429a      	cmp	r2, r3
 8001788:	d112      	bne.n	80017b0 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	69db      	ldr	r3, [r3, #28]
 8001794:	3b01      	subs	r3, #1
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	221c      	movs	r2, #28
 800179a:	4013      	ands	r3, r2
 800179c:	2210      	movs	r2, #16
 800179e:	4252      	negs	r2, r2
 80017a0:	409a      	lsls	r2, r3
 80017a2:	0011      	movs	r1, r2
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	430a      	orrs	r2, r1
 80017ae:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2100      	movs	r1, #0
 80017b6:	0018      	movs	r0, r3
 80017b8:	f7ff fd72 	bl	80012a0 <LL_ADC_GetSamplingTimeCommonChannels>
 80017bc:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d10b      	bne.n	80017de <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017d0:	2203      	movs	r2, #3
 80017d2:	4393      	bics	r3, r2
 80017d4:	2201      	movs	r2, #1
 80017d6:	431a      	orrs	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80017dc:	e01c      	b.n	8001818 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017e2:	2212      	movs	r2, #18
 80017e4:	4393      	bics	r3, r2
 80017e6:	2210      	movs	r2, #16
 80017e8:	431a      	orrs	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017f2:	2201      	movs	r2, #1
 80017f4:	431a      	orrs	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80017fa:	231f      	movs	r3, #31
 80017fc:	18fb      	adds	r3, r7, r3
 80017fe:	2201      	movs	r2, #1
 8001800:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001802:	e009      	b.n	8001818 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001808:	2210      	movs	r2, #16
 800180a:	431a      	orrs	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001810:	231f      	movs	r3, #31
 8001812:	18fb      	adds	r3, r7, r3
 8001814:	2201      	movs	r2, #1
 8001816:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001818:	231f      	movs	r3, #31
 800181a:	18fb      	adds	r3, r7, r3
 800181c:	781b      	ldrb	r3, [r3, #0]
}
 800181e:	0018      	movs	r0, r3
 8001820:	46bd      	mov	sp, r7
 8001822:	b008      	add	sp, #32
 8001824:	bd80      	pop	{r7, pc}
 8001826:	46c0      	nop			@ (mov r8, r8)
 8001828:	20000000 	.word	0x20000000
 800182c:	00030d40 	.word	0x00030d40
 8001830:	fffffefd 	.word	0xfffffefd
 8001834:	ffde0201 	.word	0xffde0201
 8001838:	1ffffc02 	.word	0x1ffffc02
 800183c:	40012708 	.word	0x40012708
 8001840:	ffc3ffff 	.word	0xffc3ffff
 8001844:	07ffff04 	.word	0x07ffff04

08001848 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001848:	b5b0      	push	{r4, r5, r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	0018      	movs	r0, r3
 8001856:	f7ff fe3d 	bl	80014d4 <LL_ADC_REG_IsConversionOngoing>
 800185a:	1e03      	subs	r3, r0, #0
 800185c:	d135      	bne.n	80018ca <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2254      	movs	r2, #84	@ 0x54
 8001862:	5c9b      	ldrb	r3, [r3, r2]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d101      	bne.n	800186c <HAL_ADC_Start+0x24>
 8001868:	2302      	movs	r3, #2
 800186a:	e035      	b.n	80018d8 <HAL_ADC_Start+0x90>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2254      	movs	r2, #84	@ 0x54
 8001870:	2101      	movs	r1, #1
 8001872:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001874:	250f      	movs	r5, #15
 8001876:	197c      	adds	r4, r7, r5
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	0018      	movs	r0, r3
 800187c:	f000 fb28 	bl	8001ed0 <ADC_Enable>
 8001880:	0003      	movs	r3, r0
 8001882:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001884:	197b      	adds	r3, r7, r5
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d119      	bne.n	80018c0 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001890:	4a13      	ldr	r2, [pc, #76]	@ (80018e0 <HAL_ADC_Start+0x98>)
 8001892:	4013      	ands	r3, r2
 8001894:	2280      	movs	r2, #128	@ 0x80
 8001896:	0052      	lsls	r2, r2, #1
 8001898:	431a      	orrs	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	221c      	movs	r2, #28
 80018aa:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2254      	movs	r2, #84	@ 0x54
 80018b0:	2100      	movs	r1, #0
 80018b2:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	0018      	movs	r0, r3
 80018ba:	f7ff fde7 	bl	800148c <LL_ADC_REG_StartConversion>
 80018be:	e008      	b.n	80018d2 <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2254      	movs	r2, #84	@ 0x54
 80018c4:	2100      	movs	r1, #0
 80018c6:	5499      	strb	r1, [r3, r2]
 80018c8:	e003      	b.n	80018d2 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80018ca:	230f      	movs	r3, #15
 80018cc:	18fb      	adds	r3, r7, r3
 80018ce:	2202      	movs	r2, #2
 80018d0:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80018d2:	230f      	movs	r3, #15
 80018d4:	18fb      	adds	r3, r7, r3
 80018d6:	781b      	ldrb	r3, [r3, #0]
}
 80018d8:	0018      	movs	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	b004      	add	sp, #16
 80018de:	bdb0      	pop	{r4, r5, r7, pc}
 80018e0:	fffff0fe 	.word	0xfffff0fe

080018e4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80018e4:	b5b0      	push	{r4, r5, r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2254      	movs	r2, #84	@ 0x54
 80018f0:	5c9b      	ldrb	r3, [r3, r2]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d101      	bne.n	80018fa <HAL_ADC_Stop+0x16>
 80018f6:	2302      	movs	r3, #2
 80018f8:	e029      	b.n	800194e <HAL_ADC_Stop+0x6a>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2254      	movs	r2, #84	@ 0x54
 80018fe:	2101      	movs	r1, #1
 8001900:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001902:	250f      	movs	r5, #15
 8001904:	197c      	adds	r4, r7, r5
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	0018      	movs	r0, r3
 800190a:	f000 fa9f 	bl	8001e4c <ADC_ConversionStop>
 800190e:	0003      	movs	r3, r0
 8001910:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001912:	197b      	adds	r3, r7, r5
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d112      	bne.n	8001940 <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800191a:	197c      	adds	r4, r7, r5
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	0018      	movs	r0, r3
 8001920:	f000 fb5c 	bl	8001fdc <ADC_Disable>
 8001924:	0003      	movs	r3, r0
 8001926:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001928:	197b      	adds	r3, r7, r5
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d107      	bne.n	8001940 <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001934:	4a08      	ldr	r2, [pc, #32]	@ (8001958 <HAL_ADC_Stop+0x74>)
 8001936:	4013      	ands	r3, r2
 8001938:	2201      	movs	r2, #1
 800193a:	431a      	orrs	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2254      	movs	r2, #84	@ 0x54
 8001944:	2100      	movs	r1, #0
 8001946:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001948:	230f      	movs	r3, #15
 800194a:	18fb      	adds	r3, r7, r3
 800194c:	781b      	ldrb	r3, [r3, #0]
}
 800194e:	0018      	movs	r0, r3
 8001950:	46bd      	mov	sp, r7
 8001952:	b004      	add	sp, #16
 8001954:	bdb0      	pop	{r4, r5, r7, pc}
 8001956:	46c0      	nop			@ (mov r8, r8)
 8001958:	fffffefe 	.word	0xfffffefe

0800195c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	2b08      	cmp	r3, #8
 800196c:	d102      	bne.n	8001974 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800196e:	2308      	movs	r3, #8
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	e00f      	b.n	8001994 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	2201      	movs	r2, #1
 800197c:	4013      	ands	r3, r2
 800197e:	d007      	beq.n	8001990 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001984:	2220      	movs	r2, #32
 8001986:	431a      	orrs	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e072      	b.n	8001a76 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8001990:	2304      	movs	r3, #4
 8001992:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001994:	f7ff fc18 	bl	80011c8 <HAL_GetTick>
 8001998:	0003      	movs	r3, r0
 800199a:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800199c:	e01f      	b.n	80019de <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	3301      	adds	r3, #1
 80019a2:	d01c      	beq.n	80019de <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80019a4:	f7ff fc10 	bl	80011c8 <HAL_GetTick>
 80019a8:	0002      	movs	r2, r0
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d302      	bcc.n	80019ba <HAL_ADC_PollForConversion+0x5e>
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d111      	bne.n	80019de <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	68fa      	ldr	r2, [r7, #12]
 80019c2:	4013      	ands	r3, r2
 80019c4:	d10b      	bne.n	80019de <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ca:	2204      	movs	r2, #4
 80019cc:	431a      	orrs	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2254      	movs	r2, #84	@ 0x54
 80019d6:	2100      	movs	r1, #0
 80019d8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e04b      	b.n	8001a76 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	68fa      	ldr	r2, [r7, #12]
 80019e6:	4013      	ands	r3, r2
 80019e8:	d0d9      	beq.n	800199e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ee:	2280      	movs	r2, #128	@ 0x80
 80019f0:	0092      	lsls	r2, r2, #2
 80019f2:	431a      	orrs	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	0018      	movs	r0, r3
 80019fe:	f7ff fc66 	bl	80012ce <LL_ADC_REG_IsTriggerSourceSWStart>
 8001a02:	1e03      	subs	r3, r0, #0
 8001a04:	d02e      	beq.n	8001a64 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	7e9b      	ldrb	r3, [r3, #26]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d12a      	bne.n	8001a64 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2208      	movs	r2, #8
 8001a16:	4013      	ands	r3, r2
 8001a18:	2b08      	cmp	r3, #8
 8001a1a:	d123      	bne.n	8001a64 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	0018      	movs	r0, r3
 8001a22:	f7ff fd57 	bl	80014d4 <LL_ADC_REG_IsConversionOngoing>
 8001a26:	1e03      	subs	r3, r0, #0
 8001a28:	d110      	bne.n	8001a4c <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	685a      	ldr	r2, [r3, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	210c      	movs	r1, #12
 8001a36:	438a      	bics	r2, r1
 8001a38:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a3e:	4a10      	ldr	r2, [pc, #64]	@ (8001a80 <HAL_ADC_PollForConversion+0x124>)
 8001a40:	4013      	ands	r3, r2
 8001a42:	2201      	movs	r2, #1
 8001a44:	431a      	orrs	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	659a      	str	r2, [r3, #88]	@ 0x58
 8001a4a:	e00b      	b.n	8001a64 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a50:	2220      	movs	r2, #32
 8001a52:	431a      	orrs	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	7e1b      	ldrb	r3, [r3, #24]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d103      	bne.n	8001a74 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	220c      	movs	r2, #12
 8001a72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	0018      	movs	r0, r3
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	b004      	add	sp, #16
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	46c0      	nop			@ (mov r8, r8)
 8001a80:	fffffefe 	.word	0xfffffefe

08001a84 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001a92:	0018      	movs	r0, r3
 8001a94:	46bd      	mov	sp, r7
 8001a96:	b002      	add	sp, #8
 8001a98:	bd80      	pop	{r7, pc}
	...

08001a9c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aa6:	2317      	movs	r3, #23
 8001aa8:	18fb      	adds	r3, r7, r3
 8001aaa:	2200      	movs	r2, #0
 8001aac:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2254      	movs	r2, #84	@ 0x54
 8001ab6:	5c9b      	ldrb	r3, [r3, r2]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d101      	bne.n	8001ac0 <HAL_ADC_ConfigChannel+0x24>
 8001abc:	2302      	movs	r3, #2
 8001abe:	e1c0      	b.n	8001e42 <HAL_ADC_ConfigChannel+0x3a6>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2254      	movs	r2, #84	@ 0x54
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	0018      	movs	r0, r3
 8001ace:	f7ff fd01 	bl	80014d4 <LL_ADC_REG_IsConversionOngoing>
 8001ad2:	1e03      	subs	r3, r0, #0
 8001ad4:	d000      	beq.n	8001ad8 <HAL_ADC_ConfigChannel+0x3c>
 8001ad6:	e1a3      	b.n	8001e20 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d100      	bne.n	8001ae2 <HAL_ADC_ConfigChannel+0x46>
 8001ae0:	e143      	b.n	8001d6a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	691a      	ldr	r2, [r3, #16]
 8001ae6:	2380      	movs	r3, #128	@ 0x80
 8001ae8:	061b      	lsls	r3, r3, #24
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d004      	beq.n	8001af8 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001af2:	4ac1      	ldr	r2, [pc, #772]	@ (8001df8 <HAL_ADC_ConfigChannel+0x35c>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d108      	bne.n	8001b0a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	0019      	movs	r1, r3
 8001b02:	0010      	movs	r0, r2
 8001b04:	f7ff fc14 	bl	8001330 <LL_ADC_REG_SetSequencerChAdd>
 8001b08:	e0c9      	b.n	8001c9e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	211f      	movs	r1, #31
 8001b14:	400b      	ands	r3, r1
 8001b16:	210f      	movs	r1, #15
 8001b18:	4099      	lsls	r1, r3
 8001b1a:	000b      	movs	r3, r1
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	4013      	ands	r3, r2
 8001b20:	0019      	movs	r1, r3
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	035b      	lsls	r3, r3, #13
 8001b28:	0b5b      	lsrs	r3, r3, #13
 8001b2a:	d105      	bne.n	8001b38 <HAL_ADC_ConfigChannel+0x9c>
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	0e9b      	lsrs	r3, r3, #26
 8001b32:	221f      	movs	r2, #31
 8001b34:	4013      	ands	r3, r2
 8001b36:	e098      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1ce>
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	4013      	ands	r3, r2
 8001b40:	d000      	beq.n	8001b44 <HAL_ADC_ConfigChannel+0xa8>
 8001b42:	e091      	b.n	8001c68 <HAL_ADC_ConfigChannel+0x1cc>
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2202      	movs	r2, #2
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	d000      	beq.n	8001b50 <HAL_ADC_ConfigChannel+0xb4>
 8001b4e:	e089      	b.n	8001c64 <HAL_ADC_ConfigChannel+0x1c8>
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2204      	movs	r2, #4
 8001b56:	4013      	ands	r3, r2
 8001b58:	d000      	beq.n	8001b5c <HAL_ADC_ConfigChannel+0xc0>
 8001b5a:	e081      	b.n	8001c60 <HAL_ADC_ConfigChannel+0x1c4>
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2208      	movs	r2, #8
 8001b62:	4013      	ands	r3, r2
 8001b64:	d000      	beq.n	8001b68 <HAL_ADC_ConfigChannel+0xcc>
 8001b66:	e079      	b.n	8001c5c <HAL_ADC_ConfigChannel+0x1c0>
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2210      	movs	r2, #16
 8001b6e:	4013      	ands	r3, r2
 8001b70:	d000      	beq.n	8001b74 <HAL_ADC_ConfigChannel+0xd8>
 8001b72:	e071      	b.n	8001c58 <HAL_ADC_ConfigChannel+0x1bc>
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2220      	movs	r2, #32
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	d000      	beq.n	8001b80 <HAL_ADC_ConfigChannel+0xe4>
 8001b7e:	e069      	b.n	8001c54 <HAL_ADC_ConfigChannel+0x1b8>
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2240      	movs	r2, #64	@ 0x40
 8001b86:	4013      	ands	r3, r2
 8001b88:	d000      	beq.n	8001b8c <HAL_ADC_ConfigChannel+0xf0>
 8001b8a:	e061      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x1b4>
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2280      	movs	r2, #128	@ 0x80
 8001b92:	4013      	ands	r3, r2
 8001b94:	d000      	beq.n	8001b98 <HAL_ADC_ConfigChannel+0xfc>
 8001b96:	e059      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x1b0>
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	2380      	movs	r3, #128	@ 0x80
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	d151      	bne.n	8001c48 <HAL_ADC_ConfigChannel+0x1ac>
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	2380      	movs	r3, #128	@ 0x80
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	4013      	ands	r3, r2
 8001bae:	d149      	bne.n	8001c44 <HAL_ADC_ConfigChannel+0x1a8>
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	2380      	movs	r3, #128	@ 0x80
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	4013      	ands	r3, r2
 8001bba:	d141      	bne.n	8001c40 <HAL_ADC_ConfigChannel+0x1a4>
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	2380      	movs	r3, #128	@ 0x80
 8001bc2:	011b      	lsls	r3, r3, #4
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	d139      	bne.n	8001c3c <HAL_ADC_ConfigChannel+0x1a0>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	2380      	movs	r3, #128	@ 0x80
 8001bce:	015b      	lsls	r3, r3, #5
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	d131      	bne.n	8001c38 <HAL_ADC_ConfigChannel+0x19c>
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	2380      	movs	r3, #128	@ 0x80
 8001bda:	019b      	lsls	r3, r3, #6
 8001bdc:	4013      	ands	r3, r2
 8001bde:	d129      	bne.n	8001c34 <HAL_ADC_ConfigChannel+0x198>
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	2380      	movs	r3, #128	@ 0x80
 8001be6:	01db      	lsls	r3, r3, #7
 8001be8:	4013      	ands	r3, r2
 8001bea:	d121      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x194>
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	2380      	movs	r3, #128	@ 0x80
 8001bf2:	021b      	lsls	r3, r3, #8
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d119      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x190>
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	2380      	movs	r3, #128	@ 0x80
 8001bfe:	025b      	lsls	r3, r3, #9
 8001c00:	4013      	ands	r3, r2
 8001c02:	d111      	bne.n	8001c28 <HAL_ADC_ConfigChannel+0x18c>
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	2380      	movs	r3, #128	@ 0x80
 8001c0a:	029b      	lsls	r3, r3, #10
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	d109      	bne.n	8001c24 <HAL_ADC_ConfigChannel+0x188>
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	2380      	movs	r3, #128	@ 0x80
 8001c16:	02db      	lsls	r3, r3, #11
 8001c18:	4013      	ands	r3, r2
 8001c1a:	d001      	beq.n	8001c20 <HAL_ADC_ConfigChannel+0x184>
 8001c1c:	2312      	movs	r3, #18
 8001c1e:	e024      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1ce>
 8001c20:	2300      	movs	r3, #0
 8001c22:	e022      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1ce>
 8001c24:	2311      	movs	r3, #17
 8001c26:	e020      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1ce>
 8001c28:	2310      	movs	r3, #16
 8001c2a:	e01e      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1ce>
 8001c2c:	230f      	movs	r3, #15
 8001c2e:	e01c      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1ce>
 8001c30:	230e      	movs	r3, #14
 8001c32:	e01a      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1ce>
 8001c34:	230d      	movs	r3, #13
 8001c36:	e018      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1ce>
 8001c38:	230c      	movs	r3, #12
 8001c3a:	e016      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1ce>
 8001c3c:	230b      	movs	r3, #11
 8001c3e:	e014      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1ce>
 8001c40:	230a      	movs	r3, #10
 8001c42:	e012      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1ce>
 8001c44:	2309      	movs	r3, #9
 8001c46:	e010      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1ce>
 8001c48:	2308      	movs	r3, #8
 8001c4a:	e00e      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1ce>
 8001c4c:	2307      	movs	r3, #7
 8001c4e:	e00c      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1ce>
 8001c50:	2306      	movs	r3, #6
 8001c52:	e00a      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1ce>
 8001c54:	2305      	movs	r3, #5
 8001c56:	e008      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1ce>
 8001c58:	2304      	movs	r3, #4
 8001c5a:	e006      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1ce>
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e004      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1ce>
 8001c60:	2302      	movs	r3, #2
 8001c62:	e002      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1ce>
 8001c64:	2301      	movs	r3, #1
 8001c66:	e000      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1ce>
 8001c68:	2300      	movs	r3, #0
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	6852      	ldr	r2, [r2, #4]
 8001c6e:	201f      	movs	r0, #31
 8001c70:	4002      	ands	r2, r0
 8001c72:	4093      	lsls	r3, r2
 8001c74:	000a      	movs	r2, r1
 8001c76:	431a      	orrs	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	089b      	lsrs	r3, r3, #2
 8001c82:	1c5a      	adds	r2, r3, #1
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	69db      	ldr	r3, [r3, #28]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d808      	bhi.n	8001c9e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6818      	ldr	r0, [r3, #0]
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	6859      	ldr	r1, [r3, #4]
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	001a      	movs	r2, r3
 8001c9a:	f7ff fb29 	bl	80012f0 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6818      	ldr	r0, [r3, #0]
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	6819      	ldr	r1, [r3, #0]
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	001a      	movs	r2, r3
 8001cac:	f7ff fb64 	bl	8001378 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	db00      	blt.n	8001cba <HAL_ADC_ConfigChannel+0x21e>
 8001cb8:	e0bc      	b.n	8001e34 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cba:	4b50      	ldr	r3, [pc, #320]	@ (8001dfc <HAL_ADC_ConfigChannel+0x360>)
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	f7ff fac5 	bl	800124c <LL_ADC_GetCommonPathInternalCh>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a4d      	ldr	r2, [pc, #308]	@ (8001e00 <HAL_ADC_ConfigChannel+0x364>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d122      	bne.n	8001d16 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	2380      	movs	r3, #128	@ 0x80
 8001cd4:	041b      	lsls	r3, r3, #16
 8001cd6:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001cd8:	d11d      	bne.n	8001d16 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	2280      	movs	r2, #128	@ 0x80
 8001cde:	0412      	lsls	r2, r2, #16
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	4a46      	ldr	r2, [pc, #280]	@ (8001dfc <HAL_ADC_ConfigChannel+0x360>)
 8001ce4:	0019      	movs	r1, r3
 8001ce6:	0010      	movs	r0, r2
 8001ce8:	f7ff fa9c 	bl	8001224 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cec:	4b45      	ldr	r3, [pc, #276]	@ (8001e04 <HAL_ADC_ConfigChannel+0x368>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4945      	ldr	r1, [pc, #276]	@ (8001e08 <HAL_ADC_ConfigChannel+0x36c>)
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	f7fe fa0e 	bl	8000114 <__udivsi3>
 8001cf8:	0003      	movs	r3, r0
 8001cfa:	1c5a      	adds	r2, r3, #1
 8001cfc:	0013      	movs	r3, r2
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	189b      	adds	r3, r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d06:	e002      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d1f9      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001d14:	e08e      	b.n	8001e34 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a3c      	ldr	r2, [pc, #240]	@ (8001e0c <HAL_ADC_ConfigChannel+0x370>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d10e      	bne.n	8001d3e <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	2380      	movs	r3, #128	@ 0x80
 8001d24:	045b      	lsls	r3, r3, #17
 8001d26:	4013      	ands	r3, r2
 8001d28:	d109      	bne.n	8001d3e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	2280      	movs	r2, #128	@ 0x80
 8001d2e:	0452      	lsls	r2, r2, #17
 8001d30:	4313      	orrs	r3, r2
 8001d32:	4a32      	ldr	r2, [pc, #200]	@ (8001dfc <HAL_ADC_ConfigChannel+0x360>)
 8001d34:	0019      	movs	r1, r3
 8001d36:	0010      	movs	r0, r2
 8001d38:	f7ff fa74 	bl	8001224 <LL_ADC_SetCommonPathInternalCh>
 8001d3c:	e07a      	b.n	8001e34 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a33      	ldr	r2, [pc, #204]	@ (8001e10 <HAL_ADC_ConfigChannel+0x374>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d000      	beq.n	8001d4a <HAL_ADC_ConfigChannel+0x2ae>
 8001d48:	e074      	b.n	8001e34 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	2380      	movs	r3, #128	@ 0x80
 8001d4e:	03db      	lsls	r3, r3, #15
 8001d50:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001d52:	d000      	beq.n	8001d56 <HAL_ADC_ConfigChannel+0x2ba>
 8001d54:	e06e      	b.n	8001e34 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	2280      	movs	r2, #128	@ 0x80
 8001d5a:	03d2      	lsls	r2, r2, #15
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	4a27      	ldr	r2, [pc, #156]	@ (8001dfc <HAL_ADC_ConfigChannel+0x360>)
 8001d60:	0019      	movs	r1, r3
 8001d62:	0010      	movs	r0, r2
 8001d64:	f7ff fa5e 	bl	8001224 <LL_ADC_SetCommonPathInternalCh>
 8001d68:	e064      	b.n	8001e34 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	691a      	ldr	r2, [r3, #16]
 8001d6e:	2380      	movs	r3, #128	@ 0x80
 8001d70:	061b      	lsls	r3, r3, #24
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d004      	beq.n	8001d80 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001d7a:	4a1f      	ldr	r2, [pc, #124]	@ (8001df8 <HAL_ADC_ConfigChannel+0x35c>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d107      	bne.n	8001d90 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	0019      	movs	r1, r3
 8001d8a:	0010      	movs	r0, r2
 8001d8c:	f7ff fae1 	bl	8001352 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	da4d      	bge.n	8001e34 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d98:	4b18      	ldr	r3, [pc, #96]	@ (8001dfc <HAL_ADC_ConfigChannel+0x360>)
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	f7ff fa56 	bl	800124c <LL_ADC_GetCommonPathInternalCh>
 8001da0:	0003      	movs	r3, r0
 8001da2:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a15      	ldr	r2, [pc, #84]	@ (8001e00 <HAL_ADC_ConfigChannel+0x364>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d108      	bne.n	8001dc0 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	4a18      	ldr	r2, [pc, #96]	@ (8001e14 <HAL_ADC_ConfigChannel+0x378>)
 8001db2:	4013      	ands	r3, r2
 8001db4:	4a11      	ldr	r2, [pc, #68]	@ (8001dfc <HAL_ADC_ConfigChannel+0x360>)
 8001db6:	0019      	movs	r1, r3
 8001db8:	0010      	movs	r0, r2
 8001dba:	f7ff fa33 	bl	8001224 <LL_ADC_SetCommonPathInternalCh>
 8001dbe:	e039      	b.n	8001e34 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a11      	ldr	r2, [pc, #68]	@ (8001e0c <HAL_ADC_ConfigChannel+0x370>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d108      	bne.n	8001ddc <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	4a12      	ldr	r2, [pc, #72]	@ (8001e18 <HAL_ADC_ConfigChannel+0x37c>)
 8001dce:	4013      	ands	r3, r2
 8001dd0:	4a0a      	ldr	r2, [pc, #40]	@ (8001dfc <HAL_ADC_ConfigChannel+0x360>)
 8001dd2:	0019      	movs	r1, r3
 8001dd4:	0010      	movs	r0, r2
 8001dd6:	f7ff fa25 	bl	8001224 <LL_ADC_SetCommonPathInternalCh>
 8001dda:	e02b      	b.n	8001e34 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a0b      	ldr	r2, [pc, #44]	@ (8001e10 <HAL_ADC_ConfigChannel+0x374>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d126      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	4a0c      	ldr	r2, [pc, #48]	@ (8001e1c <HAL_ADC_ConfigChannel+0x380>)
 8001dea:	4013      	ands	r3, r2
 8001dec:	4a03      	ldr	r2, [pc, #12]	@ (8001dfc <HAL_ADC_ConfigChannel+0x360>)
 8001dee:	0019      	movs	r1, r3
 8001df0:	0010      	movs	r0, r2
 8001df2:	f7ff fa17 	bl	8001224 <LL_ADC_SetCommonPathInternalCh>
 8001df6:	e01d      	b.n	8001e34 <HAL_ADC_ConfigChannel+0x398>
 8001df8:	80000004 	.word	0x80000004
 8001dfc:	40012708 	.word	0x40012708
 8001e00:	b0001000 	.word	0xb0001000
 8001e04:	20000000 	.word	0x20000000
 8001e08:	00030d40 	.word	0x00030d40
 8001e0c:	b8004000 	.word	0xb8004000
 8001e10:	b4002000 	.word	0xb4002000
 8001e14:	ff7fffff 	.word	0xff7fffff
 8001e18:	feffffff 	.word	0xfeffffff
 8001e1c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e24:	2220      	movs	r2, #32
 8001e26:	431a      	orrs	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001e2c:	2317      	movs	r3, #23
 8001e2e:	18fb      	adds	r3, r7, r3
 8001e30:	2201      	movs	r2, #1
 8001e32:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2254      	movs	r2, #84	@ 0x54
 8001e38:	2100      	movs	r1, #0
 8001e3a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001e3c:	2317      	movs	r3, #23
 8001e3e:	18fb      	adds	r3, r7, r3
 8001e40:	781b      	ldrb	r3, [r3, #0]
}
 8001e42:	0018      	movs	r0, r3
 8001e44:	46bd      	mov	sp, r7
 8001e46:	b006      	add	sp, #24
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	46c0      	nop			@ (mov r8, r8)

08001e4c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	0018      	movs	r0, r3
 8001e5a:	f7ff fb3b 	bl	80014d4 <LL_ADC_REG_IsConversionOngoing>
 8001e5e:	1e03      	subs	r3, r0, #0
 8001e60:	d031      	beq.n	8001ec6 <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	0018      	movs	r0, r3
 8001e68:	f7ff faff 	bl	800146a <LL_ADC_IsDisableOngoing>
 8001e6c:	1e03      	subs	r3, r0, #0
 8001e6e:	d104      	bne.n	8001e7a <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	0018      	movs	r0, r3
 8001e76:	f7ff fb1b 	bl	80014b0 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e7a:	f7ff f9a5 	bl	80011c8 <HAL_GetTick>
 8001e7e:	0003      	movs	r3, r0
 8001e80:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001e82:	e01a      	b.n	8001eba <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001e84:	f7ff f9a0 	bl	80011c8 <HAL_GetTick>
 8001e88:	0002      	movs	r2, r0
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d913      	bls.n	8001eba <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	2204      	movs	r2, #4
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	d00d      	beq.n	8001eba <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ea2:	2210      	movs	r2, #16
 8001ea4:	431a      	orrs	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eae:	2201      	movs	r2, #1
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e006      	b.n	8001ec8 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	2204      	movs	r2, #4
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	d1de      	bne.n	8001e84 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	0018      	movs	r0, r3
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	b004      	add	sp, #16
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	f7ff fab1 	bl	8001448 <LL_ADC_IsEnabled>
 8001ee6:	1e03      	subs	r3, r0, #0
 8001ee8:	d000      	beq.n	8001eec <ADC_Enable+0x1c>
 8001eea:	e069      	b.n	8001fc0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	4a36      	ldr	r2, [pc, #216]	@ (8001fcc <ADC_Enable+0xfc>)
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d00d      	beq.n	8001f14 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001efc:	2210      	movs	r2, #16
 8001efe:	431a      	orrs	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f08:	2201      	movs	r2, #1
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e056      	b.n	8001fc2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	0018      	movs	r0, r3
 8001f1a:	f7ff fa71 	bl	8001400 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8001f1e:	4b2c      	ldr	r3, [pc, #176]	@ (8001fd0 <ADC_Enable+0x100>)
 8001f20:	0018      	movs	r0, r3
 8001f22:	f7ff f993 	bl	800124c <LL_ADC_GetCommonPathInternalCh>
 8001f26:	0002      	movs	r2, r0
 8001f28:	2380      	movs	r3, #128	@ 0x80
 8001f2a:	041b      	lsls	r3, r3, #16
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	d00f      	beq.n	8001f50 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f30:	4b28      	ldr	r3, [pc, #160]	@ (8001fd4 <ADC_Enable+0x104>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4928      	ldr	r1, [pc, #160]	@ (8001fd8 <ADC_Enable+0x108>)
 8001f36:	0018      	movs	r0, r3
 8001f38:	f7fe f8ec 	bl	8000114 <__udivsi3>
 8001f3c:	0003      	movs	r3, r0
 8001f3e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8001f40:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001f42:	e002      	b.n	8001f4a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	3b01      	subs	r3, #1
 8001f48:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1f9      	bne.n	8001f44 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	7e5b      	ldrb	r3, [r3, #25]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d033      	beq.n	8001fc0 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001f58:	f7ff f936 	bl	80011c8 <HAL_GetTick>
 8001f5c:	0003      	movs	r3, r0
 8001f5e:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f60:	e027      	b.n	8001fb2 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	0018      	movs	r0, r3
 8001f68:	f7ff fa6e 	bl	8001448 <LL_ADC_IsEnabled>
 8001f6c:	1e03      	subs	r3, r0, #0
 8001f6e:	d104      	bne.n	8001f7a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	0018      	movs	r0, r3
 8001f76:	f7ff fa43 	bl	8001400 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f7a:	f7ff f925 	bl	80011c8 <HAL_GetTick>
 8001f7e:	0002      	movs	r2, r0
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d914      	bls.n	8001fb2 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	4013      	ands	r3, r2
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d00d      	beq.n	8001fb2 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f9a:	2210      	movs	r2, #16
 8001f9c:	431a      	orrs	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e007      	b.n	8001fc2 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	4013      	ands	r3, r2
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d1d0      	bne.n	8001f62 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	0018      	movs	r0, r3
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	b004      	add	sp, #16
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	46c0      	nop			@ (mov r8, r8)
 8001fcc:	80000017 	.word	0x80000017
 8001fd0:	40012708 	.word	0x40012708
 8001fd4:	20000000 	.word	0x20000000
 8001fd8:	00030d40 	.word	0x00030d40

08001fdc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	0018      	movs	r0, r3
 8001fea:	f7ff fa3e 	bl	800146a <LL_ADC_IsDisableOngoing>
 8001fee:	0003      	movs	r3, r0
 8001ff0:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	0018      	movs	r0, r3
 8001ff8:	f7ff fa26 	bl	8001448 <LL_ADC_IsEnabled>
 8001ffc:	1e03      	subs	r3, r0, #0
 8001ffe:	d046      	beq.n	800208e <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d143      	bne.n	800208e <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	2205      	movs	r2, #5
 800200e:	4013      	ands	r3, r2
 8002010:	2b01      	cmp	r3, #1
 8002012:	d10d      	bne.n	8002030 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	0018      	movs	r0, r3
 800201a:	f7ff fa03 	bl	8001424 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2203      	movs	r2, #3
 8002024:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002026:	f7ff f8cf 	bl	80011c8 <HAL_GetTick>
 800202a:	0003      	movs	r3, r0
 800202c:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800202e:	e028      	b.n	8002082 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002034:	2210      	movs	r2, #16
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002040:	2201      	movs	r2, #1
 8002042:	431a      	orrs	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e021      	b.n	8002090 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800204c:	f7ff f8bc 	bl	80011c8 <HAL_GetTick>
 8002050:	0002      	movs	r2, r0
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d913      	bls.n	8002082 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	2201      	movs	r2, #1
 8002062:	4013      	ands	r3, r2
 8002064:	d00d      	beq.n	8002082 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800206a:	2210      	movs	r2, #16
 800206c:	431a      	orrs	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002076:	2201      	movs	r2, #1
 8002078:	431a      	orrs	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e006      	b.n	8002090 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	2201      	movs	r2, #1
 800208a:	4013      	ands	r3, r2
 800208c:	d1de      	bne.n	800204c <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	0018      	movs	r0, r3
 8002092:	46bd      	mov	sp, r7
 8002094:	b004      	add	sp, #16
 8002096:	bd80      	pop	{r7, pc}

08002098 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	0002      	movs	r2, r0
 80020a0:	1dfb      	adds	r3, r7, #7
 80020a2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80020a4:	1dfb      	adds	r3, r7, #7
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80020aa:	d809      	bhi.n	80020c0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ac:	1dfb      	adds	r3, r7, #7
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	001a      	movs	r2, r3
 80020b2:	231f      	movs	r3, #31
 80020b4:	401a      	ands	r2, r3
 80020b6:	4b04      	ldr	r3, [pc, #16]	@ (80020c8 <__NVIC_EnableIRQ+0x30>)
 80020b8:	2101      	movs	r1, #1
 80020ba:	4091      	lsls	r1, r2
 80020bc:	000a      	movs	r2, r1
 80020be:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80020c0:	46c0      	nop			@ (mov r8, r8)
 80020c2:	46bd      	mov	sp, r7
 80020c4:	b002      	add	sp, #8
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	e000e100 	.word	0xe000e100

080020cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020cc:	b590      	push	{r4, r7, lr}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	0002      	movs	r2, r0
 80020d4:	6039      	str	r1, [r7, #0]
 80020d6:	1dfb      	adds	r3, r7, #7
 80020d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80020da:	1dfb      	adds	r3, r7, #7
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2b7f      	cmp	r3, #127	@ 0x7f
 80020e0:	d828      	bhi.n	8002134 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020e2:	4a2f      	ldr	r2, [pc, #188]	@ (80021a0 <__NVIC_SetPriority+0xd4>)
 80020e4:	1dfb      	adds	r3, r7, #7
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	b25b      	sxtb	r3, r3
 80020ea:	089b      	lsrs	r3, r3, #2
 80020ec:	33c0      	adds	r3, #192	@ 0xc0
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	589b      	ldr	r3, [r3, r2]
 80020f2:	1dfa      	adds	r2, r7, #7
 80020f4:	7812      	ldrb	r2, [r2, #0]
 80020f6:	0011      	movs	r1, r2
 80020f8:	2203      	movs	r2, #3
 80020fa:	400a      	ands	r2, r1
 80020fc:	00d2      	lsls	r2, r2, #3
 80020fe:	21ff      	movs	r1, #255	@ 0xff
 8002100:	4091      	lsls	r1, r2
 8002102:	000a      	movs	r2, r1
 8002104:	43d2      	mvns	r2, r2
 8002106:	401a      	ands	r2, r3
 8002108:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	019b      	lsls	r3, r3, #6
 800210e:	22ff      	movs	r2, #255	@ 0xff
 8002110:	401a      	ands	r2, r3
 8002112:	1dfb      	adds	r3, r7, #7
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	0018      	movs	r0, r3
 8002118:	2303      	movs	r3, #3
 800211a:	4003      	ands	r3, r0
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002120:	481f      	ldr	r0, [pc, #124]	@ (80021a0 <__NVIC_SetPriority+0xd4>)
 8002122:	1dfb      	adds	r3, r7, #7
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	b25b      	sxtb	r3, r3
 8002128:	089b      	lsrs	r3, r3, #2
 800212a:	430a      	orrs	r2, r1
 800212c:	33c0      	adds	r3, #192	@ 0xc0
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002132:	e031      	b.n	8002198 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002134:	4a1b      	ldr	r2, [pc, #108]	@ (80021a4 <__NVIC_SetPriority+0xd8>)
 8002136:	1dfb      	adds	r3, r7, #7
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	0019      	movs	r1, r3
 800213c:	230f      	movs	r3, #15
 800213e:	400b      	ands	r3, r1
 8002140:	3b08      	subs	r3, #8
 8002142:	089b      	lsrs	r3, r3, #2
 8002144:	3306      	adds	r3, #6
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	18d3      	adds	r3, r2, r3
 800214a:	3304      	adds	r3, #4
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	1dfa      	adds	r2, r7, #7
 8002150:	7812      	ldrb	r2, [r2, #0]
 8002152:	0011      	movs	r1, r2
 8002154:	2203      	movs	r2, #3
 8002156:	400a      	ands	r2, r1
 8002158:	00d2      	lsls	r2, r2, #3
 800215a:	21ff      	movs	r1, #255	@ 0xff
 800215c:	4091      	lsls	r1, r2
 800215e:	000a      	movs	r2, r1
 8002160:	43d2      	mvns	r2, r2
 8002162:	401a      	ands	r2, r3
 8002164:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	019b      	lsls	r3, r3, #6
 800216a:	22ff      	movs	r2, #255	@ 0xff
 800216c:	401a      	ands	r2, r3
 800216e:	1dfb      	adds	r3, r7, #7
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	0018      	movs	r0, r3
 8002174:	2303      	movs	r3, #3
 8002176:	4003      	ands	r3, r0
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800217c:	4809      	ldr	r0, [pc, #36]	@ (80021a4 <__NVIC_SetPriority+0xd8>)
 800217e:	1dfb      	adds	r3, r7, #7
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	001c      	movs	r4, r3
 8002184:	230f      	movs	r3, #15
 8002186:	4023      	ands	r3, r4
 8002188:	3b08      	subs	r3, #8
 800218a:	089b      	lsrs	r3, r3, #2
 800218c:	430a      	orrs	r2, r1
 800218e:	3306      	adds	r3, #6
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	18c3      	adds	r3, r0, r3
 8002194:	3304      	adds	r3, #4
 8002196:	601a      	str	r2, [r3, #0]
}
 8002198:	46c0      	nop			@ (mov r8, r8)
 800219a:	46bd      	mov	sp, r7
 800219c:	b003      	add	sp, #12
 800219e:	bd90      	pop	{r4, r7, pc}
 80021a0:	e000e100 	.word	0xe000e100
 80021a4:	e000ed00 	.word	0xe000ed00

080021a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	1e5a      	subs	r2, r3, #1
 80021b4:	2380      	movs	r3, #128	@ 0x80
 80021b6:	045b      	lsls	r3, r3, #17
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d301      	bcc.n	80021c0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021bc:	2301      	movs	r3, #1
 80021be:	e010      	b.n	80021e2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021c0:	4b0a      	ldr	r3, [pc, #40]	@ (80021ec <SysTick_Config+0x44>)
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	3a01      	subs	r2, #1
 80021c6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021c8:	2301      	movs	r3, #1
 80021ca:	425b      	negs	r3, r3
 80021cc:	2103      	movs	r1, #3
 80021ce:	0018      	movs	r0, r3
 80021d0:	f7ff ff7c 	bl	80020cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021d4:	4b05      	ldr	r3, [pc, #20]	@ (80021ec <SysTick_Config+0x44>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021da:	4b04      	ldr	r3, [pc, #16]	@ (80021ec <SysTick_Config+0x44>)
 80021dc:	2207      	movs	r2, #7
 80021de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	0018      	movs	r0, r3
 80021e4:	46bd      	mov	sp, r7
 80021e6:	b002      	add	sp, #8
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	46c0      	nop			@ (mov r8, r8)
 80021ec:	e000e010 	.word	0xe000e010

080021f0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60b9      	str	r1, [r7, #8]
 80021f8:	607a      	str	r2, [r7, #4]
 80021fa:	210f      	movs	r1, #15
 80021fc:	187b      	adds	r3, r7, r1
 80021fe:	1c02      	adds	r2, r0, #0
 8002200:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002202:	68ba      	ldr	r2, [r7, #8]
 8002204:	187b      	adds	r3, r7, r1
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	b25b      	sxtb	r3, r3
 800220a:	0011      	movs	r1, r2
 800220c:	0018      	movs	r0, r3
 800220e:	f7ff ff5d 	bl	80020cc <__NVIC_SetPriority>
}
 8002212:	46c0      	nop			@ (mov r8, r8)
 8002214:	46bd      	mov	sp, r7
 8002216:	b004      	add	sp, #16
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b082      	sub	sp, #8
 800221e:	af00      	add	r7, sp, #0
 8002220:	0002      	movs	r2, r0
 8002222:	1dfb      	adds	r3, r7, #7
 8002224:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002226:	1dfb      	adds	r3, r7, #7
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	b25b      	sxtb	r3, r3
 800222c:	0018      	movs	r0, r3
 800222e:	f7ff ff33 	bl	8002098 <__NVIC_EnableIRQ>
}
 8002232:	46c0      	nop			@ (mov r8, r8)
 8002234:	46bd      	mov	sp, r7
 8002236:	b002      	add	sp, #8
 8002238:	bd80      	pop	{r7, pc}

0800223a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b082      	sub	sp, #8
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	0018      	movs	r0, r3
 8002246:	f7ff ffaf 	bl	80021a8 <SysTick_Config>
 800224a:	0003      	movs	r3, r0
}
 800224c:	0018      	movs	r0, r3
 800224e:	46bd      	mov	sp, r7
 8002250:	b002      	add	sp, #8
 8002252:	bd80      	pop	{r7, pc}

08002254 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800225e:	2300      	movs	r3, #0
 8002260:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002262:	e147      	b.n	80024f4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2101      	movs	r1, #1
 800226a:	697a      	ldr	r2, [r7, #20]
 800226c:	4091      	lsls	r1, r2
 800226e:	000a      	movs	r2, r1
 8002270:	4013      	ands	r3, r2
 8002272:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d100      	bne.n	800227c <HAL_GPIO_Init+0x28>
 800227a:	e138      	b.n	80024ee <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	2203      	movs	r2, #3
 8002282:	4013      	ands	r3, r2
 8002284:	2b01      	cmp	r3, #1
 8002286:	d005      	beq.n	8002294 <HAL_GPIO_Init+0x40>
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	2203      	movs	r2, #3
 800228e:	4013      	ands	r3, r2
 8002290:	2b02      	cmp	r3, #2
 8002292:	d130      	bne.n	80022f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	2203      	movs	r2, #3
 80022a0:	409a      	lsls	r2, r3
 80022a2:	0013      	movs	r3, r2
 80022a4:	43da      	mvns	r2, r3
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	4013      	ands	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	68da      	ldr	r2, [r3, #12]
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	409a      	lsls	r2, r3
 80022b6:	0013      	movs	r3, r2
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022ca:	2201      	movs	r2, #1
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	409a      	lsls	r2, r3
 80022d0:	0013      	movs	r3, r2
 80022d2:	43da      	mvns	r2, r3
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	4013      	ands	r3, r2
 80022d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	091b      	lsrs	r3, r3, #4
 80022e0:	2201      	movs	r2, #1
 80022e2:	401a      	ands	r2, r3
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	409a      	lsls	r2, r3
 80022e8:	0013      	movs	r3, r2
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2203      	movs	r2, #3
 80022fc:	4013      	ands	r3, r2
 80022fe:	2b03      	cmp	r3, #3
 8002300:	d017      	beq.n	8002332 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	2203      	movs	r2, #3
 800230e:	409a      	lsls	r2, r3
 8002310:	0013      	movs	r3, r2
 8002312:	43da      	mvns	r2, r3
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	4013      	ands	r3, r2
 8002318:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	689a      	ldr	r2, [r3, #8]
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	409a      	lsls	r2, r3
 8002324:	0013      	movs	r3, r2
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	4313      	orrs	r3, r2
 800232a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	2203      	movs	r2, #3
 8002338:	4013      	ands	r3, r2
 800233a:	2b02      	cmp	r3, #2
 800233c:	d123      	bne.n	8002386 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	08da      	lsrs	r2, r3, #3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3208      	adds	r2, #8
 8002346:	0092      	lsls	r2, r2, #2
 8002348:	58d3      	ldr	r3, [r2, r3]
 800234a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	2207      	movs	r2, #7
 8002350:	4013      	ands	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	220f      	movs	r2, #15
 8002356:	409a      	lsls	r2, r3
 8002358:	0013      	movs	r3, r2
 800235a:	43da      	mvns	r2, r3
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	4013      	ands	r3, r2
 8002360:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	691a      	ldr	r2, [r3, #16]
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	2107      	movs	r1, #7
 800236a:	400b      	ands	r3, r1
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	409a      	lsls	r2, r3
 8002370:	0013      	movs	r3, r2
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	4313      	orrs	r3, r2
 8002376:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	08da      	lsrs	r2, r3, #3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3208      	adds	r2, #8
 8002380:	0092      	lsls	r2, r2, #2
 8002382:	6939      	ldr	r1, [r7, #16]
 8002384:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	2203      	movs	r2, #3
 8002392:	409a      	lsls	r2, r3
 8002394:	0013      	movs	r3, r2
 8002396:	43da      	mvns	r2, r3
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	4013      	ands	r3, r2
 800239c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2203      	movs	r2, #3
 80023a4:	401a      	ands	r2, r3
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	409a      	lsls	r2, r3
 80023ac:	0013      	movs	r3, r2
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	23c0      	movs	r3, #192	@ 0xc0
 80023c0:	029b      	lsls	r3, r3, #10
 80023c2:	4013      	ands	r3, r2
 80023c4:	d100      	bne.n	80023c8 <HAL_GPIO_Init+0x174>
 80023c6:	e092      	b.n	80024ee <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80023c8:	4a50      	ldr	r2, [pc, #320]	@ (800250c <HAL_GPIO_Init+0x2b8>)
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	089b      	lsrs	r3, r3, #2
 80023ce:	3318      	adds	r3, #24
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	589b      	ldr	r3, [r3, r2]
 80023d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	2203      	movs	r2, #3
 80023da:	4013      	ands	r3, r2
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	220f      	movs	r2, #15
 80023e0:	409a      	lsls	r2, r3
 80023e2:	0013      	movs	r3, r2
 80023e4:	43da      	mvns	r2, r3
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	4013      	ands	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	23a0      	movs	r3, #160	@ 0xa0
 80023f0:	05db      	lsls	r3, r3, #23
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d013      	beq.n	800241e <HAL_GPIO_Init+0x1ca>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a45      	ldr	r2, [pc, #276]	@ (8002510 <HAL_GPIO_Init+0x2bc>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d00d      	beq.n	800241a <HAL_GPIO_Init+0x1c6>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a44      	ldr	r2, [pc, #272]	@ (8002514 <HAL_GPIO_Init+0x2c0>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d007      	beq.n	8002416 <HAL_GPIO_Init+0x1c2>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a43      	ldr	r2, [pc, #268]	@ (8002518 <HAL_GPIO_Init+0x2c4>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d101      	bne.n	8002412 <HAL_GPIO_Init+0x1be>
 800240e:	2303      	movs	r3, #3
 8002410:	e006      	b.n	8002420 <HAL_GPIO_Init+0x1cc>
 8002412:	2305      	movs	r3, #5
 8002414:	e004      	b.n	8002420 <HAL_GPIO_Init+0x1cc>
 8002416:	2302      	movs	r3, #2
 8002418:	e002      	b.n	8002420 <HAL_GPIO_Init+0x1cc>
 800241a:	2301      	movs	r3, #1
 800241c:	e000      	b.n	8002420 <HAL_GPIO_Init+0x1cc>
 800241e:	2300      	movs	r3, #0
 8002420:	697a      	ldr	r2, [r7, #20]
 8002422:	2103      	movs	r1, #3
 8002424:	400a      	ands	r2, r1
 8002426:	00d2      	lsls	r2, r2, #3
 8002428:	4093      	lsls	r3, r2
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	4313      	orrs	r3, r2
 800242e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002430:	4936      	ldr	r1, [pc, #216]	@ (800250c <HAL_GPIO_Init+0x2b8>)
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	089b      	lsrs	r3, r3, #2
 8002436:	3318      	adds	r3, #24
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800243e:	4b33      	ldr	r3, [pc, #204]	@ (800250c <HAL_GPIO_Init+0x2b8>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	43da      	mvns	r2, r3
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	4013      	ands	r3, r2
 800244c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	2380      	movs	r3, #128	@ 0x80
 8002454:	035b      	lsls	r3, r3, #13
 8002456:	4013      	ands	r3, r2
 8002458:	d003      	beq.n	8002462 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	4313      	orrs	r3, r2
 8002460:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002462:	4b2a      	ldr	r3, [pc, #168]	@ (800250c <HAL_GPIO_Init+0x2b8>)
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002468:	4b28      	ldr	r3, [pc, #160]	@ (800250c <HAL_GPIO_Init+0x2b8>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	43da      	mvns	r2, r3
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	4013      	ands	r3, r2
 8002476:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685a      	ldr	r2, [r3, #4]
 800247c:	2380      	movs	r3, #128	@ 0x80
 800247e:	039b      	lsls	r3, r3, #14
 8002480:	4013      	ands	r3, r2
 8002482:	d003      	beq.n	800248c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	4313      	orrs	r3, r2
 800248a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800248c:	4b1f      	ldr	r3, [pc, #124]	@ (800250c <HAL_GPIO_Init+0x2b8>)
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002492:	4a1e      	ldr	r2, [pc, #120]	@ (800250c <HAL_GPIO_Init+0x2b8>)
 8002494:	2384      	movs	r3, #132	@ 0x84
 8002496:	58d3      	ldr	r3, [r2, r3]
 8002498:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	43da      	mvns	r2, r3
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	4013      	ands	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	2380      	movs	r3, #128	@ 0x80
 80024aa:	029b      	lsls	r3, r3, #10
 80024ac:	4013      	ands	r3, r2
 80024ae:	d003      	beq.n	80024b8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024b8:	4914      	ldr	r1, [pc, #80]	@ (800250c <HAL_GPIO_Init+0x2b8>)
 80024ba:	2284      	movs	r2, #132	@ 0x84
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80024c0:	4a12      	ldr	r2, [pc, #72]	@ (800250c <HAL_GPIO_Init+0x2b8>)
 80024c2:	2380      	movs	r3, #128	@ 0x80
 80024c4:	58d3      	ldr	r3, [r2, r3]
 80024c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	43da      	mvns	r2, r3
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	4013      	ands	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	2380      	movs	r3, #128	@ 0x80
 80024d8:	025b      	lsls	r3, r3, #9
 80024da:	4013      	ands	r3, r2
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024e6:	4909      	ldr	r1, [pc, #36]	@ (800250c <HAL_GPIO_Init+0x2b8>)
 80024e8:	2280      	movs	r2, #128	@ 0x80
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	3301      	adds	r3, #1
 80024f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	40da      	lsrs	r2, r3
 80024fc:	1e13      	subs	r3, r2, #0
 80024fe:	d000      	beq.n	8002502 <HAL_GPIO_Init+0x2ae>
 8002500:	e6b0      	b.n	8002264 <HAL_GPIO_Init+0x10>
  }
}
 8002502:	46c0      	nop			@ (mov r8, r8)
 8002504:	46c0      	nop			@ (mov r8, r8)
 8002506:	46bd      	mov	sp, r7
 8002508:	b006      	add	sp, #24
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40021800 	.word	0x40021800
 8002510:	50000400 	.word	0x50000400
 8002514:	50000800 	.word	0x50000800
 8002518:	50000c00 	.word	0x50000c00

0800251c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	0008      	movs	r0, r1
 8002526:	0011      	movs	r1, r2
 8002528:	1cbb      	adds	r3, r7, #2
 800252a:	1c02      	adds	r2, r0, #0
 800252c:	801a      	strh	r2, [r3, #0]
 800252e:	1c7b      	adds	r3, r7, #1
 8002530:	1c0a      	adds	r2, r1, #0
 8002532:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002534:	1c7b      	adds	r3, r7, #1
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d004      	beq.n	8002546 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800253c:	1cbb      	adds	r3, r7, #2
 800253e:	881a      	ldrh	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002544:	e003      	b.n	800254e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002546:	1cbb      	adds	r3, r7, #2
 8002548:	881a      	ldrh	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800254e:	46c0      	nop			@ (mov r8, r8)
 8002550:	46bd      	mov	sp, r7
 8002552:	b002      	add	sp, #8
 8002554:	bd80      	pop	{r7, pc}
	...

08002558 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002560:	4b19      	ldr	r3, [pc, #100]	@ (80025c8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a19      	ldr	r2, [pc, #100]	@ (80025cc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002566:	4013      	ands	r3, r2
 8002568:	0019      	movs	r1, r3
 800256a:	4b17      	ldr	r3, [pc, #92]	@ (80025c8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	430a      	orrs	r2, r1
 8002570:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	2380      	movs	r3, #128	@ 0x80
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	429a      	cmp	r2, r3
 800257a:	d11f      	bne.n	80025bc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800257c:	4b14      	ldr	r3, [pc, #80]	@ (80025d0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	0013      	movs	r3, r2
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	189b      	adds	r3, r3, r2
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	4912      	ldr	r1, [pc, #72]	@ (80025d4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800258a:	0018      	movs	r0, r3
 800258c:	f7fd fdc2 	bl	8000114 <__udivsi3>
 8002590:	0003      	movs	r3, r0
 8002592:	3301      	adds	r3, #1
 8002594:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002596:	e008      	b.n	80025aa <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d003      	beq.n	80025a6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	3b01      	subs	r3, #1
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	e001      	b.n	80025aa <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e009      	b.n	80025be <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025aa:	4b07      	ldr	r3, [pc, #28]	@ (80025c8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80025ac:	695a      	ldr	r2, [r3, #20]
 80025ae:	2380      	movs	r3, #128	@ 0x80
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	401a      	ands	r2, r3
 80025b4:	2380      	movs	r3, #128	@ 0x80
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d0ed      	beq.n	8002598 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	0018      	movs	r0, r3
 80025c0:	46bd      	mov	sp, r7
 80025c2:	b004      	add	sp, #16
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	46c0      	nop			@ (mov r8, r8)
 80025c8:	40007000 	.word	0x40007000
 80025cc:	fffff9ff 	.word	0xfffff9ff
 80025d0:	20000000 	.word	0x20000000
 80025d4:	000f4240 	.word	0x000f4240

080025d8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80025dc:	4b03      	ldr	r3, [pc, #12]	@ (80025ec <LL_RCC_GetAPB1Prescaler+0x14>)
 80025de:	689a      	ldr	r2, [r3, #8]
 80025e0:	23e0      	movs	r3, #224	@ 0xe0
 80025e2:	01db      	lsls	r3, r3, #7
 80025e4:	4013      	ands	r3, r2
}
 80025e6:	0018      	movs	r0, r3
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40021000 	.word	0x40021000

080025f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b088      	sub	sp, #32
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e2f3      	b.n	8002bea <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2201      	movs	r2, #1
 8002608:	4013      	ands	r3, r2
 800260a:	d100      	bne.n	800260e <HAL_RCC_OscConfig+0x1e>
 800260c:	e07c      	b.n	8002708 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800260e:	4bc3      	ldr	r3, [pc, #780]	@ (800291c <HAL_RCC_OscConfig+0x32c>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	2238      	movs	r2, #56	@ 0x38
 8002614:	4013      	ands	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002618:	4bc0      	ldr	r3, [pc, #768]	@ (800291c <HAL_RCC_OscConfig+0x32c>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	2203      	movs	r2, #3
 800261e:	4013      	ands	r3, r2
 8002620:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	2b10      	cmp	r3, #16
 8002626:	d102      	bne.n	800262e <HAL_RCC_OscConfig+0x3e>
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	2b03      	cmp	r3, #3
 800262c:	d002      	beq.n	8002634 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	2b08      	cmp	r3, #8
 8002632:	d10b      	bne.n	800264c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002634:	4bb9      	ldr	r3, [pc, #740]	@ (800291c <HAL_RCC_OscConfig+0x32c>)
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	2380      	movs	r3, #128	@ 0x80
 800263a:	029b      	lsls	r3, r3, #10
 800263c:	4013      	ands	r3, r2
 800263e:	d062      	beq.n	8002706 <HAL_RCC_OscConfig+0x116>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d15e      	bne.n	8002706 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e2ce      	b.n	8002bea <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685a      	ldr	r2, [r3, #4]
 8002650:	2380      	movs	r3, #128	@ 0x80
 8002652:	025b      	lsls	r3, r3, #9
 8002654:	429a      	cmp	r2, r3
 8002656:	d107      	bne.n	8002668 <HAL_RCC_OscConfig+0x78>
 8002658:	4bb0      	ldr	r3, [pc, #704]	@ (800291c <HAL_RCC_OscConfig+0x32c>)
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	4baf      	ldr	r3, [pc, #700]	@ (800291c <HAL_RCC_OscConfig+0x32c>)
 800265e:	2180      	movs	r1, #128	@ 0x80
 8002660:	0249      	lsls	r1, r1, #9
 8002662:	430a      	orrs	r2, r1
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	e020      	b.n	80026aa <HAL_RCC_OscConfig+0xba>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685a      	ldr	r2, [r3, #4]
 800266c:	23a0      	movs	r3, #160	@ 0xa0
 800266e:	02db      	lsls	r3, r3, #11
 8002670:	429a      	cmp	r2, r3
 8002672:	d10e      	bne.n	8002692 <HAL_RCC_OscConfig+0xa2>
 8002674:	4ba9      	ldr	r3, [pc, #676]	@ (800291c <HAL_RCC_OscConfig+0x32c>)
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	4ba8      	ldr	r3, [pc, #672]	@ (800291c <HAL_RCC_OscConfig+0x32c>)
 800267a:	2180      	movs	r1, #128	@ 0x80
 800267c:	02c9      	lsls	r1, r1, #11
 800267e:	430a      	orrs	r2, r1
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	4ba6      	ldr	r3, [pc, #664]	@ (800291c <HAL_RCC_OscConfig+0x32c>)
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	4ba5      	ldr	r3, [pc, #660]	@ (800291c <HAL_RCC_OscConfig+0x32c>)
 8002688:	2180      	movs	r1, #128	@ 0x80
 800268a:	0249      	lsls	r1, r1, #9
 800268c:	430a      	orrs	r2, r1
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	e00b      	b.n	80026aa <HAL_RCC_OscConfig+0xba>
 8002692:	4ba2      	ldr	r3, [pc, #648]	@ (800291c <HAL_RCC_OscConfig+0x32c>)
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	4ba1      	ldr	r3, [pc, #644]	@ (800291c <HAL_RCC_OscConfig+0x32c>)
 8002698:	49a1      	ldr	r1, [pc, #644]	@ (8002920 <HAL_RCC_OscConfig+0x330>)
 800269a:	400a      	ands	r2, r1
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	4b9f      	ldr	r3, [pc, #636]	@ (800291c <HAL_RCC_OscConfig+0x32c>)
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	4b9e      	ldr	r3, [pc, #632]	@ (800291c <HAL_RCC_OscConfig+0x32c>)
 80026a4:	499f      	ldr	r1, [pc, #636]	@ (8002924 <HAL_RCC_OscConfig+0x334>)
 80026a6:	400a      	ands	r2, r1
 80026a8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d014      	beq.n	80026dc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b2:	f7fe fd89 	bl	80011c8 <HAL_GetTick>
 80026b6:	0003      	movs	r3, r0
 80026b8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026bc:	f7fe fd84 	bl	80011c8 <HAL_GetTick>
 80026c0:	0002      	movs	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b64      	cmp	r3, #100	@ 0x64
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e28d      	b.n	8002bea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026ce:	4b93      	ldr	r3, [pc, #588]	@ (800291c <HAL_RCC_OscConfig+0x32c>)
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	2380      	movs	r3, #128	@ 0x80
 80026d4:	029b      	lsls	r3, r3, #10
 80026d6:	4013      	ands	r3, r2
 80026d8:	d0f0      	beq.n	80026bc <HAL_RCC_OscConfig+0xcc>
 80026da:	e015      	b.n	8002708 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026dc:	f7fe fd74 	bl	80011c8 <HAL_GetTick>
 80026e0:	0003      	movs	r3, r0
 80026e2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026e4:	e008      	b.n	80026f8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026e6:	f7fe fd6f 	bl	80011c8 <HAL_GetTick>
 80026ea:	0002      	movs	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b64      	cmp	r3, #100	@ 0x64
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e278      	b.n	8002bea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026f8:	4b88      	ldr	r3, [pc, #544]	@ (800291c <HAL_RCC_OscConfig+0x32c>)
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	2380      	movs	r3, #128	@ 0x80
 80026fe:	029b      	lsls	r3, r3, #10
 8002700:	4013      	ands	r3, r2
 8002702:	d1f0      	bne.n	80026e6 <HAL_RCC_OscConfig+0xf6>
 8002704:	e000      	b.n	8002708 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002706:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2202      	movs	r2, #2
 800270e:	4013      	ands	r3, r2
 8002710:	d100      	bne.n	8002714 <HAL_RCC_OscConfig+0x124>
 8002712:	e099      	b.n	8002848 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002714:	4b81      	ldr	r3, [pc, #516]	@ (800291c <HAL_RCC_OscConfig+0x32c>)
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	2238      	movs	r2, #56	@ 0x38
 800271a:	4013      	ands	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800271e:	4b7f      	ldr	r3, [pc, #508]	@ (800291c <HAL_RCC_OscConfig+0x32c>)
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	2203      	movs	r2, #3
 8002724:	4013      	ands	r3, r2
 8002726:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	2b10      	cmp	r3, #16
 800272c:	d102      	bne.n	8002734 <HAL_RCC_OscConfig+0x144>
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	2b02      	cmp	r3, #2
 8002732:	d002      	beq.n	800273a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d135      	bne.n	80027a6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800273a:	4b78      	ldr	r3, [pc, #480]	@ (800291c <HAL_RCC_OscConfig+0x32c>)
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	2380      	movs	r3, #128	@ 0x80
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	4013      	ands	r3, r2
 8002744:	d005      	beq.n	8002752 <HAL_RCC_OscConfig+0x162>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e24b      	b.n	8002bea <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002752:	4b72      	ldr	r3, [pc, #456]	@ (800291c <HAL_RCC_OscConfig+0x32c>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	4a74      	ldr	r2, [pc, #464]	@ (8002928 <HAL_RCC_OscConfig+0x338>)
 8002758:	4013      	ands	r3, r2
 800275a:	0019      	movs	r1, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	021a      	lsls	r2, r3, #8
 8002762:	4b6e      	ldr	r3, [pc, #440]	@ (800291c <HAL_RCC_OscConfig+0x32c>)
 8002764:	430a      	orrs	r2, r1
 8002766:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d112      	bne.n	8002794 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800276e:	4b6b      	ldr	r3, [pc, #428]	@ (800291c <HAL_RCC_OscConfig+0x32c>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a6e      	ldr	r2, [pc, #440]	@ (800292c <HAL_RCC_OscConfig+0x33c>)
 8002774:	4013      	ands	r3, r2
 8002776:	0019      	movs	r1, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	691a      	ldr	r2, [r3, #16]
 800277c:	4b67      	ldr	r3, [pc, #412]	@ (800291c <HAL_RCC_OscConfig+0x32c>)
 800277e:	430a      	orrs	r2, r1
 8002780:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002782:	4b66      	ldr	r3, [pc, #408]	@ (800291c <HAL_RCC_OscConfig+0x32c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	0adb      	lsrs	r3, r3, #11
 8002788:	2207      	movs	r2, #7
 800278a:	4013      	ands	r3, r2
 800278c:	4a68      	ldr	r2, [pc, #416]	@ (8002930 <HAL_RCC_OscConfig+0x340>)
 800278e:	40da      	lsrs	r2, r3
 8002790:	4b68      	ldr	r3, [pc, #416]	@ (8002934 <HAL_RCC_OscConfig+0x344>)
 8002792:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002794:	4b68      	ldr	r3, [pc, #416]	@ (8002938 <HAL_RCC_OscConfig+0x348>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	0018      	movs	r0, r3
 800279a:	f7fe fcb9 	bl	8001110 <HAL_InitTick>
 800279e:	1e03      	subs	r3, r0, #0
 80027a0:	d051      	beq.n	8002846 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e221      	b.n	8002bea <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d030      	beq.n	8002810 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80027ae:	4b5b      	ldr	r3, [pc, #364]	@ (800291c <HAL_RCC_OscConfig+0x32c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a5e      	ldr	r2, [pc, #376]	@ (800292c <HAL_RCC_OscConfig+0x33c>)
 80027b4:	4013      	ands	r3, r2
 80027b6:	0019      	movs	r1, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	691a      	ldr	r2, [r3, #16]
 80027bc:	4b57      	ldr	r3, [pc, #348]	@ (800291c <HAL_RCC_OscConfig+0x32c>)
 80027be:	430a      	orrs	r2, r1
 80027c0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80027c2:	4b56      	ldr	r3, [pc, #344]	@ (800291c <HAL_RCC_OscConfig+0x32c>)
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	4b55      	ldr	r3, [pc, #340]	@ (800291c <HAL_RCC_OscConfig+0x32c>)
 80027c8:	2180      	movs	r1, #128	@ 0x80
 80027ca:	0049      	lsls	r1, r1, #1
 80027cc:	430a      	orrs	r2, r1
 80027ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d0:	f7fe fcfa 	bl	80011c8 <HAL_GetTick>
 80027d4:	0003      	movs	r3, r0
 80027d6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027d8:	e008      	b.n	80027ec <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027da:	f7fe fcf5 	bl	80011c8 <HAL_GetTick>
 80027de:	0002      	movs	r2, r0
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e1fe      	b.n	8002bea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027ec:	4b4b      	ldr	r3, [pc, #300]	@ (800291c <HAL_RCC_OscConfig+0x32c>)
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	2380      	movs	r3, #128	@ 0x80
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	4013      	ands	r3, r2
 80027f6:	d0f0      	beq.n	80027da <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f8:	4b48      	ldr	r3, [pc, #288]	@ (800291c <HAL_RCC_OscConfig+0x32c>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	4a4a      	ldr	r2, [pc, #296]	@ (8002928 <HAL_RCC_OscConfig+0x338>)
 80027fe:	4013      	ands	r3, r2
 8002800:	0019      	movs	r1, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	021a      	lsls	r2, r3, #8
 8002808:	4b44      	ldr	r3, [pc, #272]	@ (800291c <HAL_RCC_OscConfig+0x32c>)
 800280a:	430a      	orrs	r2, r1
 800280c:	605a      	str	r2, [r3, #4]
 800280e:	e01b      	b.n	8002848 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002810:	4b42      	ldr	r3, [pc, #264]	@ (800291c <HAL_RCC_OscConfig+0x32c>)
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	4b41      	ldr	r3, [pc, #260]	@ (800291c <HAL_RCC_OscConfig+0x32c>)
 8002816:	4949      	ldr	r1, [pc, #292]	@ (800293c <HAL_RCC_OscConfig+0x34c>)
 8002818:	400a      	ands	r2, r1
 800281a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281c:	f7fe fcd4 	bl	80011c8 <HAL_GetTick>
 8002820:	0003      	movs	r3, r0
 8002822:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002824:	e008      	b.n	8002838 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002826:	f7fe fccf 	bl	80011c8 <HAL_GetTick>
 800282a:	0002      	movs	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e1d8      	b.n	8002bea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002838:	4b38      	ldr	r3, [pc, #224]	@ (800291c <HAL_RCC_OscConfig+0x32c>)
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	2380      	movs	r3, #128	@ 0x80
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	4013      	ands	r3, r2
 8002842:	d1f0      	bne.n	8002826 <HAL_RCC_OscConfig+0x236>
 8002844:	e000      	b.n	8002848 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002846:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2208      	movs	r2, #8
 800284e:	4013      	ands	r3, r2
 8002850:	d047      	beq.n	80028e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002852:	4b32      	ldr	r3, [pc, #200]	@ (800291c <HAL_RCC_OscConfig+0x32c>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	2238      	movs	r2, #56	@ 0x38
 8002858:	4013      	ands	r3, r2
 800285a:	2b18      	cmp	r3, #24
 800285c:	d10a      	bne.n	8002874 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800285e:	4b2f      	ldr	r3, [pc, #188]	@ (800291c <HAL_RCC_OscConfig+0x32c>)
 8002860:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002862:	2202      	movs	r2, #2
 8002864:	4013      	ands	r3, r2
 8002866:	d03c      	beq.n	80028e2 <HAL_RCC_OscConfig+0x2f2>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d138      	bne.n	80028e2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e1ba      	b.n	8002bea <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d019      	beq.n	80028b0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800287c:	4b27      	ldr	r3, [pc, #156]	@ (800291c <HAL_RCC_OscConfig+0x32c>)
 800287e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002880:	4b26      	ldr	r3, [pc, #152]	@ (800291c <HAL_RCC_OscConfig+0x32c>)
 8002882:	2101      	movs	r1, #1
 8002884:	430a      	orrs	r2, r1
 8002886:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002888:	f7fe fc9e 	bl	80011c8 <HAL_GetTick>
 800288c:	0003      	movs	r3, r0
 800288e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002890:	e008      	b.n	80028a4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002892:	f7fe fc99 	bl	80011c8 <HAL_GetTick>
 8002896:	0002      	movs	r2, r0
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	2b02      	cmp	r3, #2
 800289e:	d901      	bls.n	80028a4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e1a2      	b.n	8002bea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028a4:	4b1d      	ldr	r3, [pc, #116]	@ (800291c <HAL_RCC_OscConfig+0x32c>)
 80028a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028a8:	2202      	movs	r2, #2
 80028aa:	4013      	ands	r3, r2
 80028ac:	d0f1      	beq.n	8002892 <HAL_RCC_OscConfig+0x2a2>
 80028ae:	e018      	b.n	80028e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80028b0:	4b1a      	ldr	r3, [pc, #104]	@ (800291c <HAL_RCC_OscConfig+0x32c>)
 80028b2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80028b4:	4b19      	ldr	r3, [pc, #100]	@ (800291c <HAL_RCC_OscConfig+0x32c>)
 80028b6:	2101      	movs	r1, #1
 80028b8:	438a      	bics	r2, r1
 80028ba:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028bc:	f7fe fc84 	bl	80011c8 <HAL_GetTick>
 80028c0:	0003      	movs	r3, r0
 80028c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028c4:	e008      	b.n	80028d8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028c6:	f7fe fc7f 	bl	80011c8 <HAL_GetTick>
 80028ca:	0002      	movs	r2, r0
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e188      	b.n	8002bea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028d8:	4b10      	ldr	r3, [pc, #64]	@ (800291c <HAL_RCC_OscConfig+0x32c>)
 80028da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028dc:	2202      	movs	r2, #2
 80028de:	4013      	ands	r3, r2
 80028e0:	d1f1      	bne.n	80028c6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2204      	movs	r2, #4
 80028e8:	4013      	ands	r3, r2
 80028ea:	d100      	bne.n	80028ee <HAL_RCC_OscConfig+0x2fe>
 80028ec:	e0c6      	b.n	8002a7c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ee:	231f      	movs	r3, #31
 80028f0:	18fb      	adds	r3, r7, r3
 80028f2:	2200      	movs	r2, #0
 80028f4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80028f6:	4b09      	ldr	r3, [pc, #36]	@ (800291c <HAL_RCC_OscConfig+0x32c>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	2238      	movs	r2, #56	@ 0x38
 80028fc:	4013      	ands	r3, r2
 80028fe:	2b20      	cmp	r3, #32
 8002900:	d11e      	bne.n	8002940 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002902:	4b06      	ldr	r3, [pc, #24]	@ (800291c <HAL_RCC_OscConfig+0x32c>)
 8002904:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002906:	2202      	movs	r2, #2
 8002908:	4013      	ands	r3, r2
 800290a:	d100      	bne.n	800290e <HAL_RCC_OscConfig+0x31e>
 800290c:	e0b6      	b.n	8002a7c <HAL_RCC_OscConfig+0x48c>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d000      	beq.n	8002918 <HAL_RCC_OscConfig+0x328>
 8002916:	e0b1      	b.n	8002a7c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e166      	b.n	8002bea <HAL_RCC_OscConfig+0x5fa>
 800291c:	40021000 	.word	0x40021000
 8002920:	fffeffff 	.word	0xfffeffff
 8002924:	fffbffff 	.word	0xfffbffff
 8002928:	ffff80ff 	.word	0xffff80ff
 800292c:	ffffc7ff 	.word	0xffffc7ff
 8002930:	00f42400 	.word	0x00f42400
 8002934:	20000000 	.word	0x20000000
 8002938:	20000004 	.word	0x20000004
 800293c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002940:	4bac      	ldr	r3, [pc, #688]	@ (8002bf4 <HAL_RCC_OscConfig+0x604>)
 8002942:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002944:	2380      	movs	r3, #128	@ 0x80
 8002946:	055b      	lsls	r3, r3, #21
 8002948:	4013      	ands	r3, r2
 800294a:	d101      	bne.n	8002950 <HAL_RCC_OscConfig+0x360>
 800294c:	2301      	movs	r3, #1
 800294e:	e000      	b.n	8002952 <HAL_RCC_OscConfig+0x362>
 8002950:	2300      	movs	r3, #0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d011      	beq.n	800297a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002956:	4ba7      	ldr	r3, [pc, #668]	@ (8002bf4 <HAL_RCC_OscConfig+0x604>)
 8002958:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800295a:	4ba6      	ldr	r3, [pc, #664]	@ (8002bf4 <HAL_RCC_OscConfig+0x604>)
 800295c:	2180      	movs	r1, #128	@ 0x80
 800295e:	0549      	lsls	r1, r1, #21
 8002960:	430a      	orrs	r2, r1
 8002962:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002964:	4ba3      	ldr	r3, [pc, #652]	@ (8002bf4 <HAL_RCC_OscConfig+0x604>)
 8002966:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002968:	2380      	movs	r3, #128	@ 0x80
 800296a:	055b      	lsls	r3, r3, #21
 800296c:	4013      	ands	r3, r2
 800296e:	60fb      	str	r3, [r7, #12]
 8002970:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002972:	231f      	movs	r3, #31
 8002974:	18fb      	adds	r3, r7, r3
 8002976:	2201      	movs	r2, #1
 8002978:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800297a:	4b9f      	ldr	r3, [pc, #636]	@ (8002bf8 <HAL_RCC_OscConfig+0x608>)
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	2380      	movs	r3, #128	@ 0x80
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	4013      	ands	r3, r2
 8002984:	d11a      	bne.n	80029bc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002986:	4b9c      	ldr	r3, [pc, #624]	@ (8002bf8 <HAL_RCC_OscConfig+0x608>)
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	4b9b      	ldr	r3, [pc, #620]	@ (8002bf8 <HAL_RCC_OscConfig+0x608>)
 800298c:	2180      	movs	r1, #128	@ 0x80
 800298e:	0049      	lsls	r1, r1, #1
 8002990:	430a      	orrs	r2, r1
 8002992:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002994:	f7fe fc18 	bl	80011c8 <HAL_GetTick>
 8002998:	0003      	movs	r3, r0
 800299a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800299c:	e008      	b.n	80029b0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800299e:	f7fe fc13 	bl	80011c8 <HAL_GetTick>
 80029a2:	0002      	movs	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e11c      	b.n	8002bea <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029b0:	4b91      	ldr	r3, [pc, #580]	@ (8002bf8 <HAL_RCC_OscConfig+0x608>)
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	2380      	movs	r3, #128	@ 0x80
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	4013      	ands	r3, r2
 80029ba:	d0f0      	beq.n	800299e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d106      	bne.n	80029d2 <HAL_RCC_OscConfig+0x3e2>
 80029c4:	4b8b      	ldr	r3, [pc, #556]	@ (8002bf4 <HAL_RCC_OscConfig+0x604>)
 80029c6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80029c8:	4b8a      	ldr	r3, [pc, #552]	@ (8002bf4 <HAL_RCC_OscConfig+0x604>)
 80029ca:	2101      	movs	r1, #1
 80029cc:	430a      	orrs	r2, r1
 80029ce:	65da      	str	r2, [r3, #92]	@ 0x5c
 80029d0:	e01c      	b.n	8002a0c <HAL_RCC_OscConfig+0x41c>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	2b05      	cmp	r3, #5
 80029d8:	d10c      	bne.n	80029f4 <HAL_RCC_OscConfig+0x404>
 80029da:	4b86      	ldr	r3, [pc, #536]	@ (8002bf4 <HAL_RCC_OscConfig+0x604>)
 80029dc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80029de:	4b85      	ldr	r3, [pc, #532]	@ (8002bf4 <HAL_RCC_OscConfig+0x604>)
 80029e0:	2104      	movs	r1, #4
 80029e2:	430a      	orrs	r2, r1
 80029e4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80029e6:	4b83      	ldr	r3, [pc, #524]	@ (8002bf4 <HAL_RCC_OscConfig+0x604>)
 80029e8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80029ea:	4b82      	ldr	r3, [pc, #520]	@ (8002bf4 <HAL_RCC_OscConfig+0x604>)
 80029ec:	2101      	movs	r1, #1
 80029ee:	430a      	orrs	r2, r1
 80029f0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80029f2:	e00b      	b.n	8002a0c <HAL_RCC_OscConfig+0x41c>
 80029f4:	4b7f      	ldr	r3, [pc, #508]	@ (8002bf4 <HAL_RCC_OscConfig+0x604>)
 80029f6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80029f8:	4b7e      	ldr	r3, [pc, #504]	@ (8002bf4 <HAL_RCC_OscConfig+0x604>)
 80029fa:	2101      	movs	r1, #1
 80029fc:	438a      	bics	r2, r1
 80029fe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002a00:	4b7c      	ldr	r3, [pc, #496]	@ (8002bf4 <HAL_RCC_OscConfig+0x604>)
 8002a02:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002a04:	4b7b      	ldr	r3, [pc, #492]	@ (8002bf4 <HAL_RCC_OscConfig+0x604>)
 8002a06:	2104      	movs	r1, #4
 8002a08:	438a      	bics	r2, r1
 8002a0a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d014      	beq.n	8002a3e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a14:	f7fe fbd8 	bl	80011c8 <HAL_GetTick>
 8002a18:	0003      	movs	r3, r0
 8002a1a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a1c:	e009      	b.n	8002a32 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a1e:	f7fe fbd3 	bl	80011c8 <HAL_GetTick>
 8002a22:	0002      	movs	r2, r0
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	4a74      	ldr	r2, [pc, #464]	@ (8002bfc <HAL_RCC_OscConfig+0x60c>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e0db      	b.n	8002bea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a32:	4b70      	ldr	r3, [pc, #448]	@ (8002bf4 <HAL_RCC_OscConfig+0x604>)
 8002a34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a36:	2202      	movs	r2, #2
 8002a38:	4013      	ands	r3, r2
 8002a3a:	d0f0      	beq.n	8002a1e <HAL_RCC_OscConfig+0x42e>
 8002a3c:	e013      	b.n	8002a66 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3e:	f7fe fbc3 	bl	80011c8 <HAL_GetTick>
 8002a42:	0003      	movs	r3, r0
 8002a44:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a46:	e009      	b.n	8002a5c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a48:	f7fe fbbe 	bl	80011c8 <HAL_GetTick>
 8002a4c:	0002      	movs	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	4a6a      	ldr	r2, [pc, #424]	@ (8002bfc <HAL_RCC_OscConfig+0x60c>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e0c6      	b.n	8002bea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a5c:	4b65      	ldr	r3, [pc, #404]	@ (8002bf4 <HAL_RCC_OscConfig+0x604>)
 8002a5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a60:	2202      	movs	r2, #2
 8002a62:	4013      	ands	r3, r2
 8002a64:	d1f0      	bne.n	8002a48 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002a66:	231f      	movs	r3, #31
 8002a68:	18fb      	adds	r3, r7, r3
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d105      	bne.n	8002a7c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002a70:	4b60      	ldr	r3, [pc, #384]	@ (8002bf4 <HAL_RCC_OscConfig+0x604>)
 8002a72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a74:	4b5f      	ldr	r3, [pc, #380]	@ (8002bf4 <HAL_RCC_OscConfig+0x604>)
 8002a76:	4962      	ldr	r1, [pc, #392]	@ (8002c00 <HAL_RCC_OscConfig+0x610>)
 8002a78:	400a      	ands	r2, r1
 8002a7a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	69db      	ldr	r3, [r3, #28]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d100      	bne.n	8002a86 <HAL_RCC_OscConfig+0x496>
 8002a84:	e0b0      	b.n	8002be8 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a86:	4b5b      	ldr	r3, [pc, #364]	@ (8002bf4 <HAL_RCC_OscConfig+0x604>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	2238      	movs	r2, #56	@ 0x38
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	2b10      	cmp	r3, #16
 8002a90:	d100      	bne.n	8002a94 <HAL_RCC_OscConfig+0x4a4>
 8002a92:	e078      	b.n	8002b86 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	69db      	ldr	r3, [r3, #28]
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d153      	bne.n	8002b44 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a9c:	4b55      	ldr	r3, [pc, #340]	@ (8002bf4 <HAL_RCC_OscConfig+0x604>)
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	4b54      	ldr	r3, [pc, #336]	@ (8002bf4 <HAL_RCC_OscConfig+0x604>)
 8002aa2:	4958      	ldr	r1, [pc, #352]	@ (8002c04 <HAL_RCC_OscConfig+0x614>)
 8002aa4:	400a      	ands	r2, r1
 8002aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa8:	f7fe fb8e 	bl	80011c8 <HAL_GetTick>
 8002aac:	0003      	movs	r3, r0
 8002aae:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ab0:	e008      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab2:	f7fe fb89 	bl	80011c8 <HAL_GetTick>
 8002ab6:	0002      	movs	r2, r0
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e092      	b.n	8002bea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ac4:	4b4b      	ldr	r3, [pc, #300]	@ (8002bf4 <HAL_RCC_OscConfig+0x604>)
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	2380      	movs	r3, #128	@ 0x80
 8002aca:	049b      	lsls	r3, r3, #18
 8002acc:	4013      	ands	r3, r2
 8002ace:	d1f0      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ad0:	4b48      	ldr	r3, [pc, #288]	@ (8002bf4 <HAL_RCC_OscConfig+0x604>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	4a4c      	ldr	r2, [pc, #304]	@ (8002c08 <HAL_RCC_OscConfig+0x618>)
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	0019      	movs	r1, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a1a      	ldr	r2, [r3, #32]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ae8:	021b      	lsls	r3, r3, #8
 8002aea:	431a      	orrs	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af0:	431a      	orrs	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af6:	431a      	orrs	r2, r3
 8002af8:	4b3e      	ldr	r3, [pc, #248]	@ (8002bf4 <HAL_RCC_OscConfig+0x604>)
 8002afa:	430a      	orrs	r2, r1
 8002afc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002afe:	4b3d      	ldr	r3, [pc, #244]	@ (8002bf4 <HAL_RCC_OscConfig+0x604>)
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	4b3c      	ldr	r3, [pc, #240]	@ (8002bf4 <HAL_RCC_OscConfig+0x604>)
 8002b04:	2180      	movs	r1, #128	@ 0x80
 8002b06:	0449      	lsls	r1, r1, #17
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002b0c:	4b39      	ldr	r3, [pc, #228]	@ (8002bf4 <HAL_RCC_OscConfig+0x604>)
 8002b0e:	68da      	ldr	r2, [r3, #12]
 8002b10:	4b38      	ldr	r3, [pc, #224]	@ (8002bf4 <HAL_RCC_OscConfig+0x604>)
 8002b12:	2180      	movs	r1, #128	@ 0x80
 8002b14:	0549      	lsls	r1, r1, #21
 8002b16:	430a      	orrs	r2, r1
 8002b18:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1a:	f7fe fb55 	bl	80011c8 <HAL_GetTick>
 8002b1e:	0003      	movs	r3, r0
 8002b20:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b24:	f7fe fb50 	bl	80011c8 <HAL_GetTick>
 8002b28:	0002      	movs	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e059      	b.n	8002bea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b36:	4b2f      	ldr	r3, [pc, #188]	@ (8002bf4 <HAL_RCC_OscConfig+0x604>)
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	2380      	movs	r3, #128	@ 0x80
 8002b3c:	049b      	lsls	r3, r3, #18
 8002b3e:	4013      	ands	r3, r2
 8002b40:	d0f0      	beq.n	8002b24 <HAL_RCC_OscConfig+0x534>
 8002b42:	e051      	b.n	8002be8 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b44:	4b2b      	ldr	r3, [pc, #172]	@ (8002bf4 <HAL_RCC_OscConfig+0x604>)
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	4b2a      	ldr	r3, [pc, #168]	@ (8002bf4 <HAL_RCC_OscConfig+0x604>)
 8002b4a:	492e      	ldr	r1, [pc, #184]	@ (8002c04 <HAL_RCC_OscConfig+0x614>)
 8002b4c:	400a      	ands	r2, r1
 8002b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b50:	f7fe fb3a 	bl	80011c8 <HAL_GetTick>
 8002b54:	0003      	movs	r3, r0
 8002b56:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b58:	e008      	b.n	8002b6c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b5a:	f7fe fb35 	bl	80011c8 <HAL_GetTick>
 8002b5e:	0002      	movs	r2, r0
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e03e      	b.n	8002bea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b6c:	4b21      	ldr	r3, [pc, #132]	@ (8002bf4 <HAL_RCC_OscConfig+0x604>)
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	2380      	movs	r3, #128	@ 0x80
 8002b72:	049b      	lsls	r3, r3, #18
 8002b74:	4013      	ands	r3, r2
 8002b76:	d1f0      	bne.n	8002b5a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002b78:	4b1e      	ldr	r3, [pc, #120]	@ (8002bf4 <HAL_RCC_OscConfig+0x604>)
 8002b7a:	68da      	ldr	r2, [r3, #12]
 8002b7c:	4b1d      	ldr	r3, [pc, #116]	@ (8002bf4 <HAL_RCC_OscConfig+0x604>)
 8002b7e:	4923      	ldr	r1, [pc, #140]	@ (8002c0c <HAL_RCC_OscConfig+0x61c>)
 8002b80:	400a      	ands	r2, r1
 8002b82:	60da      	str	r2, [r3, #12]
 8002b84:	e030      	b.n	8002be8 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d101      	bne.n	8002b92 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e02b      	b.n	8002bea <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002b92:	4b18      	ldr	r3, [pc, #96]	@ (8002bf4 <HAL_RCC_OscConfig+0x604>)
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	2203      	movs	r2, #3
 8002b9c:	401a      	ands	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d11e      	bne.n	8002be4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	2270      	movs	r2, #112	@ 0x70
 8002baa:	401a      	ands	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d117      	bne.n	8002be4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	23fe      	movs	r3, #254	@ 0xfe
 8002bb8:	01db      	lsls	r3, r3, #7
 8002bba:	401a      	ands	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc0:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d10e      	bne.n	8002be4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002bc6:	697a      	ldr	r2, [r7, #20]
 8002bc8:	23f8      	movs	r3, #248	@ 0xf8
 8002bca:	039b      	lsls	r3, r3, #14
 8002bcc:	401a      	ands	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d106      	bne.n	8002be4 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	0f5b      	lsrs	r3, r3, #29
 8002bda:	075a      	lsls	r2, r3, #29
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d001      	beq.n	8002be8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e000      	b.n	8002bea <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	0018      	movs	r0, r3
 8002bec:	46bd      	mov	sp, r7
 8002bee:	b008      	add	sp, #32
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	46c0      	nop			@ (mov r8, r8)
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	40007000 	.word	0x40007000
 8002bfc:	00001388 	.word	0x00001388
 8002c00:	efffffff 	.word	0xefffffff
 8002c04:	feffffff 	.word	0xfeffffff
 8002c08:	1fc1808c 	.word	0x1fc1808c
 8002c0c:	effefffc 	.word	0xeffefffc

08002c10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d101      	bne.n	8002c24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e0e9      	b.n	8002df8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c24:	4b76      	ldr	r3, [pc, #472]	@ (8002e00 <HAL_RCC_ClockConfig+0x1f0>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2207      	movs	r2, #7
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d91e      	bls.n	8002c70 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c32:	4b73      	ldr	r3, [pc, #460]	@ (8002e00 <HAL_RCC_ClockConfig+0x1f0>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2207      	movs	r2, #7
 8002c38:	4393      	bics	r3, r2
 8002c3a:	0019      	movs	r1, r3
 8002c3c:	4b70      	ldr	r3, [pc, #448]	@ (8002e00 <HAL_RCC_ClockConfig+0x1f0>)
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	430a      	orrs	r2, r1
 8002c42:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002c44:	f7fe fac0 	bl	80011c8 <HAL_GetTick>
 8002c48:	0003      	movs	r3, r0
 8002c4a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c4c:	e009      	b.n	8002c62 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c4e:	f7fe fabb 	bl	80011c8 <HAL_GetTick>
 8002c52:	0002      	movs	r2, r0
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	4a6a      	ldr	r2, [pc, #424]	@ (8002e04 <HAL_RCC_ClockConfig+0x1f4>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e0ca      	b.n	8002df8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c62:	4b67      	ldr	r3, [pc, #412]	@ (8002e00 <HAL_RCC_ClockConfig+0x1f0>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2207      	movs	r2, #7
 8002c68:	4013      	ands	r3, r2
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d1ee      	bne.n	8002c4e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2202      	movs	r2, #2
 8002c76:	4013      	ands	r3, r2
 8002c78:	d015      	beq.n	8002ca6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2204      	movs	r2, #4
 8002c80:	4013      	ands	r3, r2
 8002c82:	d006      	beq.n	8002c92 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002c84:	4b60      	ldr	r3, [pc, #384]	@ (8002e08 <HAL_RCC_ClockConfig+0x1f8>)
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	4b5f      	ldr	r3, [pc, #380]	@ (8002e08 <HAL_RCC_ClockConfig+0x1f8>)
 8002c8a:	21e0      	movs	r1, #224	@ 0xe0
 8002c8c:	01c9      	lsls	r1, r1, #7
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c92:	4b5d      	ldr	r3, [pc, #372]	@ (8002e08 <HAL_RCC_ClockConfig+0x1f8>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	4a5d      	ldr	r2, [pc, #372]	@ (8002e0c <HAL_RCC_ClockConfig+0x1fc>)
 8002c98:	4013      	ands	r3, r2
 8002c9a:	0019      	movs	r1, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	4b59      	ldr	r3, [pc, #356]	@ (8002e08 <HAL_RCC_ClockConfig+0x1f8>)
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2201      	movs	r2, #1
 8002cac:	4013      	ands	r3, r2
 8002cae:	d057      	beq.n	8002d60 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d107      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cb8:	4b53      	ldr	r3, [pc, #332]	@ (8002e08 <HAL_RCC_ClockConfig+0x1f8>)
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	2380      	movs	r3, #128	@ 0x80
 8002cbe:	029b      	lsls	r3, r3, #10
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	d12b      	bne.n	8002d1c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e097      	b.n	8002df8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d107      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cd0:	4b4d      	ldr	r3, [pc, #308]	@ (8002e08 <HAL_RCC_ClockConfig+0x1f8>)
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	2380      	movs	r3, #128	@ 0x80
 8002cd6:	049b      	lsls	r3, r3, #18
 8002cd8:	4013      	ands	r3, r2
 8002cda:	d11f      	bne.n	8002d1c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e08b      	b.n	8002df8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d107      	bne.n	8002cf8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ce8:	4b47      	ldr	r3, [pc, #284]	@ (8002e08 <HAL_RCC_ClockConfig+0x1f8>)
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	2380      	movs	r3, #128	@ 0x80
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	d113      	bne.n	8002d1c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e07f      	b.n	8002df8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	2b03      	cmp	r3, #3
 8002cfe:	d106      	bne.n	8002d0e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d00:	4b41      	ldr	r3, [pc, #260]	@ (8002e08 <HAL_RCC_ClockConfig+0x1f8>)
 8002d02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d04:	2202      	movs	r2, #2
 8002d06:	4013      	ands	r3, r2
 8002d08:	d108      	bne.n	8002d1c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e074      	b.n	8002df8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d0e:	4b3e      	ldr	r3, [pc, #248]	@ (8002e08 <HAL_RCC_ClockConfig+0x1f8>)
 8002d10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d12:	2202      	movs	r2, #2
 8002d14:	4013      	ands	r3, r2
 8002d16:	d101      	bne.n	8002d1c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e06d      	b.n	8002df8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d1c:	4b3a      	ldr	r3, [pc, #232]	@ (8002e08 <HAL_RCC_ClockConfig+0x1f8>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	2207      	movs	r2, #7
 8002d22:	4393      	bics	r3, r2
 8002d24:	0019      	movs	r1, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	4b37      	ldr	r3, [pc, #220]	@ (8002e08 <HAL_RCC_ClockConfig+0x1f8>)
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d30:	f7fe fa4a 	bl	80011c8 <HAL_GetTick>
 8002d34:	0003      	movs	r3, r0
 8002d36:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d38:	e009      	b.n	8002d4e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d3a:	f7fe fa45 	bl	80011c8 <HAL_GetTick>
 8002d3e:	0002      	movs	r2, r0
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	4a2f      	ldr	r2, [pc, #188]	@ (8002e04 <HAL_RCC_ClockConfig+0x1f4>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e054      	b.n	8002df8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d4e:	4b2e      	ldr	r3, [pc, #184]	@ (8002e08 <HAL_RCC_ClockConfig+0x1f8>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	2238      	movs	r2, #56	@ 0x38
 8002d54:	401a      	ands	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d1ec      	bne.n	8002d3a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d60:	4b27      	ldr	r3, [pc, #156]	@ (8002e00 <HAL_RCC_ClockConfig+0x1f0>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2207      	movs	r2, #7
 8002d66:	4013      	ands	r3, r2
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d21e      	bcs.n	8002dac <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d6e:	4b24      	ldr	r3, [pc, #144]	@ (8002e00 <HAL_RCC_ClockConfig+0x1f0>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2207      	movs	r2, #7
 8002d74:	4393      	bics	r3, r2
 8002d76:	0019      	movs	r1, r3
 8002d78:	4b21      	ldr	r3, [pc, #132]	@ (8002e00 <HAL_RCC_ClockConfig+0x1f0>)
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d80:	f7fe fa22 	bl	80011c8 <HAL_GetTick>
 8002d84:	0003      	movs	r3, r0
 8002d86:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d88:	e009      	b.n	8002d9e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d8a:	f7fe fa1d 	bl	80011c8 <HAL_GetTick>
 8002d8e:	0002      	movs	r2, r0
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	4a1b      	ldr	r2, [pc, #108]	@ (8002e04 <HAL_RCC_ClockConfig+0x1f4>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e02c      	b.n	8002df8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d9e:	4b18      	ldr	r3, [pc, #96]	@ (8002e00 <HAL_RCC_ClockConfig+0x1f0>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2207      	movs	r2, #7
 8002da4:	4013      	ands	r3, r2
 8002da6:	683a      	ldr	r2, [r7, #0]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d1ee      	bne.n	8002d8a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2204      	movs	r2, #4
 8002db2:	4013      	ands	r3, r2
 8002db4:	d009      	beq.n	8002dca <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002db6:	4b14      	ldr	r3, [pc, #80]	@ (8002e08 <HAL_RCC_ClockConfig+0x1f8>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	4a15      	ldr	r2, [pc, #84]	@ (8002e10 <HAL_RCC_ClockConfig+0x200>)
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	0019      	movs	r1, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68da      	ldr	r2, [r3, #12]
 8002dc4:	4b10      	ldr	r3, [pc, #64]	@ (8002e08 <HAL_RCC_ClockConfig+0x1f8>)
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002dca:	f000 f829 	bl	8002e20 <HAL_RCC_GetSysClockFreq>
 8002dce:	0001      	movs	r1, r0
 8002dd0:	4b0d      	ldr	r3, [pc, #52]	@ (8002e08 <HAL_RCC_ClockConfig+0x1f8>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	0a1b      	lsrs	r3, r3, #8
 8002dd6:	220f      	movs	r2, #15
 8002dd8:	401a      	ands	r2, r3
 8002dda:	4b0e      	ldr	r3, [pc, #56]	@ (8002e14 <HAL_RCC_ClockConfig+0x204>)
 8002ddc:	0092      	lsls	r2, r2, #2
 8002dde:	58d3      	ldr	r3, [r2, r3]
 8002de0:	221f      	movs	r2, #31
 8002de2:	4013      	ands	r3, r2
 8002de4:	000a      	movs	r2, r1
 8002de6:	40da      	lsrs	r2, r3
 8002de8:	4b0b      	ldr	r3, [pc, #44]	@ (8002e18 <HAL_RCC_ClockConfig+0x208>)
 8002dea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002dec:	4b0b      	ldr	r3, [pc, #44]	@ (8002e1c <HAL_RCC_ClockConfig+0x20c>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	0018      	movs	r0, r3
 8002df2:	f7fe f98d 	bl	8001110 <HAL_InitTick>
 8002df6:	0003      	movs	r3, r0
}
 8002df8:	0018      	movs	r0, r3
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	b004      	add	sp, #16
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40022000 	.word	0x40022000
 8002e04:	00001388 	.word	0x00001388
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	fffff0ff 	.word	0xfffff0ff
 8002e10:	ffff8fff 	.word	0xffff8fff
 8002e14:	080057a8 	.word	0x080057a8
 8002e18:	20000000 	.word	0x20000000
 8002e1c:	20000004 	.word	0x20000004

08002e20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e26:	4b3c      	ldr	r3, [pc, #240]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	2238      	movs	r2, #56	@ 0x38
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	d10f      	bne.n	8002e50 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002e30:	4b39      	ldr	r3, [pc, #228]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	0adb      	lsrs	r3, r3, #11
 8002e36:	2207      	movs	r2, #7
 8002e38:	4013      	ands	r3, r2
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	409a      	lsls	r2, r3
 8002e3e:	0013      	movs	r3, r2
 8002e40:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002e42:	6839      	ldr	r1, [r7, #0]
 8002e44:	4835      	ldr	r0, [pc, #212]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002e46:	f7fd f965 	bl	8000114 <__udivsi3>
 8002e4a:	0003      	movs	r3, r0
 8002e4c:	613b      	str	r3, [r7, #16]
 8002e4e:	e05d      	b.n	8002f0c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e50:	4b31      	ldr	r3, [pc, #196]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	2238      	movs	r2, #56	@ 0x38
 8002e56:	4013      	ands	r3, r2
 8002e58:	2b08      	cmp	r3, #8
 8002e5a:	d102      	bne.n	8002e62 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e5c:	4b30      	ldr	r3, [pc, #192]	@ (8002f20 <HAL_RCC_GetSysClockFreq+0x100>)
 8002e5e:	613b      	str	r3, [r7, #16]
 8002e60:	e054      	b.n	8002f0c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e62:	4b2d      	ldr	r3, [pc, #180]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	2238      	movs	r2, #56	@ 0x38
 8002e68:	4013      	ands	r3, r2
 8002e6a:	2b10      	cmp	r3, #16
 8002e6c:	d138      	bne.n	8002ee0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002e6e:	4b2a      	ldr	r3, [pc, #168]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	2203      	movs	r2, #3
 8002e74:	4013      	ands	r3, r2
 8002e76:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e78:	4b27      	ldr	r3, [pc, #156]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	091b      	lsrs	r3, r3, #4
 8002e7e:	2207      	movs	r2, #7
 8002e80:	4013      	ands	r3, r2
 8002e82:	3301      	adds	r3, #1
 8002e84:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2b03      	cmp	r3, #3
 8002e8a:	d10d      	bne.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e8c:	68b9      	ldr	r1, [r7, #8]
 8002e8e:	4824      	ldr	r0, [pc, #144]	@ (8002f20 <HAL_RCC_GetSysClockFreq+0x100>)
 8002e90:	f7fd f940 	bl	8000114 <__udivsi3>
 8002e94:	0003      	movs	r3, r0
 8002e96:	0019      	movs	r1, r3
 8002e98:	4b1f      	ldr	r3, [pc, #124]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	0a1b      	lsrs	r3, r3, #8
 8002e9e:	227f      	movs	r2, #127	@ 0x7f
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	434b      	muls	r3, r1
 8002ea4:	617b      	str	r3, [r7, #20]
        break;
 8002ea6:	e00d      	b.n	8002ec4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002ea8:	68b9      	ldr	r1, [r7, #8]
 8002eaa:	481c      	ldr	r0, [pc, #112]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002eac:	f7fd f932 	bl	8000114 <__udivsi3>
 8002eb0:	0003      	movs	r3, r0
 8002eb2:	0019      	movs	r1, r3
 8002eb4:	4b18      	ldr	r3, [pc, #96]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	0a1b      	lsrs	r3, r3, #8
 8002eba:	227f      	movs	r2, #127	@ 0x7f
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	434b      	muls	r3, r1
 8002ec0:	617b      	str	r3, [r7, #20]
        break;
 8002ec2:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002ec4:	4b14      	ldr	r3, [pc, #80]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	0f5b      	lsrs	r3, r3, #29
 8002eca:	2207      	movs	r2, #7
 8002ecc:	4013      	ands	r3, r2
 8002ece:	3301      	adds	r3, #1
 8002ed0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	6978      	ldr	r0, [r7, #20]
 8002ed6:	f7fd f91d 	bl	8000114 <__udivsi3>
 8002eda:	0003      	movs	r3, r0
 8002edc:	613b      	str	r3, [r7, #16]
 8002ede:	e015      	b.n	8002f0c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002ee0:	4b0d      	ldr	r3, [pc, #52]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	2238      	movs	r2, #56	@ 0x38
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	2b20      	cmp	r3, #32
 8002eea:	d103      	bne.n	8002ef4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002eec:	2380      	movs	r3, #128	@ 0x80
 8002eee:	021b      	lsls	r3, r3, #8
 8002ef0:	613b      	str	r3, [r7, #16]
 8002ef2:	e00b      	b.n	8002f0c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002ef4:	4b08      	ldr	r3, [pc, #32]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	2238      	movs	r2, #56	@ 0x38
 8002efa:	4013      	ands	r3, r2
 8002efc:	2b18      	cmp	r3, #24
 8002efe:	d103      	bne.n	8002f08 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002f00:	23fa      	movs	r3, #250	@ 0xfa
 8002f02:	01db      	lsls	r3, r3, #7
 8002f04:	613b      	str	r3, [r7, #16]
 8002f06:	e001      	b.n	8002f0c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002f0c:	693b      	ldr	r3, [r7, #16]
}
 8002f0e:	0018      	movs	r0, r3
 8002f10:	46bd      	mov	sp, r7
 8002f12:	b006      	add	sp, #24
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	46c0      	nop			@ (mov r8, r8)
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	00f42400 	.word	0x00f42400
 8002f20:	007a1200 	.word	0x007a1200

08002f24 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f28:	4b02      	ldr	r3, [pc, #8]	@ (8002f34 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
}
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	46c0      	nop			@ (mov r8, r8)
 8002f34:	20000000 	.word	0x20000000

08002f38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f38:	b5b0      	push	{r4, r5, r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002f3c:	f7ff fff2 	bl	8002f24 <HAL_RCC_GetHCLKFreq>
 8002f40:	0004      	movs	r4, r0
 8002f42:	f7ff fb49 	bl	80025d8 <LL_RCC_GetAPB1Prescaler>
 8002f46:	0003      	movs	r3, r0
 8002f48:	0b1a      	lsrs	r2, r3, #12
 8002f4a:	4b05      	ldr	r3, [pc, #20]	@ (8002f60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f4c:	0092      	lsls	r2, r2, #2
 8002f4e:	58d3      	ldr	r3, [r2, r3]
 8002f50:	221f      	movs	r2, #31
 8002f52:	4013      	ands	r3, r2
 8002f54:	40dc      	lsrs	r4, r3
 8002f56:	0023      	movs	r3, r4
}
 8002f58:	0018      	movs	r0, r3
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bdb0      	pop	{r4, r5, r7, pc}
 8002f5e:	46c0      	nop			@ (mov r8, r8)
 8002f60:	080057e8 	.word	0x080057e8

08002f64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002f6c:	2313      	movs	r3, #19
 8002f6e:	18fb      	adds	r3, r7, r3
 8002f70:	2200      	movs	r2, #0
 8002f72:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f74:	2312      	movs	r3, #18
 8002f76:	18fb      	adds	r3, r7, r3
 8002f78:	2200      	movs	r2, #0
 8002f7a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	2380      	movs	r3, #128	@ 0x80
 8002f82:	029b      	lsls	r3, r3, #10
 8002f84:	4013      	ands	r3, r2
 8002f86:	d100      	bne.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002f88:	e0a3      	b.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f8a:	2011      	movs	r0, #17
 8002f8c:	183b      	adds	r3, r7, r0
 8002f8e:	2200      	movs	r2, #0
 8002f90:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f92:	4b7f      	ldr	r3, [pc, #508]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f96:	2380      	movs	r3, #128	@ 0x80
 8002f98:	055b      	lsls	r3, r3, #21
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	d110      	bne.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f9e:	4b7c      	ldr	r3, [pc, #496]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002fa0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002fa2:	4b7b      	ldr	r3, [pc, #492]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002fa4:	2180      	movs	r1, #128	@ 0x80
 8002fa6:	0549      	lsls	r1, r1, #21
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002fac:	4b78      	ldr	r3, [pc, #480]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002fae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002fb0:	2380      	movs	r3, #128	@ 0x80
 8002fb2:	055b      	lsls	r3, r3, #21
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	60bb      	str	r3, [r7, #8]
 8002fb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fba:	183b      	adds	r3, r7, r0
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fc0:	4b74      	ldr	r3, [pc, #464]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	4b73      	ldr	r3, [pc, #460]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002fc6:	2180      	movs	r1, #128	@ 0x80
 8002fc8:	0049      	lsls	r1, r1, #1
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fce:	f7fe f8fb 	bl	80011c8 <HAL_GetTick>
 8002fd2:	0003      	movs	r3, r0
 8002fd4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fd6:	e00b      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fd8:	f7fe f8f6 	bl	80011c8 <HAL_GetTick>
 8002fdc:	0002      	movs	r2, r0
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d904      	bls.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002fe6:	2313      	movs	r3, #19
 8002fe8:	18fb      	adds	r3, r7, r3
 8002fea:	2203      	movs	r2, #3
 8002fec:	701a      	strb	r2, [r3, #0]
        break;
 8002fee:	e005      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ff0:	4b68      	ldr	r3, [pc, #416]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	2380      	movs	r3, #128	@ 0x80
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	d0ed      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002ffc:	2313      	movs	r3, #19
 8002ffe:	18fb      	adds	r3, r7, r3
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d154      	bne.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003006:	4b62      	ldr	r3, [pc, #392]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003008:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800300a:	23c0      	movs	r3, #192	@ 0xc0
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	4013      	ands	r3, r2
 8003010:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d019      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	429a      	cmp	r2, r3
 8003020:	d014      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003022:	4b5b      	ldr	r3, [pc, #364]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003026:	4a5c      	ldr	r2, [pc, #368]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003028:	4013      	ands	r3, r2
 800302a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800302c:	4b58      	ldr	r3, [pc, #352]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800302e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003030:	4b57      	ldr	r3, [pc, #348]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003032:	2180      	movs	r1, #128	@ 0x80
 8003034:	0249      	lsls	r1, r1, #9
 8003036:	430a      	orrs	r2, r1
 8003038:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800303a:	4b55      	ldr	r3, [pc, #340]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800303c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800303e:	4b54      	ldr	r3, [pc, #336]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003040:	4956      	ldr	r1, [pc, #344]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8003042:	400a      	ands	r2, r1
 8003044:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003046:	4b52      	ldr	r3, [pc, #328]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	2201      	movs	r2, #1
 8003050:	4013      	ands	r3, r2
 8003052:	d016      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003054:	f7fe f8b8 	bl	80011c8 <HAL_GetTick>
 8003058:	0003      	movs	r3, r0
 800305a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800305c:	e00c      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800305e:	f7fe f8b3 	bl	80011c8 <HAL_GetTick>
 8003062:	0002      	movs	r2, r0
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	4a4d      	ldr	r2, [pc, #308]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d904      	bls.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800306e:	2313      	movs	r3, #19
 8003070:	18fb      	adds	r3, r7, r3
 8003072:	2203      	movs	r2, #3
 8003074:	701a      	strb	r2, [r3, #0]
            break;
 8003076:	e004      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003078:	4b45      	ldr	r3, [pc, #276]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800307a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800307c:	2202      	movs	r2, #2
 800307e:	4013      	ands	r3, r2
 8003080:	d0ed      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003082:	2313      	movs	r3, #19
 8003084:	18fb      	adds	r3, r7, r3
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d10a      	bne.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800308c:	4b40      	ldr	r3, [pc, #256]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800308e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003090:	4a41      	ldr	r2, [pc, #260]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003092:	4013      	ands	r3, r2
 8003094:	0019      	movs	r1, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	695a      	ldr	r2, [r3, #20]
 800309a:	4b3d      	ldr	r3, [pc, #244]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800309c:	430a      	orrs	r2, r1
 800309e:	65da      	str	r2, [r3, #92]	@ 0x5c
 80030a0:	e00c      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030a2:	2312      	movs	r3, #18
 80030a4:	18fb      	adds	r3, r7, r3
 80030a6:	2213      	movs	r2, #19
 80030a8:	18ba      	adds	r2, r7, r2
 80030aa:	7812      	ldrb	r2, [r2, #0]
 80030ac:	701a      	strb	r2, [r3, #0]
 80030ae:	e005      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030b0:	2312      	movs	r3, #18
 80030b2:	18fb      	adds	r3, r7, r3
 80030b4:	2213      	movs	r2, #19
 80030b6:	18ba      	adds	r2, r7, r2
 80030b8:	7812      	ldrb	r2, [r2, #0]
 80030ba:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030bc:	2311      	movs	r3, #17
 80030be:	18fb      	adds	r3, r7, r3
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d105      	bne.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030c6:	4b32      	ldr	r3, [pc, #200]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80030c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80030ca:	4b31      	ldr	r3, [pc, #196]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80030cc:	4935      	ldr	r1, [pc, #212]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030ce:	400a      	ands	r2, r1
 80030d0:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2201      	movs	r2, #1
 80030d8:	4013      	ands	r3, r2
 80030da:	d009      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030dc:	4b2c      	ldr	r3, [pc, #176]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80030de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030e0:	2203      	movs	r2, #3
 80030e2:	4393      	bics	r3, r2
 80030e4:	0019      	movs	r1, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	4b29      	ldr	r3, [pc, #164]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80030ec:	430a      	orrs	r2, r1
 80030ee:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2220      	movs	r2, #32
 80030f6:	4013      	ands	r3, r2
 80030f8:	d009      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030fa:	4b25      	ldr	r3, [pc, #148]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80030fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030fe:	4a2a      	ldr	r2, [pc, #168]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003100:	4013      	ands	r3, r2
 8003102:	0019      	movs	r1, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	4b21      	ldr	r3, [pc, #132]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800310a:	430a      	orrs	r2, r1
 800310c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	2380      	movs	r3, #128	@ 0x80
 8003114:	01db      	lsls	r3, r3, #7
 8003116:	4013      	ands	r3, r2
 8003118:	d015      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800311a:	4b1d      	ldr	r3, [pc, #116]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800311c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	0899      	lsrs	r1, r3, #2
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	691a      	ldr	r2, [r3, #16]
 8003126:	4b1a      	ldr	r3, [pc, #104]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003128:	430a      	orrs	r2, r1
 800312a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	691a      	ldr	r2, [r3, #16]
 8003130:	2380      	movs	r3, #128	@ 0x80
 8003132:	05db      	lsls	r3, r3, #23
 8003134:	429a      	cmp	r2, r3
 8003136:	d106      	bne.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003138:	4b15      	ldr	r3, [pc, #84]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800313a:	68da      	ldr	r2, [r3, #12]
 800313c:	4b14      	ldr	r3, [pc, #80]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800313e:	2180      	movs	r1, #128	@ 0x80
 8003140:	0249      	lsls	r1, r1, #9
 8003142:	430a      	orrs	r2, r1
 8003144:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	2380      	movs	r3, #128	@ 0x80
 800314c:	011b      	lsls	r3, r3, #4
 800314e:	4013      	ands	r3, r2
 8003150:	d016      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003152:	4b0f      	ldr	r3, [pc, #60]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003154:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003156:	4a15      	ldr	r2, [pc, #84]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003158:	4013      	ands	r3, r2
 800315a:	0019      	movs	r1, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68da      	ldr	r2, [r3, #12]
 8003160:	4b0b      	ldr	r3, [pc, #44]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003162:	430a      	orrs	r2, r1
 8003164:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	68da      	ldr	r2, [r3, #12]
 800316a:	2380      	movs	r3, #128	@ 0x80
 800316c:	01db      	lsls	r3, r3, #7
 800316e:	429a      	cmp	r2, r3
 8003170:	d106      	bne.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003172:	4b07      	ldr	r3, [pc, #28]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003174:	68da      	ldr	r2, [r3, #12]
 8003176:	4b06      	ldr	r3, [pc, #24]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003178:	2180      	movs	r1, #128	@ 0x80
 800317a:	0249      	lsls	r1, r1, #9
 800317c:	430a      	orrs	r2, r1
 800317e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003180:	2312      	movs	r3, #18
 8003182:	18fb      	adds	r3, r7, r3
 8003184:	781b      	ldrb	r3, [r3, #0]
}
 8003186:	0018      	movs	r0, r3
 8003188:	46bd      	mov	sp, r7
 800318a:	b006      	add	sp, #24
 800318c:	bd80      	pop	{r7, pc}
 800318e:	46c0      	nop			@ (mov r8, r8)
 8003190:	40021000 	.word	0x40021000
 8003194:	40007000 	.word	0x40007000
 8003198:	fffffcff 	.word	0xfffffcff
 800319c:	fffeffff 	.word	0xfffeffff
 80031a0:	00001388 	.word	0x00001388
 80031a4:	efffffff 	.word	0xefffffff
 80031a8:	ffffcfff 	.word	0xffffcfff
 80031ac:	ffff3fff 	.word	0xffff3fff

080031b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e04a      	b.n	8003258 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	223d      	movs	r2, #61	@ 0x3d
 80031c6:	5c9b      	ldrb	r3, [r3, r2]
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d107      	bne.n	80031de <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	223c      	movs	r2, #60	@ 0x3c
 80031d2:	2100      	movs	r1, #0
 80031d4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	0018      	movs	r0, r3
 80031da:	f7fd fd6f 	bl	8000cbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	223d      	movs	r2, #61	@ 0x3d
 80031e2:	2102      	movs	r1, #2
 80031e4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	3304      	adds	r3, #4
 80031ee:	0019      	movs	r1, r3
 80031f0:	0010      	movs	r0, r2
 80031f2:	f000 fc19 	bl	8003a28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2248      	movs	r2, #72	@ 0x48
 80031fa:	2101      	movs	r1, #1
 80031fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	223e      	movs	r2, #62	@ 0x3e
 8003202:	2101      	movs	r1, #1
 8003204:	5499      	strb	r1, [r3, r2]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	223f      	movs	r2, #63	@ 0x3f
 800320a:	2101      	movs	r1, #1
 800320c:	5499      	strb	r1, [r3, r2]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2240      	movs	r2, #64	@ 0x40
 8003212:	2101      	movs	r1, #1
 8003214:	5499      	strb	r1, [r3, r2]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2241      	movs	r2, #65	@ 0x41
 800321a:	2101      	movs	r1, #1
 800321c:	5499      	strb	r1, [r3, r2]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2242      	movs	r2, #66	@ 0x42
 8003222:	2101      	movs	r1, #1
 8003224:	5499      	strb	r1, [r3, r2]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2243      	movs	r2, #67	@ 0x43
 800322a:	2101      	movs	r1, #1
 800322c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2244      	movs	r2, #68	@ 0x44
 8003232:	2101      	movs	r1, #1
 8003234:	5499      	strb	r1, [r3, r2]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2245      	movs	r2, #69	@ 0x45
 800323a:	2101      	movs	r1, #1
 800323c:	5499      	strb	r1, [r3, r2]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2246      	movs	r2, #70	@ 0x46
 8003242:	2101      	movs	r1, #1
 8003244:	5499      	strb	r1, [r3, r2]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2247      	movs	r2, #71	@ 0x47
 800324a:	2101      	movs	r1, #1
 800324c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	223d      	movs	r2, #61	@ 0x3d
 8003252:	2101      	movs	r1, #1
 8003254:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	0018      	movs	r0, r3
 800325a:	46bd      	mov	sp, r7
 800325c:	b002      	add	sp, #8
 800325e:	bd80      	pop	{r7, pc}

08003260 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e04a      	b.n	8003308 <HAL_TIM_OC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	223d      	movs	r2, #61	@ 0x3d
 8003276:	5c9b      	ldrb	r3, [r3, r2]
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d107      	bne.n	800328e <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	223c      	movs	r2, #60	@ 0x3c
 8003282:	2100      	movs	r1, #0
 8003284:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	0018      	movs	r0, r3
 800328a:	f000 f841 	bl	8003310 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	223d      	movs	r2, #61	@ 0x3d
 8003292:	2102      	movs	r1, #2
 8003294:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	3304      	adds	r3, #4
 800329e:	0019      	movs	r1, r3
 80032a0:	0010      	movs	r0, r2
 80032a2:	f000 fbc1 	bl	8003a28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2248      	movs	r2, #72	@ 0x48
 80032aa:	2101      	movs	r1, #1
 80032ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	223e      	movs	r2, #62	@ 0x3e
 80032b2:	2101      	movs	r1, #1
 80032b4:	5499      	strb	r1, [r3, r2]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	223f      	movs	r2, #63	@ 0x3f
 80032ba:	2101      	movs	r1, #1
 80032bc:	5499      	strb	r1, [r3, r2]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2240      	movs	r2, #64	@ 0x40
 80032c2:	2101      	movs	r1, #1
 80032c4:	5499      	strb	r1, [r3, r2]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2241      	movs	r2, #65	@ 0x41
 80032ca:	2101      	movs	r1, #1
 80032cc:	5499      	strb	r1, [r3, r2]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2242      	movs	r2, #66	@ 0x42
 80032d2:	2101      	movs	r1, #1
 80032d4:	5499      	strb	r1, [r3, r2]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2243      	movs	r2, #67	@ 0x43
 80032da:	2101      	movs	r1, #1
 80032dc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2244      	movs	r2, #68	@ 0x44
 80032e2:	2101      	movs	r1, #1
 80032e4:	5499      	strb	r1, [r3, r2]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2245      	movs	r2, #69	@ 0x45
 80032ea:	2101      	movs	r1, #1
 80032ec:	5499      	strb	r1, [r3, r2]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2246      	movs	r2, #70	@ 0x46
 80032f2:	2101      	movs	r1, #1
 80032f4:	5499      	strb	r1, [r3, r2]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2247      	movs	r2, #71	@ 0x47
 80032fa:	2101      	movs	r1, #1
 80032fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	223d      	movs	r2, #61	@ 0x3d
 8003302:	2101      	movs	r1, #1
 8003304:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	0018      	movs	r0, r3
 800330a:	46bd      	mov	sp, r7
 800330c:	b002      	add	sp, #8
 800330e:	bd80      	pop	{r7, pc}

08003310 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003318:	46c0      	nop			@ (mov r8, r8)
 800331a:	46bd      	mov	sp, r7
 800331c:	b002      	add	sp, #8
 800331e:	bd80      	pop	{r7, pc}

08003320 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800332a:	230f      	movs	r3, #15
 800332c:	18fb      	adds	r3, r7, r3
 800332e:	2200      	movs	r2, #0
 8003330:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d108      	bne.n	800334a <HAL_TIM_OC_Start_IT+0x2a>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	223e      	movs	r2, #62	@ 0x3e
 800333c:	5c9b      	ldrb	r3, [r3, r2]
 800333e:	b2db      	uxtb	r3, r3
 8003340:	3b01      	subs	r3, #1
 8003342:	1e5a      	subs	r2, r3, #1
 8003344:	4193      	sbcs	r3, r2
 8003346:	b2db      	uxtb	r3, r3
 8003348:	e037      	b.n	80033ba <HAL_TIM_OC_Start_IT+0x9a>
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	2b04      	cmp	r3, #4
 800334e:	d108      	bne.n	8003362 <HAL_TIM_OC_Start_IT+0x42>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	223f      	movs	r2, #63	@ 0x3f
 8003354:	5c9b      	ldrb	r3, [r3, r2]
 8003356:	b2db      	uxtb	r3, r3
 8003358:	3b01      	subs	r3, #1
 800335a:	1e5a      	subs	r2, r3, #1
 800335c:	4193      	sbcs	r3, r2
 800335e:	b2db      	uxtb	r3, r3
 8003360:	e02b      	b.n	80033ba <HAL_TIM_OC_Start_IT+0x9a>
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	2b08      	cmp	r3, #8
 8003366:	d108      	bne.n	800337a <HAL_TIM_OC_Start_IT+0x5a>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2240      	movs	r2, #64	@ 0x40
 800336c:	5c9b      	ldrb	r3, [r3, r2]
 800336e:	b2db      	uxtb	r3, r3
 8003370:	3b01      	subs	r3, #1
 8003372:	1e5a      	subs	r2, r3, #1
 8003374:	4193      	sbcs	r3, r2
 8003376:	b2db      	uxtb	r3, r3
 8003378:	e01f      	b.n	80033ba <HAL_TIM_OC_Start_IT+0x9a>
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	2b0c      	cmp	r3, #12
 800337e:	d108      	bne.n	8003392 <HAL_TIM_OC_Start_IT+0x72>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2241      	movs	r2, #65	@ 0x41
 8003384:	5c9b      	ldrb	r3, [r3, r2]
 8003386:	b2db      	uxtb	r3, r3
 8003388:	3b01      	subs	r3, #1
 800338a:	1e5a      	subs	r2, r3, #1
 800338c:	4193      	sbcs	r3, r2
 800338e:	b2db      	uxtb	r3, r3
 8003390:	e013      	b.n	80033ba <HAL_TIM_OC_Start_IT+0x9a>
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	2b10      	cmp	r3, #16
 8003396:	d108      	bne.n	80033aa <HAL_TIM_OC_Start_IT+0x8a>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2242      	movs	r2, #66	@ 0x42
 800339c:	5c9b      	ldrb	r3, [r3, r2]
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	3b01      	subs	r3, #1
 80033a2:	1e5a      	subs	r2, r3, #1
 80033a4:	4193      	sbcs	r3, r2
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	e007      	b.n	80033ba <HAL_TIM_OC_Start_IT+0x9a>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2243      	movs	r2, #67	@ 0x43
 80033ae:	5c9b      	ldrb	r3, [r3, r2]
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	3b01      	subs	r3, #1
 80033b4:	1e5a      	subs	r2, r3, #1
 80033b6:	4193      	sbcs	r3, r2
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <HAL_TIM_OC_Start_IT+0xa2>
  {
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e0be      	b.n	8003540 <HAL_TIM_OC_Start_IT+0x220>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d104      	bne.n	80033d2 <HAL_TIM_OC_Start_IT+0xb2>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	223e      	movs	r2, #62	@ 0x3e
 80033cc:	2102      	movs	r1, #2
 80033ce:	5499      	strb	r1, [r3, r2]
 80033d0:	e023      	b.n	800341a <HAL_TIM_OC_Start_IT+0xfa>
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	2b04      	cmp	r3, #4
 80033d6:	d104      	bne.n	80033e2 <HAL_TIM_OC_Start_IT+0xc2>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	223f      	movs	r2, #63	@ 0x3f
 80033dc:	2102      	movs	r1, #2
 80033de:	5499      	strb	r1, [r3, r2]
 80033e0:	e01b      	b.n	800341a <HAL_TIM_OC_Start_IT+0xfa>
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	2b08      	cmp	r3, #8
 80033e6:	d104      	bne.n	80033f2 <HAL_TIM_OC_Start_IT+0xd2>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2240      	movs	r2, #64	@ 0x40
 80033ec:	2102      	movs	r1, #2
 80033ee:	5499      	strb	r1, [r3, r2]
 80033f0:	e013      	b.n	800341a <HAL_TIM_OC_Start_IT+0xfa>
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	2b0c      	cmp	r3, #12
 80033f6:	d104      	bne.n	8003402 <HAL_TIM_OC_Start_IT+0xe2>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2241      	movs	r2, #65	@ 0x41
 80033fc:	2102      	movs	r1, #2
 80033fe:	5499      	strb	r1, [r3, r2]
 8003400:	e00b      	b.n	800341a <HAL_TIM_OC_Start_IT+0xfa>
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	2b10      	cmp	r3, #16
 8003406:	d104      	bne.n	8003412 <HAL_TIM_OC_Start_IT+0xf2>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2242      	movs	r2, #66	@ 0x42
 800340c:	2102      	movs	r1, #2
 800340e:	5499      	strb	r1, [r3, r2]
 8003410:	e003      	b.n	800341a <HAL_TIM_OC_Start_IT+0xfa>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2243      	movs	r2, #67	@ 0x43
 8003416:	2102      	movs	r1, #2
 8003418:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	2b0c      	cmp	r3, #12
 800341e:	d02a      	beq.n	8003476 <HAL_TIM_OC_Start_IT+0x156>
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	2b0c      	cmp	r3, #12
 8003424:	d830      	bhi.n	8003488 <HAL_TIM_OC_Start_IT+0x168>
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	2b08      	cmp	r3, #8
 800342a:	d01b      	beq.n	8003464 <HAL_TIM_OC_Start_IT+0x144>
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	2b08      	cmp	r3, #8
 8003430:	d82a      	bhi.n	8003488 <HAL_TIM_OC_Start_IT+0x168>
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d003      	beq.n	8003440 <HAL_TIM_OC_Start_IT+0x120>
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	2b04      	cmp	r3, #4
 800343c:	d009      	beq.n	8003452 <HAL_TIM_OC_Start_IT+0x132>
 800343e:	e023      	b.n	8003488 <HAL_TIM_OC_Start_IT+0x168>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68da      	ldr	r2, [r3, #12]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2102      	movs	r1, #2
 800344c:	430a      	orrs	r2, r1
 800344e:	60da      	str	r2, [r3, #12]
      break;
 8003450:	e01f      	b.n	8003492 <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68da      	ldr	r2, [r3, #12]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2104      	movs	r1, #4
 800345e:	430a      	orrs	r2, r1
 8003460:	60da      	str	r2, [r3, #12]
      break;
 8003462:	e016      	b.n	8003492 <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68da      	ldr	r2, [r3, #12]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2108      	movs	r1, #8
 8003470:	430a      	orrs	r2, r1
 8003472:	60da      	str	r2, [r3, #12]
      break;
 8003474:	e00d      	b.n	8003492 <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68da      	ldr	r2, [r3, #12]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2110      	movs	r1, #16
 8003482:	430a      	orrs	r2, r1
 8003484:	60da      	str	r2, [r3, #12]
      break;
 8003486:	e004      	b.n	8003492 <HAL_TIM_OC_Start_IT+0x172>
    }

    default:
      status = HAL_ERROR;
 8003488:	230f      	movs	r3, #15
 800348a:	18fb      	adds	r3, r7, r3
 800348c:	2201      	movs	r2, #1
 800348e:	701a      	strb	r2, [r3, #0]
      break;
 8003490:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8003492:	230f      	movs	r3, #15
 8003494:	18fb      	adds	r3, r7, r3
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d14e      	bne.n	800353a <HAL_TIM_OC_Start_IT+0x21a>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6839      	ldr	r1, [r7, #0]
 80034a2:	2201      	movs	r2, #1
 80034a4:	0018      	movs	r0, r3
 80034a6:	f000 fe71 	bl	800418c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a26      	ldr	r2, [pc, #152]	@ (8003548 <HAL_TIM_OC_Start_IT+0x228>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d009      	beq.n	80034c8 <HAL_TIM_OC_Start_IT+0x1a8>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a24      	ldr	r2, [pc, #144]	@ (800354c <HAL_TIM_OC_Start_IT+0x22c>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d004      	beq.n	80034c8 <HAL_TIM_OC_Start_IT+0x1a8>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a23      	ldr	r2, [pc, #140]	@ (8003550 <HAL_TIM_OC_Start_IT+0x230>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d101      	bne.n	80034cc <HAL_TIM_OC_Start_IT+0x1ac>
 80034c8:	2301      	movs	r3, #1
 80034ca:	e000      	b.n	80034ce <HAL_TIM_OC_Start_IT+0x1ae>
 80034cc:	2300      	movs	r3, #0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d008      	beq.n	80034e4 <HAL_TIM_OC_Start_IT+0x1c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2180      	movs	r1, #128	@ 0x80
 80034de:	0209      	lsls	r1, r1, #8
 80034e0:	430a      	orrs	r2, r1
 80034e2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a17      	ldr	r2, [pc, #92]	@ (8003548 <HAL_TIM_OC_Start_IT+0x228>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d004      	beq.n	80034f8 <HAL_TIM_OC_Start_IT+0x1d8>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a18      	ldr	r2, [pc, #96]	@ (8003554 <HAL_TIM_OC_Start_IT+0x234>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d116      	bne.n	8003526 <HAL_TIM_OC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	4a16      	ldr	r2, [pc, #88]	@ (8003558 <HAL_TIM_OC_Start_IT+0x238>)
 8003500:	4013      	ands	r3, r2
 8003502:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	2b06      	cmp	r3, #6
 8003508:	d016      	beq.n	8003538 <HAL_TIM_OC_Start_IT+0x218>
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	2380      	movs	r3, #128	@ 0x80
 800350e:	025b      	lsls	r3, r3, #9
 8003510:	429a      	cmp	r2, r3
 8003512:	d011      	beq.n	8003538 <HAL_TIM_OC_Start_IT+0x218>
      {
        __HAL_TIM_ENABLE(htim);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2101      	movs	r1, #1
 8003520:	430a      	orrs	r2, r1
 8003522:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003524:	e008      	b.n	8003538 <HAL_TIM_OC_Start_IT+0x218>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2101      	movs	r1, #1
 8003532:	430a      	orrs	r2, r1
 8003534:	601a      	str	r2, [r3, #0]
 8003536:	e000      	b.n	800353a <HAL_TIM_OC_Start_IT+0x21a>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003538:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 800353a:	230f      	movs	r3, #15
 800353c:	18fb      	adds	r3, r7, r3
 800353e:	781b      	ldrb	r3, [r3, #0]
}
 8003540:	0018      	movs	r0, r3
 8003542:	46bd      	mov	sp, r7
 8003544:	b004      	add	sp, #16
 8003546:	bd80      	pop	{r7, pc}
 8003548:	40012c00 	.word	0x40012c00
 800354c:	40014400 	.word	0x40014400
 8003550:	40014800 	.word	0x40014800
 8003554:	40000400 	.word	0x40000400
 8003558:	00010007 	.word	0x00010007

0800355c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	2202      	movs	r2, #2
 8003578:	4013      	ands	r3, r2
 800357a:	d021      	beq.n	80035c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2202      	movs	r2, #2
 8003580:	4013      	ands	r3, r2
 8003582:	d01d      	beq.n	80035c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2203      	movs	r2, #3
 800358a:	4252      	negs	r2, r2
 800358c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	2203      	movs	r2, #3
 800359c:	4013      	ands	r3, r2
 800359e:	d004      	beq.n	80035aa <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	0018      	movs	r0, r3
 80035a4:	f000 fa28 	bl	80039f8 <HAL_TIM_IC_CaptureCallback>
 80035a8:	e007      	b.n	80035ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	0018      	movs	r0, r3
 80035ae:	f000 fa1b 	bl	80039e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	0018      	movs	r0, r3
 80035b6:	f000 fa27 	bl	8003a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	2204      	movs	r2, #4
 80035c4:	4013      	ands	r3, r2
 80035c6:	d022      	beq.n	800360e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2204      	movs	r2, #4
 80035cc:	4013      	ands	r3, r2
 80035ce:	d01e      	beq.n	800360e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2205      	movs	r2, #5
 80035d6:	4252      	negs	r2, r2
 80035d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2202      	movs	r2, #2
 80035de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	699a      	ldr	r2, [r3, #24]
 80035e6:	23c0      	movs	r3, #192	@ 0xc0
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4013      	ands	r3, r2
 80035ec:	d004      	beq.n	80035f8 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	0018      	movs	r0, r3
 80035f2:	f000 fa01 	bl	80039f8 <HAL_TIM_IC_CaptureCallback>
 80035f6:	e007      	b.n	8003608 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	0018      	movs	r0, r3
 80035fc:	f000 f9f4 	bl	80039e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	0018      	movs	r0, r3
 8003604:	f000 fa00 	bl	8003a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	2208      	movs	r2, #8
 8003612:	4013      	ands	r3, r2
 8003614:	d021      	beq.n	800365a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2208      	movs	r2, #8
 800361a:	4013      	ands	r3, r2
 800361c:	d01d      	beq.n	800365a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2209      	movs	r2, #9
 8003624:	4252      	negs	r2, r2
 8003626:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2204      	movs	r2, #4
 800362c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	69db      	ldr	r3, [r3, #28]
 8003634:	2203      	movs	r2, #3
 8003636:	4013      	ands	r3, r2
 8003638:	d004      	beq.n	8003644 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	0018      	movs	r0, r3
 800363e:	f000 f9db 	bl	80039f8 <HAL_TIM_IC_CaptureCallback>
 8003642:	e007      	b.n	8003654 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	0018      	movs	r0, r3
 8003648:	f000 f9ce 	bl	80039e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	0018      	movs	r0, r3
 8003650:	f000 f9da 	bl	8003a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	2210      	movs	r2, #16
 800365e:	4013      	ands	r3, r2
 8003660:	d022      	beq.n	80036a8 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2210      	movs	r2, #16
 8003666:	4013      	ands	r3, r2
 8003668:	d01e      	beq.n	80036a8 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2211      	movs	r2, #17
 8003670:	4252      	negs	r2, r2
 8003672:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2208      	movs	r2, #8
 8003678:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	69da      	ldr	r2, [r3, #28]
 8003680:	23c0      	movs	r3, #192	@ 0xc0
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	4013      	ands	r3, r2
 8003686:	d004      	beq.n	8003692 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	0018      	movs	r0, r3
 800368c:	f000 f9b4 	bl	80039f8 <HAL_TIM_IC_CaptureCallback>
 8003690:	e007      	b.n	80036a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	0018      	movs	r0, r3
 8003696:	f000 f9a7 	bl	80039e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	0018      	movs	r0, r3
 800369e:	f000 f9b3 	bl	8003a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	2201      	movs	r2, #1
 80036ac:	4013      	ands	r3, r2
 80036ae:	d00c      	beq.n	80036ca <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2201      	movs	r2, #1
 80036b4:	4013      	ands	r3, r2
 80036b6:	d008      	beq.n	80036ca <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2202      	movs	r2, #2
 80036be:	4252      	negs	r2, r2
 80036c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	0018      	movs	r0, r3
 80036c6:	f000 f987 	bl	80039d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	2280      	movs	r2, #128	@ 0x80
 80036ce:	4013      	ands	r3, r2
 80036d0:	d104      	bne.n	80036dc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	2380      	movs	r3, #128	@ 0x80
 80036d6:	019b      	lsls	r3, r3, #6
 80036d8:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80036da:	d00b      	beq.n	80036f4 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2280      	movs	r2, #128	@ 0x80
 80036e0:	4013      	ands	r3, r2
 80036e2:	d007      	beq.n	80036f4 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a1e      	ldr	r2, [pc, #120]	@ (8003764 <HAL_TIM_IRQHandler+0x208>)
 80036ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	0018      	movs	r0, r3
 80036f0:	f000 fdda 	bl	80042a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80036f4:	68ba      	ldr	r2, [r7, #8]
 80036f6:	2380      	movs	r3, #128	@ 0x80
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	4013      	ands	r3, r2
 80036fc:	d00b      	beq.n	8003716 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2280      	movs	r2, #128	@ 0x80
 8003702:	4013      	ands	r3, r2
 8003704:	d007      	beq.n	8003716 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a17      	ldr	r2, [pc, #92]	@ (8003768 <HAL_TIM_IRQHandler+0x20c>)
 800370c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	0018      	movs	r0, r3
 8003712:	f000 fdd1 	bl	80042b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	2240      	movs	r2, #64	@ 0x40
 800371a:	4013      	ands	r3, r2
 800371c:	d00c      	beq.n	8003738 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2240      	movs	r2, #64	@ 0x40
 8003722:	4013      	ands	r3, r2
 8003724:	d008      	beq.n	8003738 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2241      	movs	r2, #65	@ 0x41
 800372c:	4252      	negs	r2, r2
 800372e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	0018      	movs	r0, r3
 8003734:	f000 f970 	bl	8003a18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	2220      	movs	r2, #32
 800373c:	4013      	ands	r3, r2
 800373e:	d00c      	beq.n	800375a <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2220      	movs	r2, #32
 8003744:	4013      	ands	r3, r2
 8003746:	d008      	beq.n	800375a <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2221      	movs	r2, #33	@ 0x21
 800374e:	4252      	negs	r2, r2
 8003750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	0018      	movs	r0, r3
 8003756:	f000 fd9f 	bl	8004298 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800375a:	46c0      	nop			@ (mov r8, r8)
 800375c:	46bd      	mov	sp, r7
 800375e:	b004      	add	sp, #16
 8003760:	bd80      	pop	{r7, pc}
 8003762:	46c0      	nop			@ (mov r8, r8)
 8003764:	ffffdf7f 	.word	0xffffdf7f
 8003768:	fffffeff 	.word	0xfffffeff

0800376c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b086      	sub	sp, #24
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003778:	2317      	movs	r3, #23
 800377a:	18fb      	adds	r3, r7, r3
 800377c:	2200      	movs	r2, #0
 800377e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	223c      	movs	r2, #60	@ 0x3c
 8003784:	5c9b      	ldrb	r3, [r3, r2]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d101      	bne.n	800378e <HAL_TIM_OC_ConfigChannel+0x22>
 800378a:	2302      	movs	r3, #2
 800378c:	e048      	b.n	8003820 <HAL_TIM_OC_ConfigChannel+0xb4>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	223c      	movs	r2, #60	@ 0x3c
 8003792:	2101      	movs	r1, #1
 8003794:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2b14      	cmp	r3, #20
 800379a:	d835      	bhi.n	8003808 <HAL_TIM_OC_ConfigChannel+0x9c>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	009a      	lsls	r2, r3, #2
 80037a0:	4b21      	ldr	r3, [pc, #132]	@ (8003828 <HAL_TIM_OC_ConfigChannel+0xbc>)
 80037a2:	18d3      	adds	r3, r2, r3
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68ba      	ldr	r2, [r7, #8]
 80037ae:	0011      	movs	r1, r2
 80037b0:	0018      	movs	r0, r3
 80037b2:	f000 f9b3 	bl	8003b1c <TIM_OC1_SetConfig>
      break;
 80037b6:	e02c      	b.n	8003812 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68ba      	ldr	r2, [r7, #8]
 80037be:	0011      	movs	r1, r2
 80037c0:	0018      	movs	r0, r3
 80037c2:	f000 fa2b 	bl	8003c1c <TIM_OC2_SetConfig>
      break;
 80037c6:	e024      	b.n	8003812 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68ba      	ldr	r2, [r7, #8]
 80037ce:	0011      	movs	r1, r2
 80037d0:	0018      	movs	r0, r3
 80037d2:	f000 faa1 	bl	8003d18 <TIM_OC3_SetConfig>
      break;
 80037d6:	e01c      	b.n	8003812 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68ba      	ldr	r2, [r7, #8]
 80037de:	0011      	movs	r1, r2
 80037e0:	0018      	movs	r0, r3
 80037e2:	f000 fb1b 	bl	8003e1c <TIM_OC4_SetConfig>
      break;
 80037e6:	e014      	b.n	8003812 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	0011      	movs	r1, r2
 80037f0:	0018      	movs	r0, r3
 80037f2:	f000 fb77 	bl	8003ee4 <TIM_OC5_SetConfig>
      break;
 80037f6:	e00c      	b.n	8003812 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68ba      	ldr	r2, [r7, #8]
 80037fe:	0011      	movs	r1, r2
 8003800:	0018      	movs	r0, r3
 8003802:	f000 fbc9 	bl	8003f98 <TIM_OC6_SetConfig>
      break;
 8003806:	e004      	b.n	8003812 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003808:	2317      	movs	r3, #23
 800380a:	18fb      	adds	r3, r7, r3
 800380c:	2201      	movs	r2, #1
 800380e:	701a      	strb	r2, [r3, #0]
      break;
 8003810:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	223c      	movs	r2, #60	@ 0x3c
 8003816:	2100      	movs	r1, #0
 8003818:	5499      	strb	r1, [r3, r2]

  return status;
 800381a:	2317      	movs	r3, #23
 800381c:	18fb      	adds	r3, r7, r3
 800381e:	781b      	ldrb	r3, [r3, #0]
}
 8003820:	0018      	movs	r0, r3
 8003822:	46bd      	mov	sp, r7
 8003824:	b006      	add	sp, #24
 8003826:	bd80      	pop	{r7, pc}
 8003828:	08005808 	.word	0x08005808

0800382c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003836:	230f      	movs	r3, #15
 8003838:	18fb      	adds	r3, r7, r3
 800383a:	2200      	movs	r2, #0
 800383c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	223c      	movs	r2, #60	@ 0x3c
 8003842:	5c9b      	ldrb	r3, [r3, r2]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d101      	bne.n	800384c <HAL_TIM_ConfigClockSource+0x20>
 8003848:	2302      	movs	r3, #2
 800384a:	e0bc      	b.n	80039c6 <HAL_TIM_ConfigClockSource+0x19a>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	223c      	movs	r2, #60	@ 0x3c
 8003850:	2101      	movs	r1, #1
 8003852:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	223d      	movs	r2, #61	@ 0x3d
 8003858:	2102      	movs	r1, #2
 800385a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	4a5a      	ldr	r2, [pc, #360]	@ (80039d0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003868:	4013      	ands	r3, r2
 800386a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	4a59      	ldr	r2, [pc, #356]	@ (80039d4 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003870:	4013      	ands	r3, r2
 8003872:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68ba      	ldr	r2, [r7, #8]
 800387a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2280      	movs	r2, #128	@ 0x80
 8003882:	0192      	lsls	r2, r2, #6
 8003884:	4293      	cmp	r3, r2
 8003886:	d040      	beq.n	800390a <HAL_TIM_ConfigClockSource+0xde>
 8003888:	2280      	movs	r2, #128	@ 0x80
 800388a:	0192      	lsls	r2, r2, #6
 800388c:	4293      	cmp	r3, r2
 800388e:	d900      	bls.n	8003892 <HAL_TIM_ConfigClockSource+0x66>
 8003890:	e088      	b.n	80039a4 <HAL_TIM_ConfigClockSource+0x178>
 8003892:	2280      	movs	r2, #128	@ 0x80
 8003894:	0152      	lsls	r2, r2, #5
 8003896:	4293      	cmp	r3, r2
 8003898:	d100      	bne.n	800389c <HAL_TIM_ConfigClockSource+0x70>
 800389a:	e088      	b.n	80039ae <HAL_TIM_ConfigClockSource+0x182>
 800389c:	2280      	movs	r2, #128	@ 0x80
 800389e:	0152      	lsls	r2, r2, #5
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d900      	bls.n	80038a6 <HAL_TIM_ConfigClockSource+0x7a>
 80038a4:	e07e      	b.n	80039a4 <HAL_TIM_ConfigClockSource+0x178>
 80038a6:	2b70      	cmp	r3, #112	@ 0x70
 80038a8:	d018      	beq.n	80038dc <HAL_TIM_ConfigClockSource+0xb0>
 80038aa:	d900      	bls.n	80038ae <HAL_TIM_ConfigClockSource+0x82>
 80038ac:	e07a      	b.n	80039a4 <HAL_TIM_ConfigClockSource+0x178>
 80038ae:	2b60      	cmp	r3, #96	@ 0x60
 80038b0:	d04f      	beq.n	8003952 <HAL_TIM_ConfigClockSource+0x126>
 80038b2:	d900      	bls.n	80038b6 <HAL_TIM_ConfigClockSource+0x8a>
 80038b4:	e076      	b.n	80039a4 <HAL_TIM_ConfigClockSource+0x178>
 80038b6:	2b50      	cmp	r3, #80	@ 0x50
 80038b8:	d03b      	beq.n	8003932 <HAL_TIM_ConfigClockSource+0x106>
 80038ba:	d900      	bls.n	80038be <HAL_TIM_ConfigClockSource+0x92>
 80038bc:	e072      	b.n	80039a4 <HAL_TIM_ConfigClockSource+0x178>
 80038be:	2b40      	cmp	r3, #64	@ 0x40
 80038c0:	d057      	beq.n	8003972 <HAL_TIM_ConfigClockSource+0x146>
 80038c2:	d900      	bls.n	80038c6 <HAL_TIM_ConfigClockSource+0x9a>
 80038c4:	e06e      	b.n	80039a4 <HAL_TIM_ConfigClockSource+0x178>
 80038c6:	2b30      	cmp	r3, #48	@ 0x30
 80038c8:	d063      	beq.n	8003992 <HAL_TIM_ConfigClockSource+0x166>
 80038ca:	d86b      	bhi.n	80039a4 <HAL_TIM_ConfigClockSource+0x178>
 80038cc:	2b20      	cmp	r3, #32
 80038ce:	d060      	beq.n	8003992 <HAL_TIM_ConfigClockSource+0x166>
 80038d0:	d868      	bhi.n	80039a4 <HAL_TIM_ConfigClockSource+0x178>
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d05d      	beq.n	8003992 <HAL_TIM_ConfigClockSource+0x166>
 80038d6:	2b10      	cmp	r3, #16
 80038d8:	d05b      	beq.n	8003992 <HAL_TIM_ConfigClockSource+0x166>
 80038da:	e063      	b.n	80039a4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038ec:	f000 fc2e 	bl	800414c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	2277      	movs	r2, #119	@ 0x77
 80038fc:	4313      	orrs	r3, r2
 80038fe:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	609a      	str	r2, [r3, #8]
      break;
 8003908:	e052      	b.n	80039b0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800391a:	f000 fc17 	bl	800414c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	689a      	ldr	r2, [r3, #8]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2180      	movs	r1, #128	@ 0x80
 800392a:	01c9      	lsls	r1, r1, #7
 800392c:	430a      	orrs	r2, r1
 800392e:	609a      	str	r2, [r3, #8]
      break;
 8003930:	e03e      	b.n	80039b0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800393e:	001a      	movs	r2, r3
 8003940:	f000 fb88 	bl	8004054 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2150      	movs	r1, #80	@ 0x50
 800394a:	0018      	movs	r0, r3
 800394c:	f000 fbe2 	bl	8004114 <TIM_ITRx_SetConfig>
      break;
 8003950:	e02e      	b.n	80039b0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800395e:	001a      	movs	r2, r3
 8003960:	f000 fba6 	bl	80040b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2160      	movs	r1, #96	@ 0x60
 800396a:	0018      	movs	r0, r3
 800396c:	f000 fbd2 	bl	8004114 <TIM_ITRx_SetConfig>
      break;
 8003970:	e01e      	b.n	80039b0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800397e:	001a      	movs	r2, r3
 8003980:	f000 fb68 	bl	8004054 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2140      	movs	r1, #64	@ 0x40
 800398a:	0018      	movs	r0, r3
 800398c:	f000 fbc2 	bl	8004114 <TIM_ITRx_SetConfig>
      break;
 8003990:	e00e      	b.n	80039b0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	0019      	movs	r1, r3
 800399c:	0010      	movs	r0, r2
 800399e:	f000 fbb9 	bl	8004114 <TIM_ITRx_SetConfig>
      break;
 80039a2:	e005      	b.n	80039b0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80039a4:	230f      	movs	r3, #15
 80039a6:	18fb      	adds	r3, r7, r3
 80039a8:	2201      	movs	r2, #1
 80039aa:	701a      	strb	r2, [r3, #0]
      break;
 80039ac:	e000      	b.n	80039b0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80039ae:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	223d      	movs	r2, #61	@ 0x3d
 80039b4:	2101      	movs	r1, #1
 80039b6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	223c      	movs	r2, #60	@ 0x3c
 80039bc:	2100      	movs	r1, #0
 80039be:	5499      	strb	r1, [r3, r2]

  return status;
 80039c0:	230f      	movs	r3, #15
 80039c2:	18fb      	adds	r3, r7, r3
 80039c4:	781b      	ldrb	r3, [r3, #0]
}
 80039c6:	0018      	movs	r0, r3
 80039c8:	46bd      	mov	sp, r7
 80039ca:	b004      	add	sp, #16
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	46c0      	nop			@ (mov r8, r8)
 80039d0:	ffceff88 	.word	0xffceff88
 80039d4:	ffff00ff 	.word	0xffff00ff

080039d8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80039e0:	46c0      	nop			@ (mov r8, r8)
 80039e2:	46bd      	mov	sp, r7
 80039e4:	b002      	add	sp, #8
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039f0:	46c0      	nop			@ (mov r8, r8)
 80039f2:	46bd      	mov	sp, r7
 80039f4:	b002      	add	sp, #8
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a00:	46c0      	nop			@ (mov r8, r8)
 8003a02:	46bd      	mov	sp, r7
 8003a04:	b002      	add	sp, #8
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a10:	46c0      	nop			@ (mov r8, r8)
 8003a12:	46bd      	mov	sp, r7
 8003a14:	b002      	add	sp, #8
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a20:	46c0      	nop			@ (mov r8, r8)
 8003a22:	46bd      	mov	sp, r7
 8003a24:	b002      	add	sp, #8
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a32      	ldr	r2, [pc, #200]	@ (8003b04 <TIM_Base_SetConfig+0xdc>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d003      	beq.n	8003a48 <TIM_Base_SetConfig+0x20>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a31      	ldr	r2, [pc, #196]	@ (8003b08 <TIM_Base_SetConfig+0xe0>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d108      	bne.n	8003a5a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2270      	movs	r2, #112	@ 0x70
 8003a4c:	4393      	bics	r3, r2
 8003a4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a29      	ldr	r2, [pc, #164]	@ (8003b04 <TIM_Base_SetConfig+0xdc>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d00f      	beq.n	8003a82 <TIM_Base_SetConfig+0x5a>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a28      	ldr	r2, [pc, #160]	@ (8003b08 <TIM_Base_SetConfig+0xe0>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d00b      	beq.n	8003a82 <TIM_Base_SetConfig+0x5a>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a27      	ldr	r2, [pc, #156]	@ (8003b0c <TIM_Base_SetConfig+0xe4>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d007      	beq.n	8003a82 <TIM_Base_SetConfig+0x5a>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a26      	ldr	r2, [pc, #152]	@ (8003b10 <TIM_Base_SetConfig+0xe8>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d003      	beq.n	8003a82 <TIM_Base_SetConfig+0x5a>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a25      	ldr	r2, [pc, #148]	@ (8003b14 <TIM_Base_SetConfig+0xec>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d108      	bne.n	8003a94 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	4a24      	ldr	r2, [pc, #144]	@ (8003b18 <TIM_Base_SetConfig+0xf0>)
 8003a86:	4013      	ands	r3, r2
 8003a88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2280      	movs	r2, #128	@ 0x80
 8003a98:	4393      	bics	r3, r2
 8003a9a:	001a      	movs	r2, r3
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	689a      	ldr	r2, [r3, #8]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a11      	ldr	r2, [pc, #68]	@ (8003b04 <TIM_Base_SetConfig+0xdc>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d007      	beq.n	8003ad2 <TIM_Base_SetConfig+0xaa>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a12      	ldr	r2, [pc, #72]	@ (8003b10 <TIM_Base_SetConfig+0xe8>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d003      	beq.n	8003ad2 <TIM_Base_SetConfig+0xaa>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a11      	ldr	r2, [pc, #68]	@ (8003b14 <TIM_Base_SetConfig+0xec>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d103      	bne.n	8003ada <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	691a      	ldr	r2, [r3, #16]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d106      	bne.n	8003afa <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	2201      	movs	r2, #1
 8003af2:	4393      	bics	r3, r2
 8003af4:	001a      	movs	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	611a      	str	r2, [r3, #16]
  }
}
 8003afa:	46c0      	nop			@ (mov r8, r8)
 8003afc:	46bd      	mov	sp, r7
 8003afe:	b004      	add	sp, #16
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	46c0      	nop			@ (mov r8, r8)
 8003b04:	40012c00 	.word	0x40012c00
 8003b08:	40000400 	.word	0x40000400
 8003b0c:	40002000 	.word	0x40002000
 8003b10:	40014400 	.word	0x40014400
 8003b14:	40014800 	.word	0x40014800
 8003b18:	fffffcff 	.word	0xfffffcff

08003b1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	2201      	movs	r2, #1
 8003b32:	4393      	bics	r3, r2
 8003b34:	001a      	movs	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	4a2e      	ldr	r2, [pc, #184]	@ (8003c04 <TIM_OC1_SetConfig+0xe8>)
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2203      	movs	r2, #3
 8003b52:	4393      	bics	r3, r2
 8003b54:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	2202      	movs	r2, #2
 8003b64:	4393      	bics	r3, r2
 8003b66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a24      	ldr	r2, [pc, #144]	@ (8003c08 <TIM_OC1_SetConfig+0xec>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d007      	beq.n	8003b8a <TIM_OC1_SetConfig+0x6e>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a23      	ldr	r2, [pc, #140]	@ (8003c0c <TIM_OC1_SetConfig+0xf0>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d003      	beq.n	8003b8a <TIM_OC1_SetConfig+0x6e>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a22      	ldr	r2, [pc, #136]	@ (8003c10 <TIM_OC1_SetConfig+0xf4>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d10c      	bne.n	8003ba4 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	2208      	movs	r2, #8
 8003b8e:	4393      	bics	r3, r2
 8003b90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	2204      	movs	r2, #4
 8003ba0:	4393      	bics	r3, r2
 8003ba2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a18      	ldr	r2, [pc, #96]	@ (8003c08 <TIM_OC1_SetConfig+0xec>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d007      	beq.n	8003bbc <TIM_OC1_SetConfig+0xa0>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a17      	ldr	r2, [pc, #92]	@ (8003c0c <TIM_OC1_SetConfig+0xf0>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d003      	beq.n	8003bbc <TIM_OC1_SetConfig+0xa0>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a16      	ldr	r2, [pc, #88]	@ (8003c10 <TIM_OC1_SetConfig+0xf4>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d111      	bne.n	8003be0 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	4a15      	ldr	r2, [pc, #84]	@ (8003c14 <TIM_OC1_SetConfig+0xf8>)
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	4a14      	ldr	r2, [pc, #80]	@ (8003c18 <TIM_OC1_SetConfig+0xfc>)
 8003bc8:	4013      	ands	r3, r2
 8003bca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	695b      	ldr	r3, [r3, #20]
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	621a      	str	r2, [r3, #32]
}
 8003bfa:	46c0      	nop			@ (mov r8, r8)
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	b006      	add	sp, #24
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	46c0      	nop			@ (mov r8, r8)
 8003c04:	fffeff8f 	.word	0xfffeff8f
 8003c08:	40012c00 	.word	0x40012c00
 8003c0c:	40014400 	.word	0x40014400
 8003c10:	40014800 	.word	0x40014800
 8003c14:	fffffeff 	.word	0xfffffeff
 8003c18:	fffffdff 	.word	0xfffffdff

08003c1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
 8003c30:	2210      	movs	r2, #16
 8003c32:	4393      	bics	r3, r2
 8003c34:	001a      	movs	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	4a2c      	ldr	r2, [pc, #176]	@ (8003cfc <TIM_OC2_SetConfig+0xe0>)
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	4a2b      	ldr	r2, [pc, #172]	@ (8003d00 <TIM_OC2_SetConfig+0xe4>)
 8003c52:	4013      	ands	r3, r2
 8003c54:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	021b      	lsls	r3, r3, #8
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	2220      	movs	r2, #32
 8003c66:	4393      	bics	r3, r2
 8003c68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	011b      	lsls	r3, r3, #4
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a22      	ldr	r2, [pc, #136]	@ (8003d04 <TIM_OC2_SetConfig+0xe8>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d10d      	bne.n	8003c9a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	2280      	movs	r2, #128	@ 0x80
 8003c82:	4393      	bics	r3, r2
 8003c84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	011b      	lsls	r3, r3, #4
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	2240      	movs	r2, #64	@ 0x40
 8003c96:	4393      	bics	r3, r2
 8003c98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a19      	ldr	r2, [pc, #100]	@ (8003d04 <TIM_OC2_SetConfig+0xe8>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d007      	beq.n	8003cb2 <TIM_OC2_SetConfig+0x96>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a18      	ldr	r2, [pc, #96]	@ (8003d08 <TIM_OC2_SetConfig+0xec>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d003      	beq.n	8003cb2 <TIM_OC2_SetConfig+0x96>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a17      	ldr	r2, [pc, #92]	@ (8003d0c <TIM_OC2_SetConfig+0xf0>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d113      	bne.n	8003cda <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	4a16      	ldr	r2, [pc, #88]	@ (8003d10 <TIM_OC2_SetConfig+0xf4>)
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	4a15      	ldr	r2, [pc, #84]	@ (8003d14 <TIM_OC2_SetConfig+0xf8>)
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	621a      	str	r2, [r3, #32]
}
 8003cf4:	46c0      	nop			@ (mov r8, r8)
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	b006      	add	sp, #24
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	feff8fff 	.word	0xfeff8fff
 8003d00:	fffffcff 	.word	0xfffffcff
 8003d04:	40012c00 	.word	0x40012c00
 8003d08:	40014400 	.word	0x40014400
 8003d0c:	40014800 	.word	0x40014800
 8003d10:	fffffbff 	.word	0xfffffbff
 8003d14:	fffff7ff 	.word	0xfffff7ff

08003d18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a1b      	ldr	r3, [r3, #32]
 8003d2c:	4a31      	ldr	r2, [pc, #196]	@ (8003df4 <TIM_OC3_SetConfig+0xdc>)
 8003d2e:	401a      	ands	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	4a2d      	ldr	r2, [pc, #180]	@ (8003df8 <TIM_OC3_SetConfig+0xe0>)
 8003d44:	4013      	ands	r3, r2
 8003d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2203      	movs	r2, #3
 8003d4c:	4393      	bics	r3, r2
 8003d4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	4a27      	ldr	r2, [pc, #156]	@ (8003dfc <TIM_OC3_SetConfig+0xe4>)
 8003d5e:	4013      	ands	r3, r2
 8003d60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	021b      	lsls	r3, r3, #8
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a23      	ldr	r2, [pc, #140]	@ (8003e00 <TIM_OC3_SetConfig+0xe8>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d10d      	bne.n	8003d92 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	4a22      	ldr	r2, [pc, #136]	@ (8003e04 <TIM_OC3_SetConfig+0xec>)
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	021b      	lsls	r3, r3, #8
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	4a1e      	ldr	r2, [pc, #120]	@ (8003e08 <TIM_OC3_SetConfig+0xf0>)
 8003d8e:	4013      	ands	r3, r2
 8003d90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a1a      	ldr	r2, [pc, #104]	@ (8003e00 <TIM_OC3_SetConfig+0xe8>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d007      	beq.n	8003daa <TIM_OC3_SetConfig+0x92>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a1b      	ldr	r2, [pc, #108]	@ (8003e0c <TIM_OC3_SetConfig+0xf4>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d003      	beq.n	8003daa <TIM_OC3_SetConfig+0x92>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a1a      	ldr	r2, [pc, #104]	@ (8003e10 <TIM_OC3_SetConfig+0xf8>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d113      	bne.n	8003dd2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	4a19      	ldr	r2, [pc, #100]	@ (8003e14 <TIM_OC3_SetConfig+0xfc>)
 8003dae:	4013      	ands	r3, r2
 8003db0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	4a18      	ldr	r2, [pc, #96]	@ (8003e18 <TIM_OC3_SetConfig+0x100>)
 8003db6:	4013      	ands	r3, r2
 8003db8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	011b      	lsls	r3, r3, #4
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	011b      	lsls	r3, r3, #4
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	685a      	ldr	r2, [r3, #4]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	621a      	str	r2, [r3, #32]
}
 8003dec:	46c0      	nop			@ (mov r8, r8)
 8003dee:	46bd      	mov	sp, r7
 8003df0:	b006      	add	sp, #24
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	fffffeff 	.word	0xfffffeff
 8003df8:	fffeff8f 	.word	0xfffeff8f
 8003dfc:	fffffdff 	.word	0xfffffdff
 8003e00:	40012c00 	.word	0x40012c00
 8003e04:	fffff7ff 	.word	0xfffff7ff
 8003e08:	fffffbff 	.word	0xfffffbff
 8003e0c:	40014400 	.word	0x40014400
 8003e10:	40014800 	.word	0x40014800
 8003e14:	ffffefff 	.word	0xffffefff
 8003e18:	ffffdfff 	.word	0xffffdfff

08003e1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a1b      	ldr	r3, [r3, #32]
 8003e30:	4a24      	ldr	r2, [pc, #144]	@ (8003ec4 <TIM_OC4_SetConfig+0xa8>)
 8003e32:	401a      	ands	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	4a20      	ldr	r2, [pc, #128]	@ (8003ec8 <TIM_OC4_SetConfig+0xac>)
 8003e48:	4013      	ands	r3, r2
 8003e4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	4a1f      	ldr	r2, [pc, #124]	@ (8003ecc <TIM_OC4_SetConfig+0xb0>)
 8003e50:	4013      	ands	r3, r2
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	021b      	lsls	r3, r3, #8
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	4a1b      	ldr	r2, [pc, #108]	@ (8003ed0 <TIM_OC4_SetConfig+0xb4>)
 8003e64:	4013      	ands	r3, r2
 8003e66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	031b      	lsls	r3, r3, #12
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a17      	ldr	r2, [pc, #92]	@ (8003ed4 <TIM_OC4_SetConfig+0xb8>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d007      	beq.n	8003e8c <TIM_OC4_SetConfig+0x70>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a16      	ldr	r2, [pc, #88]	@ (8003ed8 <TIM_OC4_SetConfig+0xbc>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d003      	beq.n	8003e8c <TIM_OC4_SetConfig+0x70>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a15      	ldr	r2, [pc, #84]	@ (8003edc <TIM_OC4_SetConfig+0xc0>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d109      	bne.n	8003ea0 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	4a14      	ldr	r2, [pc, #80]	@ (8003ee0 <TIM_OC4_SetConfig+0xc4>)
 8003e90:	4013      	ands	r3, r2
 8003e92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	019b      	lsls	r3, r3, #6
 8003e9a:	697a      	ldr	r2, [r7, #20]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685a      	ldr	r2, [r3, #4]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	621a      	str	r2, [r3, #32]
}
 8003eba:	46c0      	nop			@ (mov r8, r8)
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	b006      	add	sp, #24
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	46c0      	nop			@ (mov r8, r8)
 8003ec4:	ffffefff 	.word	0xffffefff
 8003ec8:	feff8fff 	.word	0xfeff8fff
 8003ecc:	fffffcff 	.word	0xfffffcff
 8003ed0:	ffffdfff 	.word	0xffffdfff
 8003ed4:	40012c00 	.word	0x40012c00
 8003ed8:	40014400 	.word	0x40014400
 8003edc:	40014800 	.word	0x40014800
 8003ee0:	ffffbfff 	.word	0xffffbfff

08003ee4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a1b      	ldr	r3, [r3, #32]
 8003ef2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a1b      	ldr	r3, [r3, #32]
 8003ef8:	4a21      	ldr	r2, [pc, #132]	@ (8003f80 <TIM_OC5_SetConfig+0x9c>)
 8003efa:	401a      	ands	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	4a1d      	ldr	r2, [pc, #116]	@ (8003f84 <TIM_OC5_SetConfig+0xa0>)
 8003f10:	4013      	ands	r3, r2
 8003f12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	4a19      	ldr	r2, [pc, #100]	@ (8003f88 <TIM_OC5_SetConfig+0xa4>)
 8003f22:	4013      	ands	r3, r2
 8003f24:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	041b      	lsls	r3, r3, #16
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a15      	ldr	r2, [pc, #84]	@ (8003f8c <TIM_OC5_SetConfig+0xa8>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d007      	beq.n	8003f4a <TIM_OC5_SetConfig+0x66>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a14      	ldr	r2, [pc, #80]	@ (8003f90 <TIM_OC5_SetConfig+0xac>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d003      	beq.n	8003f4a <TIM_OC5_SetConfig+0x66>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a13      	ldr	r2, [pc, #76]	@ (8003f94 <TIM_OC5_SetConfig+0xb0>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d109      	bne.n	8003f5e <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	4a0c      	ldr	r2, [pc, #48]	@ (8003f80 <TIM_OC5_SetConfig+0x9c>)
 8003f4e:	4013      	ands	r3, r2
 8003f50:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	021b      	lsls	r3, r3, #8
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685a      	ldr	r2, [r3, #4]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	621a      	str	r2, [r3, #32]
}
 8003f78:	46c0      	nop			@ (mov r8, r8)
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	b006      	add	sp, #24
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	fffeffff 	.word	0xfffeffff
 8003f84:	fffeff8f 	.word	0xfffeff8f
 8003f88:	fffdffff 	.word	0xfffdffff
 8003f8c:	40012c00 	.word	0x40012c00
 8003f90:	40014400 	.word	0x40014400
 8003f94:	40014800 	.word	0x40014800

08003f98 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b086      	sub	sp, #24
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	4a22      	ldr	r2, [pc, #136]	@ (8004038 <TIM_OC6_SetConfig+0xa0>)
 8003fae:	401a      	ands	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	4a1e      	ldr	r2, [pc, #120]	@ (800403c <TIM_OC6_SetConfig+0xa4>)
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	021b      	lsls	r3, r3, #8
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	4a1a      	ldr	r2, [pc, #104]	@ (8004040 <TIM_OC6_SetConfig+0xa8>)
 8003fd8:	4013      	ands	r3, r2
 8003fda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	051b      	lsls	r3, r3, #20
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a16      	ldr	r2, [pc, #88]	@ (8004044 <TIM_OC6_SetConfig+0xac>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d007      	beq.n	8004000 <TIM_OC6_SetConfig+0x68>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a15      	ldr	r2, [pc, #84]	@ (8004048 <TIM_OC6_SetConfig+0xb0>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d003      	beq.n	8004000 <TIM_OC6_SetConfig+0x68>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a14      	ldr	r2, [pc, #80]	@ (800404c <TIM_OC6_SetConfig+0xb4>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d109      	bne.n	8004014 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	4a13      	ldr	r2, [pc, #76]	@ (8004050 <TIM_OC6_SetConfig+0xb8>)
 8004004:	4013      	ands	r3, r2
 8004006:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	029b      	lsls	r3, r3, #10
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	4313      	orrs	r3, r2
 8004012:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685a      	ldr	r2, [r3, #4]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	621a      	str	r2, [r3, #32]
}
 800402e:	46c0      	nop			@ (mov r8, r8)
 8004030:	46bd      	mov	sp, r7
 8004032:	b006      	add	sp, #24
 8004034:	bd80      	pop	{r7, pc}
 8004036:	46c0      	nop			@ (mov r8, r8)
 8004038:	ffefffff 	.word	0xffefffff
 800403c:	feff8fff 	.word	0xfeff8fff
 8004040:	ffdfffff 	.word	0xffdfffff
 8004044:	40012c00 	.word	0x40012c00
 8004048:	40014400 	.word	0x40014400
 800404c:	40014800 	.word	0x40014800
 8004050:	fffbffff 	.word	0xfffbffff

08004054 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b086      	sub	sp, #24
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6a1b      	ldr	r3, [r3, #32]
 8004064:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	2201      	movs	r2, #1
 800406c:	4393      	bics	r3, r2
 800406e:	001a      	movs	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	22f0      	movs	r2, #240	@ 0xf0
 800407e:	4393      	bics	r3, r2
 8004080:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	011b      	lsls	r3, r3, #4
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	4313      	orrs	r3, r2
 800408a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	220a      	movs	r2, #10
 8004090:	4393      	bics	r3, r2
 8004092:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	4313      	orrs	r3, r2
 800409a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	621a      	str	r2, [r3, #32]
}
 80040a8:	46c0      	nop			@ (mov r8, r8)
 80040aa:	46bd      	mov	sp, r7
 80040ac:	b006      	add	sp, #24
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6a1b      	ldr	r3, [r3, #32]
 80040c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	2210      	movs	r2, #16
 80040c8:	4393      	bics	r3, r2
 80040ca:	001a      	movs	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	4a0d      	ldr	r2, [pc, #52]	@ (8004110 <TIM_TI2_ConfigInputStage+0x60>)
 80040da:	4013      	ands	r3, r2
 80040dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	031b      	lsls	r3, r3, #12
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	22a0      	movs	r2, #160	@ 0xa0
 80040ec:	4393      	bics	r3, r2
 80040ee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	011b      	lsls	r3, r3, #4
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	621a      	str	r2, [r3, #32]
}
 8004106:	46c0      	nop			@ (mov r8, r8)
 8004108:	46bd      	mov	sp, r7
 800410a:	b006      	add	sp, #24
 800410c:	bd80      	pop	{r7, pc}
 800410e:	46c0      	nop			@ (mov r8, r8)
 8004110:	ffff0fff 	.word	0xffff0fff

08004114 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	4a08      	ldr	r2, [pc, #32]	@ (8004148 <TIM_ITRx_SetConfig+0x34>)
 8004128:	4013      	ands	r3, r2
 800412a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800412c:	683a      	ldr	r2, [r7, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	4313      	orrs	r3, r2
 8004132:	2207      	movs	r2, #7
 8004134:	4313      	orrs	r3, r2
 8004136:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	609a      	str	r2, [r3, #8]
}
 800413e:	46c0      	nop			@ (mov r8, r8)
 8004140:	46bd      	mov	sp, r7
 8004142:	b004      	add	sp, #16
 8004144:	bd80      	pop	{r7, pc}
 8004146:	46c0      	nop			@ (mov r8, r8)
 8004148:	ffcfff8f 	.word	0xffcfff8f

0800414c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
 8004158:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	4a09      	ldr	r2, [pc, #36]	@ (8004188 <TIM_ETR_SetConfig+0x3c>)
 8004164:	4013      	ands	r3, r2
 8004166:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	021a      	lsls	r2, r3, #8
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	431a      	orrs	r2, r3
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	4313      	orrs	r3, r2
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	4313      	orrs	r3, r2
 8004178:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	609a      	str	r2, [r3, #8]
}
 8004180:	46c0      	nop			@ (mov r8, r8)
 8004182:	46bd      	mov	sp, r7
 8004184:	b006      	add	sp, #24
 8004186:	bd80      	pop	{r7, pc}
 8004188:	ffff00ff 	.word	0xffff00ff

0800418c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b086      	sub	sp, #24
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	221f      	movs	r2, #31
 800419c:	4013      	ands	r3, r2
 800419e:	2201      	movs	r2, #1
 80041a0:	409a      	lsls	r2, r3
 80041a2:	0013      	movs	r3, r2
 80041a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	43d2      	mvns	r2, r2
 80041ae:	401a      	ands	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6a1a      	ldr	r2, [r3, #32]
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	211f      	movs	r1, #31
 80041bc:	400b      	ands	r3, r1
 80041be:	6879      	ldr	r1, [r7, #4]
 80041c0:	4099      	lsls	r1, r3
 80041c2:	000b      	movs	r3, r1
 80041c4:	431a      	orrs	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	621a      	str	r2, [r3, #32]
}
 80041ca:	46c0      	nop			@ (mov r8, r8)
 80041cc:	46bd      	mov	sp, r7
 80041ce:	b006      	add	sp, #24
 80041d0:	bd80      	pop	{r7, pc}
	...

080041d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	223c      	movs	r2, #60	@ 0x3c
 80041e2:	5c9b      	ldrb	r3, [r3, r2]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d101      	bne.n	80041ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041e8:	2302      	movs	r3, #2
 80041ea:	e04a      	b.n	8004282 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	223c      	movs	r2, #60	@ 0x3c
 80041f0:	2101      	movs	r1, #1
 80041f2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	223d      	movs	r2, #61	@ 0x3d
 80041f8:	2102      	movs	r1, #2
 80041fa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a1e      	ldr	r2, [pc, #120]	@ (800428c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d108      	bne.n	8004228 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	4a1d      	ldr	r2, [pc, #116]	@ (8004290 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800421a:	4013      	ands	r3, r2
 800421c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	4313      	orrs	r3, r2
 8004226:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2270      	movs	r2, #112	@ 0x70
 800422c:	4393      	bics	r3, r2
 800422e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	4313      	orrs	r3, r2
 8004238:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a11      	ldr	r2, [pc, #68]	@ (800428c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d004      	beq.n	8004256 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a10      	ldr	r2, [pc, #64]	@ (8004294 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d10c      	bne.n	8004270 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	2280      	movs	r2, #128	@ 0x80
 800425a:	4393      	bics	r3, r2
 800425c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	68ba      	ldr	r2, [r7, #8]
 8004264:	4313      	orrs	r3, r2
 8004266:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	223d      	movs	r2, #61	@ 0x3d
 8004274:	2101      	movs	r1, #1
 8004276:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	223c      	movs	r2, #60	@ 0x3c
 800427c:	2100      	movs	r1, #0
 800427e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	0018      	movs	r0, r3
 8004284:	46bd      	mov	sp, r7
 8004286:	b004      	add	sp, #16
 8004288:	bd80      	pop	{r7, pc}
 800428a:	46c0      	nop			@ (mov r8, r8)
 800428c:	40012c00 	.word	0x40012c00
 8004290:	ff0fffff 	.word	0xff0fffff
 8004294:	40000400 	.word	0x40000400

08004298 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042a0:	46c0      	nop			@ (mov r8, r8)
 80042a2:	46bd      	mov	sp, r7
 80042a4:	b002      	add	sp, #8
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042b0:	46c0      	nop			@ (mov r8, r8)
 80042b2:	46bd      	mov	sp, r7
 80042b4:	b002      	add	sp, #8
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80042c0:	46c0      	nop			@ (mov r8, r8)
 80042c2:	46bd      	mov	sp, r7
 80042c4:	b002      	add	sp, #8
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e046      	b.n	8004368 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2288      	movs	r2, #136	@ 0x88
 80042de:	589b      	ldr	r3, [r3, r2]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d107      	bne.n	80042f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2284      	movs	r2, #132	@ 0x84
 80042e8:	2100      	movs	r1, #0
 80042ea:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	0018      	movs	r0, r3
 80042f0:	f7fc fd0a 	bl	8000d08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2288      	movs	r2, #136	@ 0x88
 80042f8:	2124      	movs	r1, #36	@ 0x24
 80042fa:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2101      	movs	r1, #1
 8004308:	438a      	bics	r2, r1
 800430a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004310:	2b00      	cmp	r3, #0
 8004312:	d003      	beq.n	800431c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	0018      	movs	r0, r3
 8004318:	f000 fa3a 	bl	8004790 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	0018      	movs	r0, r3
 8004320:	f000 f8cc 	bl	80044bc <UART_SetConfig>
 8004324:	0003      	movs	r3, r0
 8004326:	2b01      	cmp	r3, #1
 8004328:	d101      	bne.n	800432e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e01c      	b.n	8004368 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	490d      	ldr	r1, [pc, #52]	@ (8004370 <HAL_UART_Init+0xa8>)
 800433a:	400a      	ands	r2, r1
 800433c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	689a      	ldr	r2, [r3, #8]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	212a      	movs	r1, #42	@ 0x2a
 800434a:	438a      	bics	r2, r1
 800434c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2101      	movs	r1, #1
 800435a:	430a      	orrs	r2, r1
 800435c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	0018      	movs	r0, r3
 8004362:	f000 fac9 	bl	80048f8 <UART_CheckIdleState>
 8004366:	0003      	movs	r3, r0
}
 8004368:	0018      	movs	r0, r3
 800436a:	46bd      	mov	sp, r7
 800436c:	b002      	add	sp, #8
 800436e:	bd80      	pop	{r7, pc}
 8004370:	ffffb7ff 	.word	0xffffb7ff

08004374 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b08a      	sub	sp, #40	@ 0x28
 8004378:	af02      	add	r7, sp, #8
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	603b      	str	r3, [r7, #0]
 8004380:	1dbb      	adds	r3, r7, #6
 8004382:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2288      	movs	r2, #136	@ 0x88
 8004388:	589b      	ldr	r3, [r3, r2]
 800438a:	2b20      	cmp	r3, #32
 800438c:	d000      	beq.n	8004390 <HAL_UART_Transmit+0x1c>
 800438e:	e090      	b.n	80044b2 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d003      	beq.n	800439e <HAL_UART_Transmit+0x2a>
 8004396:	1dbb      	adds	r3, r7, #6
 8004398:	881b      	ldrh	r3, [r3, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e088      	b.n	80044b4 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	689a      	ldr	r2, [r3, #8]
 80043a6:	2380      	movs	r3, #128	@ 0x80
 80043a8:	015b      	lsls	r3, r3, #5
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d109      	bne.n	80043c2 <HAL_UART_Transmit+0x4e>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d105      	bne.n	80043c2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	2201      	movs	r2, #1
 80043ba:	4013      	ands	r3, r2
 80043bc:	d001      	beq.n	80043c2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e078      	b.n	80044b4 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2290      	movs	r2, #144	@ 0x90
 80043c6:	2100      	movs	r1, #0
 80043c8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2288      	movs	r2, #136	@ 0x88
 80043ce:	2121      	movs	r1, #33	@ 0x21
 80043d0:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043d2:	f7fc fef9 	bl	80011c8 <HAL_GetTick>
 80043d6:	0003      	movs	r3, r0
 80043d8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	1dba      	adds	r2, r7, #6
 80043de:	2154      	movs	r1, #84	@ 0x54
 80043e0:	8812      	ldrh	r2, [r2, #0]
 80043e2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	1dba      	adds	r2, r7, #6
 80043e8:	2156      	movs	r1, #86	@ 0x56
 80043ea:	8812      	ldrh	r2, [r2, #0]
 80043ec:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	689a      	ldr	r2, [r3, #8]
 80043f2:	2380      	movs	r3, #128	@ 0x80
 80043f4:	015b      	lsls	r3, r3, #5
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d108      	bne.n	800440c <HAL_UART_Transmit+0x98>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d104      	bne.n	800440c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8004402:	2300      	movs	r3, #0
 8004404:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	61bb      	str	r3, [r7, #24]
 800440a:	e003      	b.n	8004414 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004410:	2300      	movs	r3, #0
 8004412:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004414:	e030      	b.n	8004478 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004416:	697a      	ldr	r2, [r7, #20]
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	9300      	str	r3, [sp, #0]
 800441e:	0013      	movs	r3, r2
 8004420:	2200      	movs	r2, #0
 8004422:	2180      	movs	r1, #128	@ 0x80
 8004424:	f000 fb12 	bl	8004a4c <UART_WaitOnFlagUntilTimeout>
 8004428:	1e03      	subs	r3, r0, #0
 800442a:	d005      	beq.n	8004438 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2288      	movs	r2, #136	@ 0x88
 8004430:	2120      	movs	r1, #32
 8004432:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e03d      	b.n	80044b4 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10b      	bne.n	8004456 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	881b      	ldrh	r3, [r3, #0]
 8004442:	001a      	movs	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	05d2      	lsls	r2, r2, #23
 800444a:	0dd2      	lsrs	r2, r2, #23
 800444c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	3302      	adds	r3, #2
 8004452:	61bb      	str	r3, [r7, #24]
 8004454:	e007      	b.n	8004466 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	781a      	ldrb	r2, [r3, #0]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	3301      	adds	r3, #1
 8004464:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2256      	movs	r2, #86	@ 0x56
 800446a:	5a9b      	ldrh	r3, [r3, r2]
 800446c:	b29b      	uxth	r3, r3
 800446e:	3b01      	subs	r3, #1
 8004470:	b299      	uxth	r1, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2256      	movs	r2, #86	@ 0x56
 8004476:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2256      	movs	r2, #86	@ 0x56
 800447c:	5a9b      	ldrh	r3, [r3, r2]
 800447e:	b29b      	uxth	r3, r3
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1c8      	bne.n	8004416 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	68f8      	ldr	r0, [r7, #12]
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	9300      	str	r3, [sp, #0]
 800448c:	0013      	movs	r3, r2
 800448e:	2200      	movs	r2, #0
 8004490:	2140      	movs	r1, #64	@ 0x40
 8004492:	f000 fadb 	bl	8004a4c <UART_WaitOnFlagUntilTimeout>
 8004496:	1e03      	subs	r3, r0, #0
 8004498:	d005      	beq.n	80044a6 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2288      	movs	r2, #136	@ 0x88
 800449e:	2120      	movs	r1, #32
 80044a0:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e006      	b.n	80044b4 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2288      	movs	r2, #136	@ 0x88
 80044aa:	2120      	movs	r1, #32
 80044ac:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80044ae:	2300      	movs	r3, #0
 80044b0:	e000      	b.n	80044b4 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80044b2:	2302      	movs	r3, #2
  }
}
 80044b4:	0018      	movs	r0, r3
 80044b6:	46bd      	mov	sp, r7
 80044b8:	b008      	add	sp, #32
 80044ba:	bd80      	pop	{r7, pc}

080044bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b088      	sub	sp, #32
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044c4:	231a      	movs	r3, #26
 80044c6:	18fb      	adds	r3, r7, r3
 80044c8:	2200      	movs	r2, #0
 80044ca:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689a      	ldr	r2, [r3, #8]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	431a      	orrs	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	431a      	orrs	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	69db      	ldr	r3, [r3, #28]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4aa1      	ldr	r2, [pc, #644]	@ (8004770 <UART_SetConfig+0x2b4>)
 80044ec:	4013      	ands	r3, r2
 80044ee:	0019      	movs	r1, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	69fa      	ldr	r2, [r7, #28]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	4a9c      	ldr	r2, [pc, #624]	@ (8004774 <UART_SetConfig+0x2b8>)
 8004502:	4013      	ands	r3, r2
 8004504:	0019      	movs	r1, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	68da      	ldr	r2, [r3, #12]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	430a      	orrs	r2, r1
 8004510:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	69fa      	ldr	r2, [r7, #28]
 800451e:	4313      	orrs	r3, r2
 8004520:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	4a93      	ldr	r2, [pc, #588]	@ (8004778 <UART_SetConfig+0x2bc>)
 800452a:	4013      	ands	r3, r2
 800452c:	0019      	movs	r1, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	69fa      	ldr	r2, [r7, #28]
 8004534:	430a      	orrs	r2, r1
 8004536:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800453e:	220f      	movs	r2, #15
 8004540:	4393      	bics	r3, r2
 8004542:	0019      	movs	r1, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	430a      	orrs	r2, r1
 800454e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a89      	ldr	r2, [pc, #548]	@ (800477c <UART_SetConfig+0x2c0>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d127      	bne.n	80045aa <UART_SetConfig+0xee>
 800455a:	4b89      	ldr	r3, [pc, #548]	@ (8004780 <UART_SetConfig+0x2c4>)
 800455c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800455e:	2203      	movs	r2, #3
 8004560:	4013      	ands	r3, r2
 8004562:	2b03      	cmp	r3, #3
 8004564:	d017      	beq.n	8004596 <UART_SetConfig+0xda>
 8004566:	d81b      	bhi.n	80045a0 <UART_SetConfig+0xe4>
 8004568:	2b02      	cmp	r3, #2
 800456a:	d00a      	beq.n	8004582 <UART_SetConfig+0xc6>
 800456c:	d818      	bhi.n	80045a0 <UART_SetConfig+0xe4>
 800456e:	2b00      	cmp	r3, #0
 8004570:	d002      	beq.n	8004578 <UART_SetConfig+0xbc>
 8004572:	2b01      	cmp	r3, #1
 8004574:	d00a      	beq.n	800458c <UART_SetConfig+0xd0>
 8004576:	e013      	b.n	80045a0 <UART_SetConfig+0xe4>
 8004578:	231b      	movs	r3, #27
 800457a:	18fb      	adds	r3, r7, r3
 800457c:	2200      	movs	r2, #0
 800457e:	701a      	strb	r2, [r3, #0]
 8004580:	e021      	b.n	80045c6 <UART_SetConfig+0x10a>
 8004582:	231b      	movs	r3, #27
 8004584:	18fb      	adds	r3, r7, r3
 8004586:	2202      	movs	r2, #2
 8004588:	701a      	strb	r2, [r3, #0]
 800458a:	e01c      	b.n	80045c6 <UART_SetConfig+0x10a>
 800458c:	231b      	movs	r3, #27
 800458e:	18fb      	adds	r3, r7, r3
 8004590:	2204      	movs	r2, #4
 8004592:	701a      	strb	r2, [r3, #0]
 8004594:	e017      	b.n	80045c6 <UART_SetConfig+0x10a>
 8004596:	231b      	movs	r3, #27
 8004598:	18fb      	adds	r3, r7, r3
 800459a:	2208      	movs	r2, #8
 800459c:	701a      	strb	r2, [r3, #0]
 800459e:	e012      	b.n	80045c6 <UART_SetConfig+0x10a>
 80045a0:	231b      	movs	r3, #27
 80045a2:	18fb      	adds	r3, r7, r3
 80045a4:	2210      	movs	r2, #16
 80045a6:	701a      	strb	r2, [r3, #0]
 80045a8:	e00d      	b.n	80045c6 <UART_SetConfig+0x10a>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a75      	ldr	r2, [pc, #468]	@ (8004784 <UART_SetConfig+0x2c8>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d104      	bne.n	80045be <UART_SetConfig+0x102>
 80045b4:	231b      	movs	r3, #27
 80045b6:	18fb      	adds	r3, r7, r3
 80045b8:	2200      	movs	r2, #0
 80045ba:	701a      	strb	r2, [r3, #0]
 80045bc:	e003      	b.n	80045c6 <UART_SetConfig+0x10a>
 80045be:	231b      	movs	r3, #27
 80045c0:	18fb      	adds	r3, r7, r3
 80045c2:	2210      	movs	r2, #16
 80045c4:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	69da      	ldr	r2, [r3, #28]
 80045ca:	2380      	movs	r3, #128	@ 0x80
 80045cc:	021b      	lsls	r3, r3, #8
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d000      	beq.n	80045d4 <UART_SetConfig+0x118>
 80045d2:	e065      	b.n	80046a0 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 80045d4:	231b      	movs	r3, #27
 80045d6:	18fb      	adds	r3, r7, r3
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	2b08      	cmp	r3, #8
 80045dc:	d015      	beq.n	800460a <UART_SetConfig+0x14e>
 80045de:	dc18      	bgt.n	8004612 <UART_SetConfig+0x156>
 80045e0:	2b04      	cmp	r3, #4
 80045e2:	d00d      	beq.n	8004600 <UART_SetConfig+0x144>
 80045e4:	dc15      	bgt.n	8004612 <UART_SetConfig+0x156>
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d002      	beq.n	80045f0 <UART_SetConfig+0x134>
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d005      	beq.n	80045fa <UART_SetConfig+0x13e>
 80045ee:	e010      	b.n	8004612 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045f0:	f7fe fca2 	bl	8002f38 <HAL_RCC_GetPCLK1Freq>
 80045f4:	0003      	movs	r3, r0
 80045f6:	617b      	str	r3, [r7, #20]
        break;
 80045f8:	e012      	b.n	8004620 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045fa:	4b63      	ldr	r3, [pc, #396]	@ (8004788 <UART_SetConfig+0x2cc>)
 80045fc:	617b      	str	r3, [r7, #20]
        break;
 80045fe:	e00f      	b.n	8004620 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004600:	f7fe fc0e 	bl	8002e20 <HAL_RCC_GetSysClockFreq>
 8004604:	0003      	movs	r3, r0
 8004606:	617b      	str	r3, [r7, #20]
        break;
 8004608:	e00a      	b.n	8004620 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800460a:	2380      	movs	r3, #128	@ 0x80
 800460c:	021b      	lsls	r3, r3, #8
 800460e:	617b      	str	r3, [r7, #20]
        break;
 8004610:	e006      	b.n	8004620 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8004612:	2300      	movs	r3, #0
 8004614:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004616:	231a      	movs	r3, #26
 8004618:	18fb      	adds	r3, r7, r3
 800461a:	2201      	movs	r2, #1
 800461c:	701a      	strb	r2, [r3, #0]
        break;
 800461e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d100      	bne.n	8004628 <UART_SetConfig+0x16c>
 8004626:	e08d      	b.n	8004744 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800462c:	4b57      	ldr	r3, [pc, #348]	@ (800478c <UART_SetConfig+0x2d0>)
 800462e:	0052      	lsls	r2, r2, #1
 8004630:	5ad3      	ldrh	r3, [r2, r3]
 8004632:	0019      	movs	r1, r3
 8004634:	6978      	ldr	r0, [r7, #20]
 8004636:	f7fb fd6d 	bl	8000114 <__udivsi3>
 800463a:	0003      	movs	r3, r0
 800463c:	005a      	lsls	r2, r3, #1
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	085b      	lsrs	r3, r3, #1
 8004644:	18d2      	adds	r2, r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	0019      	movs	r1, r3
 800464c:	0010      	movs	r0, r2
 800464e:	f7fb fd61 	bl	8000114 <__udivsi3>
 8004652:	0003      	movs	r3, r0
 8004654:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	2b0f      	cmp	r3, #15
 800465a:	d91c      	bls.n	8004696 <UART_SetConfig+0x1da>
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	2380      	movs	r3, #128	@ 0x80
 8004660:	025b      	lsls	r3, r3, #9
 8004662:	429a      	cmp	r2, r3
 8004664:	d217      	bcs.n	8004696 <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	b29a      	uxth	r2, r3
 800466a:	200e      	movs	r0, #14
 800466c:	183b      	adds	r3, r7, r0
 800466e:	210f      	movs	r1, #15
 8004670:	438a      	bics	r2, r1
 8004672:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	085b      	lsrs	r3, r3, #1
 8004678:	b29b      	uxth	r3, r3
 800467a:	2207      	movs	r2, #7
 800467c:	4013      	ands	r3, r2
 800467e:	b299      	uxth	r1, r3
 8004680:	183b      	adds	r3, r7, r0
 8004682:	183a      	adds	r2, r7, r0
 8004684:	8812      	ldrh	r2, [r2, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	183a      	adds	r2, r7, r0
 8004690:	8812      	ldrh	r2, [r2, #0]
 8004692:	60da      	str	r2, [r3, #12]
 8004694:	e056      	b.n	8004744 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8004696:	231a      	movs	r3, #26
 8004698:	18fb      	adds	r3, r7, r3
 800469a:	2201      	movs	r2, #1
 800469c:	701a      	strb	r2, [r3, #0]
 800469e:	e051      	b.n	8004744 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046a0:	231b      	movs	r3, #27
 80046a2:	18fb      	adds	r3, r7, r3
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	2b08      	cmp	r3, #8
 80046a8:	d015      	beq.n	80046d6 <UART_SetConfig+0x21a>
 80046aa:	dc18      	bgt.n	80046de <UART_SetConfig+0x222>
 80046ac:	2b04      	cmp	r3, #4
 80046ae:	d00d      	beq.n	80046cc <UART_SetConfig+0x210>
 80046b0:	dc15      	bgt.n	80046de <UART_SetConfig+0x222>
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d002      	beq.n	80046bc <UART_SetConfig+0x200>
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d005      	beq.n	80046c6 <UART_SetConfig+0x20a>
 80046ba:	e010      	b.n	80046de <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046bc:	f7fe fc3c 	bl	8002f38 <HAL_RCC_GetPCLK1Freq>
 80046c0:	0003      	movs	r3, r0
 80046c2:	617b      	str	r3, [r7, #20]
        break;
 80046c4:	e012      	b.n	80046ec <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046c6:	4b30      	ldr	r3, [pc, #192]	@ (8004788 <UART_SetConfig+0x2cc>)
 80046c8:	617b      	str	r3, [r7, #20]
        break;
 80046ca:	e00f      	b.n	80046ec <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046cc:	f7fe fba8 	bl	8002e20 <HAL_RCC_GetSysClockFreq>
 80046d0:	0003      	movs	r3, r0
 80046d2:	617b      	str	r3, [r7, #20]
        break;
 80046d4:	e00a      	b.n	80046ec <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046d6:	2380      	movs	r3, #128	@ 0x80
 80046d8:	021b      	lsls	r3, r3, #8
 80046da:	617b      	str	r3, [r7, #20]
        break;
 80046dc:	e006      	b.n	80046ec <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 80046de:	2300      	movs	r3, #0
 80046e0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80046e2:	231a      	movs	r3, #26
 80046e4:	18fb      	adds	r3, r7, r3
 80046e6:	2201      	movs	r2, #1
 80046e8:	701a      	strb	r2, [r3, #0]
        break;
 80046ea:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d028      	beq.n	8004744 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80046f6:	4b25      	ldr	r3, [pc, #148]	@ (800478c <UART_SetConfig+0x2d0>)
 80046f8:	0052      	lsls	r2, r2, #1
 80046fa:	5ad3      	ldrh	r3, [r2, r3]
 80046fc:	0019      	movs	r1, r3
 80046fe:	6978      	ldr	r0, [r7, #20]
 8004700:	f7fb fd08 	bl	8000114 <__udivsi3>
 8004704:	0003      	movs	r3, r0
 8004706:	001a      	movs	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	085b      	lsrs	r3, r3, #1
 800470e:	18d2      	adds	r2, r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	0019      	movs	r1, r3
 8004716:	0010      	movs	r0, r2
 8004718:	f7fb fcfc 	bl	8000114 <__udivsi3>
 800471c:	0003      	movs	r3, r0
 800471e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	2b0f      	cmp	r3, #15
 8004724:	d90a      	bls.n	800473c <UART_SetConfig+0x280>
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	2380      	movs	r3, #128	@ 0x80
 800472a:	025b      	lsls	r3, r3, #9
 800472c:	429a      	cmp	r2, r3
 800472e:	d205      	bcs.n	800473c <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	b29a      	uxth	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	60da      	str	r2, [r3, #12]
 800473a:	e003      	b.n	8004744 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 800473c:	231a      	movs	r3, #26
 800473e:	18fb      	adds	r3, r7, r3
 8004740:	2201      	movs	r2, #1
 8004742:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	226a      	movs	r2, #106	@ 0x6a
 8004748:	2101      	movs	r1, #1
 800474a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2268      	movs	r2, #104	@ 0x68
 8004750:	2101      	movs	r1, #1
 8004752:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004760:	231a      	movs	r3, #26
 8004762:	18fb      	adds	r3, r7, r3
 8004764:	781b      	ldrb	r3, [r3, #0]
}
 8004766:	0018      	movs	r0, r3
 8004768:	46bd      	mov	sp, r7
 800476a:	b008      	add	sp, #32
 800476c:	bd80      	pop	{r7, pc}
 800476e:	46c0      	nop			@ (mov r8, r8)
 8004770:	cfff69f3 	.word	0xcfff69f3
 8004774:	ffffcfff 	.word	0xffffcfff
 8004778:	11fff4ff 	.word	0x11fff4ff
 800477c:	40013800 	.word	0x40013800
 8004780:	40021000 	.word	0x40021000
 8004784:	40004400 	.word	0x40004400
 8004788:	00f42400 	.word	0x00f42400
 800478c:	0800585c 	.word	0x0800585c

08004790 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800479c:	2208      	movs	r2, #8
 800479e:	4013      	ands	r3, r2
 80047a0:	d00b      	beq.n	80047ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	4a4a      	ldr	r2, [pc, #296]	@ (80048d4 <UART_AdvFeatureConfig+0x144>)
 80047aa:	4013      	ands	r3, r2
 80047ac:	0019      	movs	r1, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047be:	2201      	movs	r2, #1
 80047c0:	4013      	ands	r3, r2
 80047c2:	d00b      	beq.n	80047dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	4a43      	ldr	r2, [pc, #268]	@ (80048d8 <UART_AdvFeatureConfig+0x148>)
 80047cc:	4013      	ands	r3, r2
 80047ce:	0019      	movs	r1, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	430a      	orrs	r2, r1
 80047da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e0:	2202      	movs	r2, #2
 80047e2:	4013      	ands	r3, r2
 80047e4:	d00b      	beq.n	80047fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	4a3b      	ldr	r2, [pc, #236]	@ (80048dc <UART_AdvFeatureConfig+0x14c>)
 80047ee:	4013      	ands	r3, r2
 80047f0:	0019      	movs	r1, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004802:	2204      	movs	r2, #4
 8004804:	4013      	ands	r3, r2
 8004806:	d00b      	beq.n	8004820 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	4a34      	ldr	r2, [pc, #208]	@ (80048e0 <UART_AdvFeatureConfig+0x150>)
 8004810:	4013      	ands	r3, r2
 8004812:	0019      	movs	r1, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	430a      	orrs	r2, r1
 800481e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004824:	2210      	movs	r2, #16
 8004826:	4013      	ands	r3, r2
 8004828:	d00b      	beq.n	8004842 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	4a2c      	ldr	r2, [pc, #176]	@ (80048e4 <UART_AdvFeatureConfig+0x154>)
 8004832:	4013      	ands	r3, r2
 8004834:	0019      	movs	r1, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	430a      	orrs	r2, r1
 8004840:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004846:	2220      	movs	r2, #32
 8004848:	4013      	ands	r3, r2
 800484a:	d00b      	beq.n	8004864 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	4a25      	ldr	r2, [pc, #148]	@ (80048e8 <UART_AdvFeatureConfig+0x158>)
 8004854:	4013      	ands	r3, r2
 8004856:	0019      	movs	r1, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	430a      	orrs	r2, r1
 8004862:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004868:	2240      	movs	r2, #64	@ 0x40
 800486a:	4013      	ands	r3, r2
 800486c:	d01d      	beq.n	80048aa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	4a1d      	ldr	r2, [pc, #116]	@ (80048ec <UART_AdvFeatureConfig+0x15c>)
 8004876:	4013      	ands	r3, r2
 8004878:	0019      	movs	r1, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	430a      	orrs	r2, r1
 8004884:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800488a:	2380      	movs	r3, #128	@ 0x80
 800488c:	035b      	lsls	r3, r3, #13
 800488e:	429a      	cmp	r2, r3
 8004890:	d10b      	bne.n	80048aa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	4a15      	ldr	r2, [pc, #84]	@ (80048f0 <UART_AdvFeatureConfig+0x160>)
 800489a:	4013      	ands	r3, r2
 800489c:	0019      	movs	r1, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	430a      	orrs	r2, r1
 80048a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ae:	2280      	movs	r2, #128	@ 0x80
 80048b0:	4013      	ands	r3, r2
 80048b2:	d00b      	beq.n	80048cc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	4a0e      	ldr	r2, [pc, #56]	@ (80048f4 <UART_AdvFeatureConfig+0x164>)
 80048bc:	4013      	ands	r3, r2
 80048be:	0019      	movs	r1, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	430a      	orrs	r2, r1
 80048ca:	605a      	str	r2, [r3, #4]
  }
}
 80048cc:	46c0      	nop			@ (mov r8, r8)
 80048ce:	46bd      	mov	sp, r7
 80048d0:	b002      	add	sp, #8
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	ffff7fff 	.word	0xffff7fff
 80048d8:	fffdffff 	.word	0xfffdffff
 80048dc:	fffeffff 	.word	0xfffeffff
 80048e0:	fffbffff 	.word	0xfffbffff
 80048e4:	ffffefff 	.word	0xffffefff
 80048e8:	ffffdfff 	.word	0xffffdfff
 80048ec:	ffefffff 	.word	0xffefffff
 80048f0:	ff9fffff 	.word	0xff9fffff
 80048f4:	fff7ffff 	.word	0xfff7ffff

080048f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b092      	sub	sp, #72	@ 0x48
 80048fc:	af02      	add	r7, sp, #8
 80048fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2290      	movs	r2, #144	@ 0x90
 8004904:	2100      	movs	r1, #0
 8004906:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004908:	f7fc fc5e 	bl	80011c8 <HAL_GetTick>
 800490c:	0003      	movs	r3, r0
 800490e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2208      	movs	r2, #8
 8004918:	4013      	ands	r3, r2
 800491a:	2b08      	cmp	r3, #8
 800491c:	d12d      	bne.n	800497a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800491e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004920:	2280      	movs	r2, #128	@ 0x80
 8004922:	0391      	lsls	r1, r2, #14
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	4a47      	ldr	r2, [pc, #284]	@ (8004a44 <UART_CheckIdleState+0x14c>)
 8004928:	9200      	str	r2, [sp, #0]
 800492a:	2200      	movs	r2, #0
 800492c:	f000 f88e 	bl	8004a4c <UART_WaitOnFlagUntilTimeout>
 8004930:	1e03      	subs	r3, r0, #0
 8004932:	d022      	beq.n	800497a <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004934:	f3ef 8310 	mrs	r3, PRIMASK
 8004938:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800493a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800493c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800493e:	2301      	movs	r3, #1
 8004940:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004944:	f383 8810 	msr	PRIMASK, r3
}
 8004948:	46c0      	nop			@ (mov r8, r8)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2180      	movs	r1, #128	@ 0x80
 8004956:	438a      	bics	r2, r1
 8004958:	601a      	str	r2, [r3, #0]
 800495a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800495c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800495e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004960:	f383 8810 	msr	PRIMASK, r3
}
 8004964:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2288      	movs	r2, #136	@ 0x88
 800496a:	2120      	movs	r1, #32
 800496c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2284      	movs	r2, #132	@ 0x84
 8004972:	2100      	movs	r1, #0
 8004974:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e060      	b.n	8004a3c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2204      	movs	r2, #4
 8004982:	4013      	ands	r3, r2
 8004984:	2b04      	cmp	r3, #4
 8004986:	d146      	bne.n	8004a16 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004988:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800498a:	2280      	movs	r2, #128	@ 0x80
 800498c:	03d1      	lsls	r1, r2, #15
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	4a2c      	ldr	r2, [pc, #176]	@ (8004a44 <UART_CheckIdleState+0x14c>)
 8004992:	9200      	str	r2, [sp, #0]
 8004994:	2200      	movs	r2, #0
 8004996:	f000 f859 	bl	8004a4c <UART_WaitOnFlagUntilTimeout>
 800499a:	1e03      	subs	r3, r0, #0
 800499c:	d03b      	beq.n	8004a16 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800499e:	f3ef 8310 	mrs	r3, PRIMASK
 80049a2:	60fb      	str	r3, [r7, #12]
  return(result);
 80049a4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80049a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80049a8:	2301      	movs	r3, #1
 80049aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	f383 8810 	msr	PRIMASK, r3
}
 80049b2:	46c0      	nop			@ (mov r8, r8)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4922      	ldr	r1, [pc, #136]	@ (8004a48 <UART_CheckIdleState+0x150>)
 80049c0:	400a      	ands	r2, r1
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	f383 8810 	msr	PRIMASK, r3
}
 80049ce:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049d0:	f3ef 8310 	mrs	r3, PRIMASK
 80049d4:	61bb      	str	r3, [r7, #24]
  return(result);
 80049d6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80049da:	2301      	movs	r3, #1
 80049dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	f383 8810 	msr	PRIMASK, r3
}
 80049e4:	46c0      	nop			@ (mov r8, r8)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	689a      	ldr	r2, [r3, #8]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2101      	movs	r1, #1
 80049f2:	438a      	bics	r2, r1
 80049f4:	609a      	str	r2, [r3, #8]
 80049f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049fa:	6a3b      	ldr	r3, [r7, #32]
 80049fc:	f383 8810 	msr	PRIMASK, r3
}
 8004a00:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	228c      	movs	r2, #140	@ 0x8c
 8004a06:	2120      	movs	r1, #32
 8004a08:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2284      	movs	r2, #132	@ 0x84
 8004a0e:	2100      	movs	r1, #0
 8004a10:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e012      	b.n	8004a3c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2288      	movs	r2, #136	@ 0x88
 8004a1a:	2120      	movs	r1, #32
 8004a1c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	228c      	movs	r2, #140	@ 0x8c
 8004a22:	2120      	movs	r1, #32
 8004a24:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2284      	movs	r2, #132	@ 0x84
 8004a36:	2100      	movs	r1, #0
 8004a38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	0018      	movs	r0, r3
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	b010      	add	sp, #64	@ 0x40
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	01ffffff 	.word	0x01ffffff
 8004a48:	fffffedf 	.word	0xfffffedf

08004a4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	603b      	str	r3, [r7, #0]
 8004a58:	1dfb      	adds	r3, r7, #7
 8004a5a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a5c:	e051      	b.n	8004b02 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	3301      	adds	r3, #1
 8004a62:	d04e      	beq.n	8004b02 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a64:	f7fc fbb0 	bl	80011c8 <HAL_GetTick>
 8004a68:	0002      	movs	r2, r0
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	69ba      	ldr	r2, [r7, #24]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d302      	bcc.n	8004a7a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d101      	bne.n	8004a7e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e051      	b.n	8004b22 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2204      	movs	r2, #4
 8004a86:	4013      	ands	r3, r2
 8004a88:	d03b      	beq.n	8004b02 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	2b80      	cmp	r3, #128	@ 0x80
 8004a8e:	d038      	beq.n	8004b02 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	2b40      	cmp	r3, #64	@ 0x40
 8004a94:	d035      	beq.n	8004b02 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	69db      	ldr	r3, [r3, #28]
 8004a9c:	2208      	movs	r2, #8
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	2b08      	cmp	r3, #8
 8004aa2:	d111      	bne.n	8004ac8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2208      	movs	r2, #8
 8004aaa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	0018      	movs	r0, r3
 8004ab0:	f000 f83c 	bl	8004b2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2290      	movs	r2, #144	@ 0x90
 8004ab8:	2108      	movs	r1, #8
 8004aba:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2284      	movs	r2, #132	@ 0x84
 8004ac0:	2100      	movs	r1, #0
 8004ac2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e02c      	b.n	8004b22 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	69da      	ldr	r2, [r3, #28]
 8004ace:	2380      	movs	r3, #128	@ 0x80
 8004ad0:	011b      	lsls	r3, r3, #4
 8004ad2:	401a      	ands	r2, r3
 8004ad4:	2380      	movs	r3, #128	@ 0x80
 8004ad6:	011b      	lsls	r3, r3, #4
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d112      	bne.n	8004b02 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2280      	movs	r2, #128	@ 0x80
 8004ae2:	0112      	lsls	r2, r2, #4
 8004ae4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	0018      	movs	r0, r3
 8004aea:	f000 f81f 	bl	8004b2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2290      	movs	r2, #144	@ 0x90
 8004af2:	2120      	movs	r1, #32
 8004af4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2284      	movs	r2, #132	@ 0x84
 8004afa:	2100      	movs	r1, #0
 8004afc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e00f      	b.n	8004b22 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	69db      	ldr	r3, [r3, #28]
 8004b08:	68ba      	ldr	r2, [r7, #8]
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	425a      	negs	r2, r3
 8004b12:	4153      	adcs	r3, r2
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	001a      	movs	r2, r3
 8004b18:	1dfb      	adds	r3, r7, #7
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d09e      	beq.n	8004a5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	0018      	movs	r0, r3
 8004b24:	46bd      	mov	sp, r7
 8004b26:	b004      	add	sp, #16
 8004b28:	bd80      	pop	{r7, pc}
	...

08004b2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b08e      	sub	sp, #56	@ 0x38
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b34:	f3ef 8310 	mrs	r3, PRIMASK
 8004b38:	617b      	str	r3, [r7, #20]
  return(result);
 8004b3a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004b3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b3e:	2301      	movs	r3, #1
 8004b40:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	f383 8810 	msr	PRIMASK, r3
}
 8004b48:	46c0      	nop			@ (mov r8, r8)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4926      	ldr	r1, [pc, #152]	@ (8004bf0 <UART_EndRxTransfer+0xc4>)
 8004b56:	400a      	ands	r2, r1
 8004b58:	601a      	str	r2, [r3, #0]
 8004b5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b5c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	f383 8810 	msr	PRIMASK, r3
}
 8004b64:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b66:	f3ef 8310 	mrs	r3, PRIMASK
 8004b6a:	623b      	str	r3, [r7, #32]
  return(result);
 8004b6c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004b6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b70:	2301      	movs	r3, #1
 8004b72:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b76:	f383 8810 	msr	PRIMASK, r3
}
 8004b7a:	46c0      	nop			@ (mov r8, r8)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	689a      	ldr	r2, [r3, #8]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	491b      	ldr	r1, [pc, #108]	@ (8004bf4 <UART_EndRxTransfer+0xc8>)
 8004b88:	400a      	ands	r2, r1
 8004b8a:	609a      	str	r2, [r3, #8]
 8004b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b92:	f383 8810 	msr	PRIMASK, r3
}
 8004b96:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d118      	bne.n	8004bd2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ba0:	f3ef 8310 	mrs	r3, PRIMASK
 8004ba4:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ba6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004baa:	2301      	movs	r3, #1
 8004bac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f383 8810 	msr	PRIMASK, r3
}
 8004bb4:	46c0      	nop			@ (mov r8, r8)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2110      	movs	r1, #16
 8004bc2:	438a      	bics	r2, r1
 8004bc4:	601a      	str	r2, [r3, #0]
 8004bc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bc8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	f383 8810 	msr	PRIMASK, r3
}
 8004bd0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	228c      	movs	r2, #140	@ 0x8c
 8004bd6:	2120      	movs	r1, #32
 8004bd8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004be6:	46c0      	nop			@ (mov r8, r8)
 8004be8:	46bd      	mov	sp, r7
 8004bea:	b00e      	add	sp, #56	@ 0x38
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	46c0      	nop			@ (mov r8, r8)
 8004bf0:	fffffedf 	.word	0xfffffedf
 8004bf4:	effffffe 	.word	0xeffffffe

08004bf8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2284      	movs	r2, #132	@ 0x84
 8004c04:	5c9b      	ldrb	r3, [r3, r2]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d101      	bne.n	8004c0e <HAL_UARTEx_DisableFifoMode+0x16>
 8004c0a:	2302      	movs	r3, #2
 8004c0c:	e027      	b.n	8004c5e <HAL_UARTEx_DisableFifoMode+0x66>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2284      	movs	r2, #132	@ 0x84
 8004c12:	2101      	movs	r1, #1
 8004c14:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2288      	movs	r2, #136	@ 0x88
 8004c1a:	2124      	movs	r1, #36	@ 0x24
 8004c1c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2101      	movs	r1, #1
 8004c32:	438a      	bics	r2, r1
 8004c34:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	4a0b      	ldr	r2, [pc, #44]	@ (8004c68 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2288      	movs	r2, #136	@ 0x88
 8004c50:	2120      	movs	r1, #32
 8004c52:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2284      	movs	r2, #132	@ 0x84
 8004c58:	2100      	movs	r1, #0
 8004c5a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	0018      	movs	r0, r3
 8004c60:	46bd      	mov	sp, r7
 8004c62:	b004      	add	sp, #16
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	46c0      	nop			@ (mov r8, r8)
 8004c68:	dfffffff 	.word	0xdfffffff

08004c6c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2284      	movs	r2, #132	@ 0x84
 8004c7a:	5c9b      	ldrb	r3, [r3, r2]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d101      	bne.n	8004c84 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004c80:	2302      	movs	r3, #2
 8004c82:	e02e      	b.n	8004ce2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2284      	movs	r2, #132	@ 0x84
 8004c88:	2101      	movs	r1, #1
 8004c8a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2288      	movs	r2, #136	@ 0x88
 8004c90:	2124      	movs	r1, #36	@ 0x24
 8004c92:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2101      	movs	r1, #1
 8004ca8:	438a      	bics	r2, r1
 8004caa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	00db      	lsls	r3, r3, #3
 8004cb4:	08d9      	lsrs	r1, r3, #3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	683a      	ldr	r2, [r7, #0]
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	0018      	movs	r0, r3
 8004cc4:	f000 f854 	bl	8004d70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2288      	movs	r2, #136	@ 0x88
 8004cd4:	2120      	movs	r1, #32
 8004cd6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2284      	movs	r2, #132	@ 0x84
 8004cdc:	2100      	movs	r1, #0
 8004cde:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	0018      	movs	r0, r3
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	b004      	add	sp, #16
 8004ce8:	bd80      	pop	{r7, pc}
	...

08004cec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2284      	movs	r2, #132	@ 0x84
 8004cfa:	5c9b      	ldrb	r3, [r3, r2]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d101      	bne.n	8004d04 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004d00:	2302      	movs	r3, #2
 8004d02:	e02f      	b.n	8004d64 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2284      	movs	r2, #132	@ 0x84
 8004d08:	2101      	movs	r1, #1
 8004d0a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2288      	movs	r2, #136	@ 0x88
 8004d10:	2124      	movs	r1, #36	@ 0x24
 8004d12:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2101      	movs	r1, #1
 8004d28:	438a      	bics	r2, r1
 8004d2a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	4a0e      	ldr	r2, [pc, #56]	@ (8004d6c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004d34:	4013      	ands	r3, r2
 8004d36:	0019      	movs	r1, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	683a      	ldr	r2, [r7, #0]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	0018      	movs	r0, r3
 8004d46:	f000 f813 	bl	8004d70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2288      	movs	r2, #136	@ 0x88
 8004d56:	2120      	movs	r1, #32
 8004d58:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2284      	movs	r2, #132	@ 0x84
 8004d5e:	2100      	movs	r1, #0
 8004d60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	0018      	movs	r0, r3
 8004d66:	46bd      	mov	sp, r7
 8004d68:	b004      	add	sp, #16
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	f1ffffff 	.word	0xf1ffffff

08004d70 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d108      	bne.n	8004d92 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	226a      	movs	r2, #106	@ 0x6a
 8004d84:	2101      	movs	r1, #1
 8004d86:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2268      	movs	r2, #104	@ 0x68
 8004d8c:	2101      	movs	r1, #1
 8004d8e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004d90:	e043      	b.n	8004e1a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004d92:	260f      	movs	r6, #15
 8004d94:	19bb      	adds	r3, r7, r6
 8004d96:	2208      	movs	r2, #8
 8004d98:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004d9a:	200e      	movs	r0, #14
 8004d9c:	183b      	adds	r3, r7, r0
 8004d9e:	2208      	movs	r2, #8
 8004da0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	0e5b      	lsrs	r3, r3, #25
 8004daa:	b2da      	uxtb	r2, r3
 8004dac:	240d      	movs	r4, #13
 8004dae:	193b      	adds	r3, r7, r4
 8004db0:	2107      	movs	r1, #7
 8004db2:	400a      	ands	r2, r1
 8004db4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	0f5b      	lsrs	r3, r3, #29
 8004dbe:	b2da      	uxtb	r2, r3
 8004dc0:	250c      	movs	r5, #12
 8004dc2:	197b      	adds	r3, r7, r5
 8004dc4:	2107      	movs	r1, #7
 8004dc6:	400a      	ands	r2, r1
 8004dc8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004dca:	183b      	adds	r3, r7, r0
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	197a      	adds	r2, r7, r5
 8004dd0:	7812      	ldrb	r2, [r2, #0]
 8004dd2:	4914      	ldr	r1, [pc, #80]	@ (8004e24 <UARTEx_SetNbDataToProcess+0xb4>)
 8004dd4:	5c8a      	ldrb	r2, [r1, r2]
 8004dd6:	435a      	muls	r2, r3
 8004dd8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004dda:	197b      	adds	r3, r7, r5
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	4a12      	ldr	r2, [pc, #72]	@ (8004e28 <UARTEx_SetNbDataToProcess+0xb8>)
 8004de0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004de2:	0019      	movs	r1, r3
 8004de4:	f7fb fa20 	bl	8000228 <__divsi3>
 8004de8:	0003      	movs	r3, r0
 8004dea:	b299      	uxth	r1, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	226a      	movs	r2, #106	@ 0x6a
 8004df0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004df2:	19bb      	adds	r3, r7, r6
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	193a      	adds	r2, r7, r4
 8004df8:	7812      	ldrb	r2, [r2, #0]
 8004dfa:	490a      	ldr	r1, [pc, #40]	@ (8004e24 <UARTEx_SetNbDataToProcess+0xb4>)
 8004dfc:	5c8a      	ldrb	r2, [r1, r2]
 8004dfe:	435a      	muls	r2, r3
 8004e00:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004e02:	193b      	adds	r3, r7, r4
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	4a08      	ldr	r2, [pc, #32]	@ (8004e28 <UARTEx_SetNbDataToProcess+0xb8>)
 8004e08:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e0a:	0019      	movs	r1, r3
 8004e0c:	f7fb fa0c 	bl	8000228 <__divsi3>
 8004e10:	0003      	movs	r3, r0
 8004e12:	b299      	uxth	r1, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2268      	movs	r2, #104	@ 0x68
 8004e18:	5299      	strh	r1, [r3, r2]
}
 8004e1a:	46c0      	nop			@ (mov r8, r8)
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	b005      	add	sp, #20
 8004e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e22:	46c0      	nop			@ (mov r8, r8)
 8004e24:	08005874 	.word	0x08005874
 8004e28:	0800587c 	.word	0x0800587c

08004e2c <siprintf>:
 8004e2c:	b40e      	push	{r1, r2, r3}
 8004e2e:	b510      	push	{r4, lr}
 8004e30:	2400      	movs	r4, #0
 8004e32:	490c      	ldr	r1, [pc, #48]	@ (8004e64 <siprintf+0x38>)
 8004e34:	b09d      	sub	sp, #116	@ 0x74
 8004e36:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004e38:	9002      	str	r0, [sp, #8]
 8004e3a:	9006      	str	r0, [sp, #24]
 8004e3c:	9107      	str	r1, [sp, #28]
 8004e3e:	9104      	str	r1, [sp, #16]
 8004e40:	4809      	ldr	r0, [pc, #36]	@ (8004e68 <siprintf+0x3c>)
 8004e42:	490a      	ldr	r1, [pc, #40]	@ (8004e6c <siprintf+0x40>)
 8004e44:	cb04      	ldmia	r3!, {r2}
 8004e46:	9105      	str	r1, [sp, #20]
 8004e48:	6800      	ldr	r0, [r0, #0]
 8004e4a:	a902      	add	r1, sp, #8
 8004e4c:	9301      	str	r3, [sp, #4]
 8004e4e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004e50:	f000 f99e 	bl	8005190 <_svfiprintf_r>
 8004e54:	9b02      	ldr	r3, [sp, #8]
 8004e56:	701c      	strb	r4, [r3, #0]
 8004e58:	b01d      	add	sp, #116	@ 0x74
 8004e5a:	bc10      	pop	{r4}
 8004e5c:	bc08      	pop	{r3}
 8004e5e:	b003      	add	sp, #12
 8004e60:	4718      	bx	r3
 8004e62:	46c0      	nop			@ (mov r8, r8)
 8004e64:	7fffffff 	.word	0x7fffffff
 8004e68:	2000000c 	.word	0x2000000c
 8004e6c:	ffff0208 	.word	0xffff0208

08004e70 <memset>:
 8004e70:	0003      	movs	r3, r0
 8004e72:	1882      	adds	r2, r0, r2
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d100      	bne.n	8004e7a <memset+0xa>
 8004e78:	4770      	bx	lr
 8004e7a:	7019      	strb	r1, [r3, #0]
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	e7f9      	b.n	8004e74 <memset+0x4>

08004e80 <__errno>:
 8004e80:	4b01      	ldr	r3, [pc, #4]	@ (8004e88 <__errno+0x8>)
 8004e82:	6818      	ldr	r0, [r3, #0]
 8004e84:	4770      	bx	lr
 8004e86:	46c0      	nop			@ (mov r8, r8)
 8004e88:	2000000c 	.word	0x2000000c

08004e8c <__libc_init_array>:
 8004e8c:	b570      	push	{r4, r5, r6, lr}
 8004e8e:	2600      	movs	r6, #0
 8004e90:	4c0c      	ldr	r4, [pc, #48]	@ (8004ec4 <__libc_init_array+0x38>)
 8004e92:	4d0d      	ldr	r5, [pc, #52]	@ (8004ec8 <__libc_init_array+0x3c>)
 8004e94:	1b64      	subs	r4, r4, r5
 8004e96:	10a4      	asrs	r4, r4, #2
 8004e98:	42a6      	cmp	r6, r4
 8004e9a:	d109      	bne.n	8004eb0 <__libc_init_array+0x24>
 8004e9c:	2600      	movs	r6, #0
 8004e9e:	f000 fc61 	bl	8005764 <_init>
 8004ea2:	4c0a      	ldr	r4, [pc, #40]	@ (8004ecc <__libc_init_array+0x40>)
 8004ea4:	4d0a      	ldr	r5, [pc, #40]	@ (8004ed0 <__libc_init_array+0x44>)
 8004ea6:	1b64      	subs	r4, r4, r5
 8004ea8:	10a4      	asrs	r4, r4, #2
 8004eaa:	42a6      	cmp	r6, r4
 8004eac:	d105      	bne.n	8004eba <__libc_init_array+0x2e>
 8004eae:	bd70      	pop	{r4, r5, r6, pc}
 8004eb0:	00b3      	lsls	r3, r6, #2
 8004eb2:	58eb      	ldr	r3, [r5, r3]
 8004eb4:	4798      	blx	r3
 8004eb6:	3601      	adds	r6, #1
 8004eb8:	e7ee      	b.n	8004e98 <__libc_init_array+0xc>
 8004eba:	00b3      	lsls	r3, r6, #2
 8004ebc:	58eb      	ldr	r3, [r5, r3]
 8004ebe:	4798      	blx	r3
 8004ec0:	3601      	adds	r6, #1
 8004ec2:	e7f2      	b.n	8004eaa <__libc_init_array+0x1e>
 8004ec4:	080058b8 	.word	0x080058b8
 8004ec8:	080058b8 	.word	0x080058b8
 8004ecc:	080058bc 	.word	0x080058bc
 8004ed0:	080058b8 	.word	0x080058b8

08004ed4 <__retarget_lock_acquire_recursive>:
 8004ed4:	4770      	bx	lr

08004ed6 <__retarget_lock_release_recursive>:
 8004ed6:	4770      	bx	lr

08004ed8 <_free_r>:
 8004ed8:	b570      	push	{r4, r5, r6, lr}
 8004eda:	0005      	movs	r5, r0
 8004edc:	1e0c      	subs	r4, r1, #0
 8004ede:	d010      	beq.n	8004f02 <_free_r+0x2a>
 8004ee0:	3c04      	subs	r4, #4
 8004ee2:	6823      	ldr	r3, [r4, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	da00      	bge.n	8004eea <_free_r+0x12>
 8004ee8:	18e4      	adds	r4, r4, r3
 8004eea:	0028      	movs	r0, r5
 8004eec:	f000 f8e0 	bl	80050b0 <__malloc_lock>
 8004ef0:	4a1d      	ldr	r2, [pc, #116]	@ (8004f68 <_free_r+0x90>)
 8004ef2:	6813      	ldr	r3, [r2, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d105      	bne.n	8004f04 <_free_r+0x2c>
 8004ef8:	6063      	str	r3, [r4, #4]
 8004efa:	6014      	str	r4, [r2, #0]
 8004efc:	0028      	movs	r0, r5
 8004efe:	f000 f8df 	bl	80050c0 <__malloc_unlock>
 8004f02:	bd70      	pop	{r4, r5, r6, pc}
 8004f04:	42a3      	cmp	r3, r4
 8004f06:	d908      	bls.n	8004f1a <_free_r+0x42>
 8004f08:	6820      	ldr	r0, [r4, #0]
 8004f0a:	1821      	adds	r1, r4, r0
 8004f0c:	428b      	cmp	r3, r1
 8004f0e:	d1f3      	bne.n	8004ef8 <_free_r+0x20>
 8004f10:	6819      	ldr	r1, [r3, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	1809      	adds	r1, r1, r0
 8004f16:	6021      	str	r1, [r4, #0]
 8004f18:	e7ee      	b.n	8004ef8 <_free_r+0x20>
 8004f1a:	001a      	movs	r2, r3
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d001      	beq.n	8004f26 <_free_r+0x4e>
 8004f22:	42a3      	cmp	r3, r4
 8004f24:	d9f9      	bls.n	8004f1a <_free_r+0x42>
 8004f26:	6811      	ldr	r1, [r2, #0]
 8004f28:	1850      	adds	r0, r2, r1
 8004f2a:	42a0      	cmp	r0, r4
 8004f2c:	d10b      	bne.n	8004f46 <_free_r+0x6e>
 8004f2e:	6820      	ldr	r0, [r4, #0]
 8004f30:	1809      	adds	r1, r1, r0
 8004f32:	1850      	adds	r0, r2, r1
 8004f34:	6011      	str	r1, [r2, #0]
 8004f36:	4283      	cmp	r3, r0
 8004f38:	d1e0      	bne.n	8004efc <_free_r+0x24>
 8004f3a:	6818      	ldr	r0, [r3, #0]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	1841      	adds	r1, r0, r1
 8004f40:	6011      	str	r1, [r2, #0]
 8004f42:	6053      	str	r3, [r2, #4]
 8004f44:	e7da      	b.n	8004efc <_free_r+0x24>
 8004f46:	42a0      	cmp	r0, r4
 8004f48:	d902      	bls.n	8004f50 <_free_r+0x78>
 8004f4a:	230c      	movs	r3, #12
 8004f4c:	602b      	str	r3, [r5, #0]
 8004f4e:	e7d5      	b.n	8004efc <_free_r+0x24>
 8004f50:	6820      	ldr	r0, [r4, #0]
 8004f52:	1821      	adds	r1, r4, r0
 8004f54:	428b      	cmp	r3, r1
 8004f56:	d103      	bne.n	8004f60 <_free_r+0x88>
 8004f58:	6819      	ldr	r1, [r3, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	1809      	adds	r1, r1, r0
 8004f5e:	6021      	str	r1, [r4, #0]
 8004f60:	6063      	str	r3, [r4, #4]
 8004f62:	6054      	str	r4, [r2, #4]
 8004f64:	e7ca      	b.n	8004efc <_free_r+0x24>
 8004f66:	46c0      	nop			@ (mov r8, r8)
 8004f68:	200003ac 	.word	0x200003ac

08004f6c <sbrk_aligned>:
 8004f6c:	b570      	push	{r4, r5, r6, lr}
 8004f6e:	4e0f      	ldr	r6, [pc, #60]	@ (8004fac <sbrk_aligned+0x40>)
 8004f70:	000d      	movs	r5, r1
 8004f72:	6831      	ldr	r1, [r6, #0]
 8004f74:	0004      	movs	r4, r0
 8004f76:	2900      	cmp	r1, #0
 8004f78:	d102      	bne.n	8004f80 <sbrk_aligned+0x14>
 8004f7a:	f000 fb95 	bl	80056a8 <_sbrk_r>
 8004f7e:	6030      	str	r0, [r6, #0]
 8004f80:	0029      	movs	r1, r5
 8004f82:	0020      	movs	r0, r4
 8004f84:	f000 fb90 	bl	80056a8 <_sbrk_r>
 8004f88:	1c43      	adds	r3, r0, #1
 8004f8a:	d103      	bne.n	8004f94 <sbrk_aligned+0x28>
 8004f8c:	2501      	movs	r5, #1
 8004f8e:	426d      	negs	r5, r5
 8004f90:	0028      	movs	r0, r5
 8004f92:	bd70      	pop	{r4, r5, r6, pc}
 8004f94:	2303      	movs	r3, #3
 8004f96:	1cc5      	adds	r5, r0, #3
 8004f98:	439d      	bics	r5, r3
 8004f9a:	42a8      	cmp	r0, r5
 8004f9c:	d0f8      	beq.n	8004f90 <sbrk_aligned+0x24>
 8004f9e:	1a29      	subs	r1, r5, r0
 8004fa0:	0020      	movs	r0, r4
 8004fa2:	f000 fb81 	bl	80056a8 <_sbrk_r>
 8004fa6:	3001      	adds	r0, #1
 8004fa8:	d1f2      	bne.n	8004f90 <sbrk_aligned+0x24>
 8004faa:	e7ef      	b.n	8004f8c <sbrk_aligned+0x20>
 8004fac:	200003a8 	.word	0x200003a8

08004fb0 <_malloc_r>:
 8004fb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fb2:	2203      	movs	r2, #3
 8004fb4:	1ccb      	adds	r3, r1, #3
 8004fb6:	4393      	bics	r3, r2
 8004fb8:	3308      	adds	r3, #8
 8004fba:	0005      	movs	r5, r0
 8004fbc:	001f      	movs	r7, r3
 8004fbe:	2b0c      	cmp	r3, #12
 8004fc0:	d234      	bcs.n	800502c <_malloc_r+0x7c>
 8004fc2:	270c      	movs	r7, #12
 8004fc4:	42b9      	cmp	r1, r7
 8004fc6:	d833      	bhi.n	8005030 <_malloc_r+0x80>
 8004fc8:	0028      	movs	r0, r5
 8004fca:	f000 f871 	bl	80050b0 <__malloc_lock>
 8004fce:	4e37      	ldr	r6, [pc, #220]	@ (80050ac <_malloc_r+0xfc>)
 8004fd0:	6833      	ldr	r3, [r6, #0]
 8004fd2:	001c      	movs	r4, r3
 8004fd4:	2c00      	cmp	r4, #0
 8004fd6:	d12f      	bne.n	8005038 <_malloc_r+0x88>
 8004fd8:	0039      	movs	r1, r7
 8004fda:	0028      	movs	r0, r5
 8004fdc:	f7ff ffc6 	bl	8004f6c <sbrk_aligned>
 8004fe0:	0004      	movs	r4, r0
 8004fe2:	1c43      	adds	r3, r0, #1
 8004fe4:	d15f      	bne.n	80050a6 <_malloc_r+0xf6>
 8004fe6:	6834      	ldr	r4, [r6, #0]
 8004fe8:	9400      	str	r4, [sp, #0]
 8004fea:	9b00      	ldr	r3, [sp, #0]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d14a      	bne.n	8005086 <_malloc_r+0xd6>
 8004ff0:	2c00      	cmp	r4, #0
 8004ff2:	d052      	beq.n	800509a <_malloc_r+0xea>
 8004ff4:	6823      	ldr	r3, [r4, #0]
 8004ff6:	0028      	movs	r0, r5
 8004ff8:	18e3      	adds	r3, r4, r3
 8004ffa:	9900      	ldr	r1, [sp, #0]
 8004ffc:	9301      	str	r3, [sp, #4]
 8004ffe:	f000 fb53 	bl	80056a8 <_sbrk_r>
 8005002:	9b01      	ldr	r3, [sp, #4]
 8005004:	4283      	cmp	r3, r0
 8005006:	d148      	bne.n	800509a <_malloc_r+0xea>
 8005008:	6823      	ldr	r3, [r4, #0]
 800500a:	0028      	movs	r0, r5
 800500c:	1aff      	subs	r7, r7, r3
 800500e:	0039      	movs	r1, r7
 8005010:	f7ff ffac 	bl	8004f6c <sbrk_aligned>
 8005014:	3001      	adds	r0, #1
 8005016:	d040      	beq.n	800509a <_malloc_r+0xea>
 8005018:	6823      	ldr	r3, [r4, #0]
 800501a:	19db      	adds	r3, r3, r7
 800501c:	6023      	str	r3, [r4, #0]
 800501e:	6833      	ldr	r3, [r6, #0]
 8005020:	685a      	ldr	r2, [r3, #4]
 8005022:	2a00      	cmp	r2, #0
 8005024:	d133      	bne.n	800508e <_malloc_r+0xde>
 8005026:	9b00      	ldr	r3, [sp, #0]
 8005028:	6033      	str	r3, [r6, #0]
 800502a:	e019      	b.n	8005060 <_malloc_r+0xb0>
 800502c:	2b00      	cmp	r3, #0
 800502e:	dac9      	bge.n	8004fc4 <_malloc_r+0x14>
 8005030:	230c      	movs	r3, #12
 8005032:	602b      	str	r3, [r5, #0]
 8005034:	2000      	movs	r0, #0
 8005036:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005038:	6821      	ldr	r1, [r4, #0]
 800503a:	1bc9      	subs	r1, r1, r7
 800503c:	d420      	bmi.n	8005080 <_malloc_r+0xd0>
 800503e:	290b      	cmp	r1, #11
 8005040:	d90a      	bls.n	8005058 <_malloc_r+0xa8>
 8005042:	19e2      	adds	r2, r4, r7
 8005044:	6027      	str	r7, [r4, #0]
 8005046:	42a3      	cmp	r3, r4
 8005048:	d104      	bne.n	8005054 <_malloc_r+0xa4>
 800504a:	6032      	str	r2, [r6, #0]
 800504c:	6863      	ldr	r3, [r4, #4]
 800504e:	6011      	str	r1, [r2, #0]
 8005050:	6053      	str	r3, [r2, #4]
 8005052:	e005      	b.n	8005060 <_malloc_r+0xb0>
 8005054:	605a      	str	r2, [r3, #4]
 8005056:	e7f9      	b.n	800504c <_malloc_r+0x9c>
 8005058:	6862      	ldr	r2, [r4, #4]
 800505a:	42a3      	cmp	r3, r4
 800505c:	d10e      	bne.n	800507c <_malloc_r+0xcc>
 800505e:	6032      	str	r2, [r6, #0]
 8005060:	0028      	movs	r0, r5
 8005062:	f000 f82d 	bl	80050c0 <__malloc_unlock>
 8005066:	0020      	movs	r0, r4
 8005068:	2207      	movs	r2, #7
 800506a:	300b      	adds	r0, #11
 800506c:	1d23      	adds	r3, r4, #4
 800506e:	4390      	bics	r0, r2
 8005070:	1ac2      	subs	r2, r0, r3
 8005072:	4298      	cmp	r0, r3
 8005074:	d0df      	beq.n	8005036 <_malloc_r+0x86>
 8005076:	1a1b      	subs	r3, r3, r0
 8005078:	50a3      	str	r3, [r4, r2]
 800507a:	e7dc      	b.n	8005036 <_malloc_r+0x86>
 800507c:	605a      	str	r2, [r3, #4]
 800507e:	e7ef      	b.n	8005060 <_malloc_r+0xb0>
 8005080:	0023      	movs	r3, r4
 8005082:	6864      	ldr	r4, [r4, #4]
 8005084:	e7a6      	b.n	8004fd4 <_malloc_r+0x24>
 8005086:	9c00      	ldr	r4, [sp, #0]
 8005088:	6863      	ldr	r3, [r4, #4]
 800508a:	9300      	str	r3, [sp, #0]
 800508c:	e7ad      	b.n	8004fea <_malloc_r+0x3a>
 800508e:	001a      	movs	r2, r3
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	42a3      	cmp	r3, r4
 8005094:	d1fb      	bne.n	800508e <_malloc_r+0xde>
 8005096:	2300      	movs	r3, #0
 8005098:	e7da      	b.n	8005050 <_malloc_r+0xa0>
 800509a:	230c      	movs	r3, #12
 800509c:	0028      	movs	r0, r5
 800509e:	602b      	str	r3, [r5, #0]
 80050a0:	f000 f80e 	bl	80050c0 <__malloc_unlock>
 80050a4:	e7c6      	b.n	8005034 <_malloc_r+0x84>
 80050a6:	6007      	str	r7, [r0, #0]
 80050a8:	e7da      	b.n	8005060 <_malloc_r+0xb0>
 80050aa:	46c0      	nop			@ (mov r8, r8)
 80050ac:	200003ac 	.word	0x200003ac

080050b0 <__malloc_lock>:
 80050b0:	b510      	push	{r4, lr}
 80050b2:	4802      	ldr	r0, [pc, #8]	@ (80050bc <__malloc_lock+0xc>)
 80050b4:	f7ff ff0e 	bl	8004ed4 <__retarget_lock_acquire_recursive>
 80050b8:	bd10      	pop	{r4, pc}
 80050ba:	46c0      	nop			@ (mov r8, r8)
 80050bc:	200003a4 	.word	0x200003a4

080050c0 <__malloc_unlock>:
 80050c0:	b510      	push	{r4, lr}
 80050c2:	4802      	ldr	r0, [pc, #8]	@ (80050cc <__malloc_unlock+0xc>)
 80050c4:	f7ff ff07 	bl	8004ed6 <__retarget_lock_release_recursive>
 80050c8:	bd10      	pop	{r4, pc}
 80050ca:	46c0      	nop			@ (mov r8, r8)
 80050cc:	200003a4 	.word	0x200003a4

080050d0 <__ssputs_r>:
 80050d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050d2:	688e      	ldr	r6, [r1, #8]
 80050d4:	b085      	sub	sp, #20
 80050d6:	001f      	movs	r7, r3
 80050d8:	000c      	movs	r4, r1
 80050da:	680b      	ldr	r3, [r1, #0]
 80050dc:	9002      	str	r0, [sp, #8]
 80050de:	9203      	str	r2, [sp, #12]
 80050e0:	42be      	cmp	r6, r7
 80050e2:	d830      	bhi.n	8005146 <__ssputs_r+0x76>
 80050e4:	210c      	movs	r1, #12
 80050e6:	5e62      	ldrsh	r2, [r4, r1]
 80050e8:	2190      	movs	r1, #144	@ 0x90
 80050ea:	00c9      	lsls	r1, r1, #3
 80050ec:	420a      	tst	r2, r1
 80050ee:	d028      	beq.n	8005142 <__ssputs_r+0x72>
 80050f0:	2003      	movs	r0, #3
 80050f2:	6921      	ldr	r1, [r4, #16]
 80050f4:	1a5b      	subs	r3, r3, r1
 80050f6:	9301      	str	r3, [sp, #4]
 80050f8:	6963      	ldr	r3, [r4, #20]
 80050fa:	4343      	muls	r3, r0
 80050fc:	9801      	ldr	r0, [sp, #4]
 80050fe:	0fdd      	lsrs	r5, r3, #31
 8005100:	18ed      	adds	r5, r5, r3
 8005102:	1c7b      	adds	r3, r7, #1
 8005104:	181b      	adds	r3, r3, r0
 8005106:	106d      	asrs	r5, r5, #1
 8005108:	42ab      	cmp	r3, r5
 800510a:	d900      	bls.n	800510e <__ssputs_r+0x3e>
 800510c:	001d      	movs	r5, r3
 800510e:	0552      	lsls	r2, r2, #21
 8005110:	d528      	bpl.n	8005164 <__ssputs_r+0x94>
 8005112:	0029      	movs	r1, r5
 8005114:	9802      	ldr	r0, [sp, #8]
 8005116:	f7ff ff4b 	bl	8004fb0 <_malloc_r>
 800511a:	1e06      	subs	r6, r0, #0
 800511c:	d02c      	beq.n	8005178 <__ssputs_r+0xa8>
 800511e:	9a01      	ldr	r2, [sp, #4]
 8005120:	6921      	ldr	r1, [r4, #16]
 8005122:	f000 fade 	bl	80056e2 <memcpy>
 8005126:	89a2      	ldrh	r2, [r4, #12]
 8005128:	4b18      	ldr	r3, [pc, #96]	@ (800518c <__ssputs_r+0xbc>)
 800512a:	401a      	ands	r2, r3
 800512c:	2380      	movs	r3, #128	@ 0x80
 800512e:	4313      	orrs	r3, r2
 8005130:	81a3      	strh	r3, [r4, #12]
 8005132:	9b01      	ldr	r3, [sp, #4]
 8005134:	6126      	str	r6, [r4, #16]
 8005136:	18f6      	adds	r6, r6, r3
 8005138:	6026      	str	r6, [r4, #0]
 800513a:	003e      	movs	r6, r7
 800513c:	6165      	str	r5, [r4, #20]
 800513e:	1aed      	subs	r5, r5, r3
 8005140:	60a5      	str	r5, [r4, #8]
 8005142:	42be      	cmp	r6, r7
 8005144:	d900      	bls.n	8005148 <__ssputs_r+0x78>
 8005146:	003e      	movs	r6, r7
 8005148:	0032      	movs	r2, r6
 800514a:	9903      	ldr	r1, [sp, #12]
 800514c:	6820      	ldr	r0, [r4, #0]
 800514e:	f000 fa99 	bl	8005684 <memmove>
 8005152:	2000      	movs	r0, #0
 8005154:	68a3      	ldr	r3, [r4, #8]
 8005156:	1b9b      	subs	r3, r3, r6
 8005158:	60a3      	str	r3, [r4, #8]
 800515a:	6823      	ldr	r3, [r4, #0]
 800515c:	199b      	adds	r3, r3, r6
 800515e:	6023      	str	r3, [r4, #0]
 8005160:	b005      	add	sp, #20
 8005162:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005164:	002a      	movs	r2, r5
 8005166:	9802      	ldr	r0, [sp, #8]
 8005168:	f000 fac4 	bl	80056f4 <_realloc_r>
 800516c:	1e06      	subs	r6, r0, #0
 800516e:	d1e0      	bne.n	8005132 <__ssputs_r+0x62>
 8005170:	6921      	ldr	r1, [r4, #16]
 8005172:	9802      	ldr	r0, [sp, #8]
 8005174:	f7ff feb0 	bl	8004ed8 <_free_r>
 8005178:	230c      	movs	r3, #12
 800517a:	2001      	movs	r0, #1
 800517c:	9a02      	ldr	r2, [sp, #8]
 800517e:	4240      	negs	r0, r0
 8005180:	6013      	str	r3, [r2, #0]
 8005182:	89a2      	ldrh	r2, [r4, #12]
 8005184:	3334      	adds	r3, #52	@ 0x34
 8005186:	4313      	orrs	r3, r2
 8005188:	81a3      	strh	r3, [r4, #12]
 800518a:	e7e9      	b.n	8005160 <__ssputs_r+0x90>
 800518c:	fffffb7f 	.word	0xfffffb7f

08005190 <_svfiprintf_r>:
 8005190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005192:	b0a1      	sub	sp, #132	@ 0x84
 8005194:	9003      	str	r0, [sp, #12]
 8005196:	001d      	movs	r5, r3
 8005198:	898b      	ldrh	r3, [r1, #12]
 800519a:	000f      	movs	r7, r1
 800519c:	0016      	movs	r6, r2
 800519e:	061b      	lsls	r3, r3, #24
 80051a0:	d511      	bpl.n	80051c6 <_svfiprintf_r+0x36>
 80051a2:	690b      	ldr	r3, [r1, #16]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d10e      	bne.n	80051c6 <_svfiprintf_r+0x36>
 80051a8:	2140      	movs	r1, #64	@ 0x40
 80051aa:	f7ff ff01 	bl	8004fb0 <_malloc_r>
 80051ae:	6038      	str	r0, [r7, #0]
 80051b0:	6138      	str	r0, [r7, #16]
 80051b2:	2800      	cmp	r0, #0
 80051b4:	d105      	bne.n	80051c2 <_svfiprintf_r+0x32>
 80051b6:	230c      	movs	r3, #12
 80051b8:	9a03      	ldr	r2, [sp, #12]
 80051ba:	6013      	str	r3, [r2, #0]
 80051bc:	2001      	movs	r0, #1
 80051be:	4240      	negs	r0, r0
 80051c0:	e0cf      	b.n	8005362 <_svfiprintf_r+0x1d2>
 80051c2:	2340      	movs	r3, #64	@ 0x40
 80051c4:	617b      	str	r3, [r7, #20]
 80051c6:	2300      	movs	r3, #0
 80051c8:	ac08      	add	r4, sp, #32
 80051ca:	6163      	str	r3, [r4, #20]
 80051cc:	3320      	adds	r3, #32
 80051ce:	7663      	strb	r3, [r4, #25]
 80051d0:	3310      	adds	r3, #16
 80051d2:	76a3      	strb	r3, [r4, #26]
 80051d4:	9507      	str	r5, [sp, #28]
 80051d6:	0035      	movs	r5, r6
 80051d8:	782b      	ldrb	r3, [r5, #0]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d001      	beq.n	80051e2 <_svfiprintf_r+0x52>
 80051de:	2b25      	cmp	r3, #37	@ 0x25
 80051e0:	d148      	bne.n	8005274 <_svfiprintf_r+0xe4>
 80051e2:	1bab      	subs	r3, r5, r6
 80051e4:	9305      	str	r3, [sp, #20]
 80051e6:	42b5      	cmp	r5, r6
 80051e8:	d00b      	beq.n	8005202 <_svfiprintf_r+0x72>
 80051ea:	0032      	movs	r2, r6
 80051ec:	0039      	movs	r1, r7
 80051ee:	9803      	ldr	r0, [sp, #12]
 80051f0:	f7ff ff6e 	bl	80050d0 <__ssputs_r>
 80051f4:	3001      	adds	r0, #1
 80051f6:	d100      	bne.n	80051fa <_svfiprintf_r+0x6a>
 80051f8:	e0ae      	b.n	8005358 <_svfiprintf_r+0x1c8>
 80051fa:	6963      	ldr	r3, [r4, #20]
 80051fc:	9a05      	ldr	r2, [sp, #20]
 80051fe:	189b      	adds	r3, r3, r2
 8005200:	6163      	str	r3, [r4, #20]
 8005202:	782b      	ldrb	r3, [r5, #0]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d100      	bne.n	800520a <_svfiprintf_r+0x7a>
 8005208:	e0a6      	b.n	8005358 <_svfiprintf_r+0x1c8>
 800520a:	2201      	movs	r2, #1
 800520c:	2300      	movs	r3, #0
 800520e:	4252      	negs	r2, r2
 8005210:	6062      	str	r2, [r4, #4]
 8005212:	a904      	add	r1, sp, #16
 8005214:	3254      	adds	r2, #84	@ 0x54
 8005216:	1852      	adds	r2, r2, r1
 8005218:	1c6e      	adds	r6, r5, #1
 800521a:	6023      	str	r3, [r4, #0]
 800521c:	60e3      	str	r3, [r4, #12]
 800521e:	60a3      	str	r3, [r4, #8]
 8005220:	7013      	strb	r3, [r2, #0]
 8005222:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005224:	4b54      	ldr	r3, [pc, #336]	@ (8005378 <_svfiprintf_r+0x1e8>)
 8005226:	2205      	movs	r2, #5
 8005228:	0018      	movs	r0, r3
 800522a:	7831      	ldrb	r1, [r6, #0]
 800522c:	9305      	str	r3, [sp, #20]
 800522e:	f000 fa4d 	bl	80056cc <memchr>
 8005232:	1c75      	adds	r5, r6, #1
 8005234:	2800      	cmp	r0, #0
 8005236:	d11f      	bne.n	8005278 <_svfiprintf_r+0xe8>
 8005238:	6822      	ldr	r2, [r4, #0]
 800523a:	06d3      	lsls	r3, r2, #27
 800523c:	d504      	bpl.n	8005248 <_svfiprintf_r+0xb8>
 800523e:	2353      	movs	r3, #83	@ 0x53
 8005240:	a904      	add	r1, sp, #16
 8005242:	185b      	adds	r3, r3, r1
 8005244:	2120      	movs	r1, #32
 8005246:	7019      	strb	r1, [r3, #0]
 8005248:	0713      	lsls	r3, r2, #28
 800524a:	d504      	bpl.n	8005256 <_svfiprintf_r+0xc6>
 800524c:	2353      	movs	r3, #83	@ 0x53
 800524e:	a904      	add	r1, sp, #16
 8005250:	185b      	adds	r3, r3, r1
 8005252:	212b      	movs	r1, #43	@ 0x2b
 8005254:	7019      	strb	r1, [r3, #0]
 8005256:	7833      	ldrb	r3, [r6, #0]
 8005258:	2b2a      	cmp	r3, #42	@ 0x2a
 800525a:	d016      	beq.n	800528a <_svfiprintf_r+0xfa>
 800525c:	0035      	movs	r5, r6
 800525e:	2100      	movs	r1, #0
 8005260:	200a      	movs	r0, #10
 8005262:	68e3      	ldr	r3, [r4, #12]
 8005264:	782a      	ldrb	r2, [r5, #0]
 8005266:	1c6e      	adds	r6, r5, #1
 8005268:	3a30      	subs	r2, #48	@ 0x30
 800526a:	2a09      	cmp	r2, #9
 800526c:	d950      	bls.n	8005310 <_svfiprintf_r+0x180>
 800526e:	2900      	cmp	r1, #0
 8005270:	d111      	bne.n	8005296 <_svfiprintf_r+0x106>
 8005272:	e017      	b.n	80052a4 <_svfiprintf_r+0x114>
 8005274:	3501      	adds	r5, #1
 8005276:	e7af      	b.n	80051d8 <_svfiprintf_r+0x48>
 8005278:	9b05      	ldr	r3, [sp, #20]
 800527a:	6822      	ldr	r2, [r4, #0]
 800527c:	1ac0      	subs	r0, r0, r3
 800527e:	2301      	movs	r3, #1
 8005280:	4083      	lsls	r3, r0
 8005282:	4313      	orrs	r3, r2
 8005284:	002e      	movs	r6, r5
 8005286:	6023      	str	r3, [r4, #0]
 8005288:	e7cc      	b.n	8005224 <_svfiprintf_r+0x94>
 800528a:	9b07      	ldr	r3, [sp, #28]
 800528c:	1d19      	adds	r1, r3, #4
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	9107      	str	r1, [sp, #28]
 8005292:	2b00      	cmp	r3, #0
 8005294:	db01      	blt.n	800529a <_svfiprintf_r+0x10a>
 8005296:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005298:	e004      	b.n	80052a4 <_svfiprintf_r+0x114>
 800529a:	425b      	negs	r3, r3
 800529c:	60e3      	str	r3, [r4, #12]
 800529e:	2302      	movs	r3, #2
 80052a0:	4313      	orrs	r3, r2
 80052a2:	6023      	str	r3, [r4, #0]
 80052a4:	782b      	ldrb	r3, [r5, #0]
 80052a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80052a8:	d10c      	bne.n	80052c4 <_svfiprintf_r+0x134>
 80052aa:	786b      	ldrb	r3, [r5, #1]
 80052ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80052ae:	d134      	bne.n	800531a <_svfiprintf_r+0x18a>
 80052b0:	9b07      	ldr	r3, [sp, #28]
 80052b2:	3502      	adds	r5, #2
 80052b4:	1d1a      	adds	r2, r3, #4
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	9207      	str	r2, [sp, #28]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	da01      	bge.n	80052c2 <_svfiprintf_r+0x132>
 80052be:	2301      	movs	r3, #1
 80052c0:	425b      	negs	r3, r3
 80052c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80052c4:	4e2d      	ldr	r6, [pc, #180]	@ (800537c <_svfiprintf_r+0x1ec>)
 80052c6:	2203      	movs	r2, #3
 80052c8:	0030      	movs	r0, r6
 80052ca:	7829      	ldrb	r1, [r5, #0]
 80052cc:	f000 f9fe 	bl	80056cc <memchr>
 80052d0:	2800      	cmp	r0, #0
 80052d2:	d006      	beq.n	80052e2 <_svfiprintf_r+0x152>
 80052d4:	2340      	movs	r3, #64	@ 0x40
 80052d6:	1b80      	subs	r0, r0, r6
 80052d8:	4083      	lsls	r3, r0
 80052da:	6822      	ldr	r2, [r4, #0]
 80052dc:	3501      	adds	r5, #1
 80052de:	4313      	orrs	r3, r2
 80052e0:	6023      	str	r3, [r4, #0]
 80052e2:	7829      	ldrb	r1, [r5, #0]
 80052e4:	2206      	movs	r2, #6
 80052e6:	4826      	ldr	r0, [pc, #152]	@ (8005380 <_svfiprintf_r+0x1f0>)
 80052e8:	1c6e      	adds	r6, r5, #1
 80052ea:	7621      	strb	r1, [r4, #24]
 80052ec:	f000 f9ee 	bl	80056cc <memchr>
 80052f0:	2800      	cmp	r0, #0
 80052f2:	d038      	beq.n	8005366 <_svfiprintf_r+0x1d6>
 80052f4:	4b23      	ldr	r3, [pc, #140]	@ (8005384 <_svfiprintf_r+0x1f4>)
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d122      	bne.n	8005340 <_svfiprintf_r+0x1b0>
 80052fa:	2207      	movs	r2, #7
 80052fc:	9b07      	ldr	r3, [sp, #28]
 80052fe:	3307      	adds	r3, #7
 8005300:	4393      	bics	r3, r2
 8005302:	3308      	adds	r3, #8
 8005304:	9307      	str	r3, [sp, #28]
 8005306:	6963      	ldr	r3, [r4, #20]
 8005308:	9a04      	ldr	r2, [sp, #16]
 800530a:	189b      	adds	r3, r3, r2
 800530c:	6163      	str	r3, [r4, #20]
 800530e:	e762      	b.n	80051d6 <_svfiprintf_r+0x46>
 8005310:	4343      	muls	r3, r0
 8005312:	0035      	movs	r5, r6
 8005314:	2101      	movs	r1, #1
 8005316:	189b      	adds	r3, r3, r2
 8005318:	e7a4      	b.n	8005264 <_svfiprintf_r+0xd4>
 800531a:	2300      	movs	r3, #0
 800531c:	200a      	movs	r0, #10
 800531e:	0019      	movs	r1, r3
 8005320:	3501      	adds	r5, #1
 8005322:	6063      	str	r3, [r4, #4]
 8005324:	782a      	ldrb	r2, [r5, #0]
 8005326:	1c6e      	adds	r6, r5, #1
 8005328:	3a30      	subs	r2, #48	@ 0x30
 800532a:	2a09      	cmp	r2, #9
 800532c:	d903      	bls.n	8005336 <_svfiprintf_r+0x1a6>
 800532e:	2b00      	cmp	r3, #0
 8005330:	d0c8      	beq.n	80052c4 <_svfiprintf_r+0x134>
 8005332:	9109      	str	r1, [sp, #36]	@ 0x24
 8005334:	e7c6      	b.n	80052c4 <_svfiprintf_r+0x134>
 8005336:	4341      	muls	r1, r0
 8005338:	0035      	movs	r5, r6
 800533a:	2301      	movs	r3, #1
 800533c:	1889      	adds	r1, r1, r2
 800533e:	e7f1      	b.n	8005324 <_svfiprintf_r+0x194>
 8005340:	aa07      	add	r2, sp, #28
 8005342:	9200      	str	r2, [sp, #0]
 8005344:	0021      	movs	r1, r4
 8005346:	003a      	movs	r2, r7
 8005348:	4b0f      	ldr	r3, [pc, #60]	@ (8005388 <_svfiprintf_r+0x1f8>)
 800534a:	9803      	ldr	r0, [sp, #12]
 800534c:	e000      	b.n	8005350 <_svfiprintf_r+0x1c0>
 800534e:	bf00      	nop
 8005350:	9004      	str	r0, [sp, #16]
 8005352:	9b04      	ldr	r3, [sp, #16]
 8005354:	3301      	adds	r3, #1
 8005356:	d1d6      	bne.n	8005306 <_svfiprintf_r+0x176>
 8005358:	89bb      	ldrh	r3, [r7, #12]
 800535a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800535c:	065b      	lsls	r3, r3, #25
 800535e:	d500      	bpl.n	8005362 <_svfiprintf_r+0x1d2>
 8005360:	e72c      	b.n	80051bc <_svfiprintf_r+0x2c>
 8005362:	b021      	add	sp, #132	@ 0x84
 8005364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005366:	aa07      	add	r2, sp, #28
 8005368:	9200      	str	r2, [sp, #0]
 800536a:	0021      	movs	r1, r4
 800536c:	003a      	movs	r2, r7
 800536e:	4b06      	ldr	r3, [pc, #24]	@ (8005388 <_svfiprintf_r+0x1f8>)
 8005370:	9803      	ldr	r0, [sp, #12]
 8005372:	f000 f87b 	bl	800546c <_printf_i>
 8005376:	e7eb      	b.n	8005350 <_svfiprintf_r+0x1c0>
 8005378:	08005884 	.word	0x08005884
 800537c:	0800588a 	.word	0x0800588a
 8005380:	0800588e 	.word	0x0800588e
 8005384:	00000000 	.word	0x00000000
 8005388:	080050d1 	.word	0x080050d1

0800538c <_printf_common>:
 800538c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800538e:	0016      	movs	r6, r2
 8005390:	9301      	str	r3, [sp, #4]
 8005392:	688a      	ldr	r2, [r1, #8]
 8005394:	690b      	ldr	r3, [r1, #16]
 8005396:	000c      	movs	r4, r1
 8005398:	9000      	str	r0, [sp, #0]
 800539a:	4293      	cmp	r3, r2
 800539c:	da00      	bge.n	80053a0 <_printf_common+0x14>
 800539e:	0013      	movs	r3, r2
 80053a0:	0022      	movs	r2, r4
 80053a2:	6033      	str	r3, [r6, #0]
 80053a4:	3243      	adds	r2, #67	@ 0x43
 80053a6:	7812      	ldrb	r2, [r2, #0]
 80053a8:	2a00      	cmp	r2, #0
 80053aa:	d001      	beq.n	80053b0 <_printf_common+0x24>
 80053ac:	3301      	adds	r3, #1
 80053ae:	6033      	str	r3, [r6, #0]
 80053b0:	6823      	ldr	r3, [r4, #0]
 80053b2:	069b      	lsls	r3, r3, #26
 80053b4:	d502      	bpl.n	80053bc <_printf_common+0x30>
 80053b6:	6833      	ldr	r3, [r6, #0]
 80053b8:	3302      	adds	r3, #2
 80053ba:	6033      	str	r3, [r6, #0]
 80053bc:	6822      	ldr	r2, [r4, #0]
 80053be:	2306      	movs	r3, #6
 80053c0:	0015      	movs	r5, r2
 80053c2:	401d      	ands	r5, r3
 80053c4:	421a      	tst	r2, r3
 80053c6:	d027      	beq.n	8005418 <_printf_common+0x8c>
 80053c8:	0023      	movs	r3, r4
 80053ca:	3343      	adds	r3, #67	@ 0x43
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	1e5a      	subs	r2, r3, #1
 80053d0:	4193      	sbcs	r3, r2
 80053d2:	6822      	ldr	r2, [r4, #0]
 80053d4:	0692      	lsls	r2, r2, #26
 80053d6:	d430      	bmi.n	800543a <_printf_common+0xae>
 80053d8:	0022      	movs	r2, r4
 80053da:	9901      	ldr	r1, [sp, #4]
 80053dc:	9800      	ldr	r0, [sp, #0]
 80053de:	9d08      	ldr	r5, [sp, #32]
 80053e0:	3243      	adds	r2, #67	@ 0x43
 80053e2:	47a8      	blx	r5
 80053e4:	3001      	adds	r0, #1
 80053e6:	d025      	beq.n	8005434 <_printf_common+0xa8>
 80053e8:	2206      	movs	r2, #6
 80053ea:	6823      	ldr	r3, [r4, #0]
 80053ec:	2500      	movs	r5, #0
 80053ee:	4013      	ands	r3, r2
 80053f0:	2b04      	cmp	r3, #4
 80053f2:	d105      	bne.n	8005400 <_printf_common+0x74>
 80053f4:	6833      	ldr	r3, [r6, #0]
 80053f6:	68e5      	ldr	r5, [r4, #12]
 80053f8:	1aed      	subs	r5, r5, r3
 80053fa:	43eb      	mvns	r3, r5
 80053fc:	17db      	asrs	r3, r3, #31
 80053fe:	401d      	ands	r5, r3
 8005400:	68a3      	ldr	r3, [r4, #8]
 8005402:	6922      	ldr	r2, [r4, #16]
 8005404:	4293      	cmp	r3, r2
 8005406:	dd01      	ble.n	800540c <_printf_common+0x80>
 8005408:	1a9b      	subs	r3, r3, r2
 800540a:	18ed      	adds	r5, r5, r3
 800540c:	2600      	movs	r6, #0
 800540e:	42b5      	cmp	r5, r6
 8005410:	d120      	bne.n	8005454 <_printf_common+0xc8>
 8005412:	2000      	movs	r0, #0
 8005414:	e010      	b.n	8005438 <_printf_common+0xac>
 8005416:	3501      	adds	r5, #1
 8005418:	68e3      	ldr	r3, [r4, #12]
 800541a:	6832      	ldr	r2, [r6, #0]
 800541c:	1a9b      	subs	r3, r3, r2
 800541e:	42ab      	cmp	r3, r5
 8005420:	ddd2      	ble.n	80053c8 <_printf_common+0x3c>
 8005422:	0022      	movs	r2, r4
 8005424:	2301      	movs	r3, #1
 8005426:	9901      	ldr	r1, [sp, #4]
 8005428:	9800      	ldr	r0, [sp, #0]
 800542a:	9f08      	ldr	r7, [sp, #32]
 800542c:	3219      	adds	r2, #25
 800542e:	47b8      	blx	r7
 8005430:	3001      	adds	r0, #1
 8005432:	d1f0      	bne.n	8005416 <_printf_common+0x8a>
 8005434:	2001      	movs	r0, #1
 8005436:	4240      	negs	r0, r0
 8005438:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800543a:	2030      	movs	r0, #48	@ 0x30
 800543c:	18e1      	adds	r1, r4, r3
 800543e:	3143      	adds	r1, #67	@ 0x43
 8005440:	7008      	strb	r0, [r1, #0]
 8005442:	0021      	movs	r1, r4
 8005444:	1c5a      	adds	r2, r3, #1
 8005446:	3145      	adds	r1, #69	@ 0x45
 8005448:	7809      	ldrb	r1, [r1, #0]
 800544a:	18a2      	adds	r2, r4, r2
 800544c:	3243      	adds	r2, #67	@ 0x43
 800544e:	3302      	adds	r3, #2
 8005450:	7011      	strb	r1, [r2, #0]
 8005452:	e7c1      	b.n	80053d8 <_printf_common+0x4c>
 8005454:	0022      	movs	r2, r4
 8005456:	2301      	movs	r3, #1
 8005458:	9901      	ldr	r1, [sp, #4]
 800545a:	9800      	ldr	r0, [sp, #0]
 800545c:	9f08      	ldr	r7, [sp, #32]
 800545e:	321a      	adds	r2, #26
 8005460:	47b8      	blx	r7
 8005462:	3001      	adds	r0, #1
 8005464:	d0e6      	beq.n	8005434 <_printf_common+0xa8>
 8005466:	3601      	adds	r6, #1
 8005468:	e7d1      	b.n	800540e <_printf_common+0x82>
	...

0800546c <_printf_i>:
 800546c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800546e:	b08b      	sub	sp, #44	@ 0x2c
 8005470:	9206      	str	r2, [sp, #24]
 8005472:	000a      	movs	r2, r1
 8005474:	3243      	adds	r2, #67	@ 0x43
 8005476:	9307      	str	r3, [sp, #28]
 8005478:	9005      	str	r0, [sp, #20]
 800547a:	9203      	str	r2, [sp, #12]
 800547c:	7e0a      	ldrb	r2, [r1, #24]
 800547e:	000c      	movs	r4, r1
 8005480:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005482:	2a78      	cmp	r2, #120	@ 0x78
 8005484:	d809      	bhi.n	800549a <_printf_i+0x2e>
 8005486:	2a62      	cmp	r2, #98	@ 0x62
 8005488:	d80b      	bhi.n	80054a2 <_printf_i+0x36>
 800548a:	2a00      	cmp	r2, #0
 800548c:	d100      	bne.n	8005490 <_printf_i+0x24>
 800548e:	e0ba      	b.n	8005606 <_printf_i+0x19a>
 8005490:	497a      	ldr	r1, [pc, #488]	@ (800567c <_printf_i+0x210>)
 8005492:	9104      	str	r1, [sp, #16]
 8005494:	2a58      	cmp	r2, #88	@ 0x58
 8005496:	d100      	bne.n	800549a <_printf_i+0x2e>
 8005498:	e08e      	b.n	80055b8 <_printf_i+0x14c>
 800549a:	0025      	movs	r5, r4
 800549c:	3542      	adds	r5, #66	@ 0x42
 800549e:	702a      	strb	r2, [r5, #0]
 80054a0:	e022      	b.n	80054e8 <_printf_i+0x7c>
 80054a2:	0010      	movs	r0, r2
 80054a4:	3863      	subs	r0, #99	@ 0x63
 80054a6:	2815      	cmp	r0, #21
 80054a8:	d8f7      	bhi.n	800549a <_printf_i+0x2e>
 80054aa:	f7fa fe29 	bl	8000100 <__gnu_thumb1_case_shi>
 80054ae:	0016      	.short	0x0016
 80054b0:	fff6001f 	.word	0xfff6001f
 80054b4:	fff6fff6 	.word	0xfff6fff6
 80054b8:	001ffff6 	.word	0x001ffff6
 80054bc:	fff6fff6 	.word	0xfff6fff6
 80054c0:	fff6fff6 	.word	0xfff6fff6
 80054c4:	0036009f 	.word	0x0036009f
 80054c8:	fff6007e 	.word	0xfff6007e
 80054cc:	00b0fff6 	.word	0x00b0fff6
 80054d0:	0036fff6 	.word	0x0036fff6
 80054d4:	fff6fff6 	.word	0xfff6fff6
 80054d8:	0082      	.short	0x0082
 80054da:	0025      	movs	r5, r4
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	3542      	adds	r5, #66	@ 0x42
 80054e0:	1d11      	adds	r1, r2, #4
 80054e2:	6019      	str	r1, [r3, #0]
 80054e4:	6813      	ldr	r3, [r2, #0]
 80054e6:	702b      	strb	r3, [r5, #0]
 80054e8:	2301      	movs	r3, #1
 80054ea:	e09e      	b.n	800562a <_printf_i+0x1be>
 80054ec:	6818      	ldr	r0, [r3, #0]
 80054ee:	6809      	ldr	r1, [r1, #0]
 80054f0:	1d02      	adds	r2, r0, #4
 80054f2:	060d      	lsls	r5, r1, #24
 80054f4:	d50b      	bpl.n	800550e <_printf_i+0xa2>
 80054f6:	6806      	ldr	r6, [r0, #0]
 80054f8:	601a      	str	r2, [r3, #0]
 80054fa:	2e00      	cmp	r6, #0
 80054fc:	da03      	bge.n	8005506 <_printf_i+0x9a>
 80054fe:	232d      	movs	r3, #45	@ 0x2d
 8005500:	9a03      	ldr	r2, [sp, #12]
 8005502:	4276      	negs	r6, r6
 8005504:	7013      	strb	r3, [r2, #0]
 8005506:	4b5d      	ldr	r3, [pc, #372]	@ (800567c <_printf_i+0x210>)
 8005508:	270a      	movs	r7, #10
 800550a:	9304      	str	r3, [sp, #16]
 800550c:	e018      	b.n	8005540 <_printf_i+0xd4>
 800550e:	6806      	ldr	r6, [r0, #0]
 8005510:	601a      	str	r2, [r3, #0]
 8005512:	0649      	lsls	r1, r1, #25
 8005514:	d5f1      	bpl.n	80054fa <_printf_i+0x8e>
 8005516:	b236      	sxth	r6, r6
 8005518:	e7ef      	b.n	80054fa <_printf_i+0x8e>
 800551a:	6808      	ldr	r0, [r1, #0]
 800551c:	6819      	ldr	r1, [r3, #0]
 800551e:	c940      	ldmia	r1!, {r6}
 8005520:	0605      	lsls	r5, r0, #24
 8005522:	d402      	bmi.n	800552a <_printf_i+0xbe>
 8005524:	0640      	lsls	r0, r0, #25
 8005526:	d500      	bpl.n	800552a <_printf_i+0xbe>
 8005528:	b2b6      	uxth	r6, r6
 800552a:	6019      	str	r1, [r3, #0]
 800552c:	4b53      	ldr	r3, [pc, #332]	@ (800567c <_printf_i+0x210>)
 800552e:	270a      	movs	r7, #10
 8005530:	9304      	str	r3, [sp, #16]
 8005532:	2a6f      	cmp	r2, #111	@ 0x6f
 8005534:	d100      	bne.n	8005538 <_printf_i+0xcc>
 8005536:	3f02      	subs	r7, #2
 8005538:	0023      	movs	r3, r4
 800553a:	2200      	movs	r2, #0
 800553c:	3343      	adds	r3, #67	@ 0x43
 800553e:	701a      	strb	r2, [r3, #0]
 8005540:	6863      	ldr	r3, [r4, #4]
 8005542:	60a3      	str	r3, [r4, #8]
 8005544:	2b00      	cmp	r3, #0
 8005546:	db06      	blt.n	8005556 <_printf_i+0xea>
 8005548:	2104      	movs	r1, #4
 800554a:	6822      	ldr	r2, [r4, #0]
 800554c:	9d03      	ldr	r5, [sp, #12]
 800554e:	438a      	bics	r2, r1
 8005550:	6022      	str	r2, [r4, #0]
 8005552:	4333      	orrs	r3, r6
 8005554:	d00c      	beq.n	8005570 <_printf_i+0x104>
 8005556:	9d03      	ldr	r5, [sp, #12]
 8005558:	0030      	movs	r0, r6
 800555a:	0039      	movs	r1, r7
 800555c:	f7fa fe60 	bl	8000220 <__aeabi_uidivmod>
 8005560:	9b04      	ldr	r3, [sp, #16]
 8005562:	3d01      	subs	r5, #1
 8005564:	5c5b      	ldrb	r3, [r3, r1]
 8005566:	702b      	strb	r3, [r5, #0]
 8005568:	0033      	movs	r3, r6
 800556a:	0006      	movs	r6, r0
 800556c:	429f      	cmp	r7, r3
 800556e:	d9f3      	bls.n	8005558 <_printf_i+0xec>
 8005570:	2f08      	cmp	r7, #8
 8005572:	d109      	bne.n	8005588 <_printf_i+0x11c>
 8005574:	6823      	ldr	r3, [r4, #0]
 8005576:	07db      	lsls	r3, r3, #31
 8005578:	d506      	bpl.n	8005588 <_printf_i+0x11c>
 800557a:	6862      	ldr	r2, [r4, #4]
 800557c:	6923      	ldr	r3, [r4, #16]
 800557e:	429a      	cmp	r2, r3
 8005580:	dc02      	bgt.n	8005588 <_printf_i+0x11c>
 8005582:	2330      	movs	r3, #48	@ 0x30
 8005584:	3d01      	subs	r5, #1
 8005586:	702b      	strb	r3, [r5, #0]
 8005588:	9b03      	ldr	r3, [sp, #12]
 800558a:	1b5b      	subs	r3, r3, r5
 800558c:	6123      	str	r3, [r4, #16]
 800558e:	9b07      	ldr	r3, [sp, #28]
 8005590:	0021      	movs	r1, r4
 8005592:	9300      	str	r3, [sp, #0]
 8005594:	9805      	ldr	r0, [sp, #20]
 8005596:	9b06      	ldr	r3, [sp, #24]
 8005598:	aa09      	add	r2, sp, #36	@ 0x24
 800559a:	f7ff fef7 	bl	800538c <_printf_common>
 800559e:	3001      	adds	r0, #1
 80055a0:	d148      	bne.n	8005634 <_printf_i+0x1c8>
 80055a2:	2001      	movs	r0, #1
 80055a4:	4240      	negs	r0, r0
 80055a6:	b00b      	add	sp, #44	@ 0x2c
 80055a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055aa:	2220      	movs	r2, #32
 80055ac:	6809      	ldr	r1, [r1, #0]
 80055ae:	430a      	orrs	r2, r1
 80055b0:	6022      	str	r2, [r4, #0]
 80055b2:	2278      	movs	r2, #120	@ 0x78
 80055b4:	4932      	ldr	r1, [pc, #200]	@ (8005680 <_printf_i+0x214>)
 80055b6:	9104      	str	r1, [sp, #16]
 80055b8:	0021      	movs	r1, r4
 80055ba:	3145      	adds	r1, #69	@ 0x45
 80055bc:	700a      	strb	r2, [r1, #0]
 80055be:	6819      	ldr	r1, [r3, #0]
 80055c0:	6822      	ldr	r2, [r4, #0]
 80055c2:	c940      	ldmia	r1!, {r6}
 80055c4:	0610      	lsls	r0, r2, #24
 80055c6:	d402      	bmi.n	80055ce <_printf_i+0x162>
 80055c8:	0650      	lsls	r0, r2, #25
 80055ca:	d500      	bpl.n	80055ce <_printf_i+0x162>
 80055cc:	b2b6      	uxth	r6, r6
 80055ce:	6019      	str	r1, [r3, #0]
 80055d0:	07d3      	lsls	r3, r2, #31
 80055d2:	d502      	bpl.n	80055da <_printf_i+0x16e>
 80055d4:	2320      	movs	r3, #32
 80055d6:	4313      	orrs	r3, r2
 80055d8:	6023      	str	r3, [r4, #0]
 80055da:	2e00      	cmp	r6, #0
 80055dc:	d001      	beq.n	80055e2 <_printf_i+0x176>
 80055de:	2710      	movs	r7, #16
 80055e0:	e7aa      	b.n	8005538 <_printf_i+0xcc>
 80055e2:	2220      	movs	r2, #32
 80055e4:	6823      	ldr	r3, [r4, #0]
 80055e6:	4393      	bics	r3, r2
 80055e8:	6023      	str	r3, [r4, #0]
 80055ea:	e7f8      	b.n	80055de <_printf_i+0x172>
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	680d      	ldr	r5, [r1, #0]
 80055f0:	1d10      	adds	r0, r2, #4
 80055f2:	6949      	ldr	r1, [r1, #20]
 80055f4:	6018      	str	r0, [r3, #0]
 80055f6:	6813      	ldr	r3, [r2, #0]
 80055f8:	062e      	lsls	r6, r5, #24
 80055fa:	d501      	bpl.n	8005600 <_printf_i+0x194>
 80055fc:	6019      	str	r1, [r3, #0]
 80055fe:	e002      	b.n	8005606 <_printf_i+0x19a>
 8005600:	066d      	lsls	r5, r5, #25
 8005602:	d5fb      	bpl.n	80055fc <_printf_i+0x190>
 8005604:	8019      	strh	r1, [r3, #0]
 8005606:	2300      	movs	r3, #0
 8005608:	9d03      	ldr	r5, [sp, #12]
 800560a:	6123      	str	r3, [r4, #16]
 800560c:	e7bf      	b.n	800558e <_printf_i+0x122>
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	1d11      	adds	r1, r2, #4
 8005612:	6019      	str	r1, [r3, #0]
 8005614:	6815      	ldr	r5, [r2, #0]
 8005616:	2100      	movs	r1, #0
 8005618:	0028      	movs	r0, r5
 800561a:	6862      	ldr	r2, [r4, #4]
 800561c:	f000 f856 	bl	80056cc <memchr>
 8005620:	2800      	cmp	r0, #0
 8005622:	d001      	beq.n	8005628 <_printf_i+0x1bc>
 8005624:	1b40      	subs	r0, r0, r5
 8005626:	6060      	str	r0, [r4, #4]
 8005628:	6863      	ldr	r3, [r4, #4]
 800562a:	6123      	str	r3, [r4, #16]
 800562c:	2300      	movs	r3, #0
 800562e:	9a03      	ldr	r2, [sp, #12]
 8005630:	7013      	strb	r3, [r2, #0]
 8005632:	e7ac      	b.n	800558e <_printf_i+0x122>
 8005634:	002a      	movs	r2, r5
 8005636:	6923      	ldr	r3, [r4, #16]
 8005638:	9906      	ldr	r1, [sp, #24]
 800563a:	9805      	ldr	r0, [sp, #20]
 800563c:	9d07      	ldr	r5, [sp, #28]
 800563e:	47a8      	blx	r5
 8005640:	3001      	adds	r0, #1
 8005642:	d0ae      	beq.n	80055a2 <_printf_i+0x136>
 8005644:	6823      	ldr	r3, [r4, #0]
 8005646:	079b      	lsls	r3, r3, #30
 8005648:	d415      	bmi.n	8005676 <_printf_i+0x20a>
 800564a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800564c:	68e0      	ldr	r0, [r4, #12]
 800564e:	4298      	cmp	r0, r3
 8005650:	daa9      	bge.n	80055a6 <_printf_i+0x13a>
 8005652:	0018      	movs	r0, r3
 8005654:	e7a7      	b.n	80055a6 <_printf_i+0x13a>
 8005656:	0022      	movs	r2, r4
 8005658:	2301      	movs	r3, #1
 800565a:	9906      	ldr	r1, [sp, #24]
 800565c:	9805      	ldr	r0, [sp, #20]
 800565e:	9e07      	ldr	r6, [sp, #28]
 8005660:	3219      	adds	r2, #25
 8005662:	47b0      	blx	r6
 8005664:	3001      	adds	r0, #1
 8005666:	d09c      	beq.n	80055a2 <_printf_i+0x136>
 8005668:	3501      	adds	r5, #1
 800566a:	68e3      	ldr	r3, [r4, #12]
 800566c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800566e:	1a9b      	subs	r3, r3, r2
 8005670:	42ab      	cmp	r3, r5
 8005672:	dcf0      	bgt.n	8005656 <_printf_i+0x1ea>
 8005674:	e7e9      	b.n	800564a <_printf_i+0x1de>
 8005676:	2500      	movs	r5, #0
 8005678:	e7f7      	b.n	800566a <_printf_i+0x1fe>
 800567a:	46c0      	nop			@ (mov r8, r8)
 800567c:	08005895 	.word	0x08005895
 8005680:	080058a6 	.word	0x080058a6

08005684 <memmove>:
 8005684:	b510      	push	{r4, lr}
 8005686:	4288      	cmp	r0, r1
 8005688:	d902      	bls.n	8005690 <memmove+0xc>
 800568a:	188b      	adds	r3, r1, r2
 800568c:	4298      	cmp	r0, r3
 800568e:	d308      	bcc.n	80056a2 <memmove+0x1e>
 8005690:	2300      	movs	r3, #0
 8005692:	429a      	cmp	r2, r3
 8005694:	d007      	beq.n	80056a6 <memmove+0x22>
 8005696:	5ccc      	ldrb	r4, [r1, r3]
 8005698:	54c4      	strb	r4, [r0, r3]
 800569a:	3301      	adds	r3, #1
 800569c:	e7f9      	b.n	8005692 <memmove+0xe>
 800569e:	5c8b      	ldrb	r3, [r1, r2]
 80056a0:	5483      	strb	r3, [r0, r2]
 80056a2:	3a01      	subs	r2, #1
 80056a4:	d2fb      	bcs.n	800569e <memmove+0x1a>
 80056a6:	bd10      	pop	{r4, pc}

080056a8 <_sbrk_r>:
 80056a8:	2300      	movs	r3, #0
 80056aa:	b570      	push	{r4, r5, r6, lr}
 80056ac:	4d06      	ldr	r5, [pc, #24]	@ (80056c8 <_sbrk_r+0x20>)
 80056ae:	0004      	movs	r4, r0
 80056b0:	0008      	movs	r0, r1
 80056b2:	602b      	str	r3, [r5, #0]
 80056b4:	f7fb fca6 	bl	8001004 <_sbrk>
 80056b8:	1c43      	adds	r3, r0, #1
 80056ba:	d103      	bne.n	80056c4 <_sbrk_r+0x1c>
 80056bc:	682b      	ldr	r3, [r5, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d000      	beq.n	80056c4 <_sbrk_r+0x1c>
 80056c2:	6023      	str	r3, [r4, #0]
 80056c4:	bd70      	pop	{r4, r5, r6, pc}
 80056c6:	46c0      	nop			@ (mov r8, r8)
 80056c8:	200003a0 	.word	0x200003a0

080056cc <memchr>:
 80056cc:	b2c9      	uxtb	r1, r1
 80056ce:	1882      	adds	r2, r0, r2
 80056d0:	4290      	cmp	r0, r2
 80056d2:	d101      	bne.n	80056d8 <memchr+0xc>
 80056d4:	2000      	movs	r0, #0
 80056d6:	4770      	bx	lr
 80056d8:	7803      	ldrb	r3, [r0, #0]
 80056da:	428b      	cmp	r3, r1
 80056dc:	d0fb      	beq.n	80056d6 <memchr+0xa>
 80056de:	3001      	adds	r0, #1
 80056e0:	e7f6      	b.n	80056d0 <memchr+0x4>

080056e2 <memcpy>:
 80056e2:	2300      	movs	r3, #0
 80056e4:	b510      	push	{r4, lr}
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d100      	bne.n	80056ec <memcpy+0xa>
 80056ea:	bd10      	pop	{r4, pc}
 80056ec:	5ccc      	ldrb	r4, [r1, r3]
 80056ee:	54c4      	strb	r4, [r0, r3]
 80056f0:	3301      	adds	r3, #1
 80056f2:	e7f8      	b.n	80056e6 <memcpy+0x4>

080056f4 <_realloc_r>:
 80056f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056f6:	0006      	movs	r6, r0
 80056f8:	000c      	movs	r4, r1
 80056fa:	0015      	movs	r5, r2
 80056fc:	2900      	cmp	r1, #0
 80056fe:	d105      	bne.n	800570c <_realloc_r+0x18>
 8005700:	0011      	movs	r1, r2
 8005702:	f7ff fc55 	bl	8004fb0 <_malloc_r>
 8005706:	0004      	movs	r4, r0
 8005708:	0020      	movs	r0, r4
 800570a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800570c:	2a00      	cmp	r2, #0
 800570e:	d103      	bne.n	8005718 <_realloc_r+0x24>
 8005710:	f7ff fbe2 	bl	8004ed8 <_free_r>
 8005714:	002c      	movs	r4, r5
 8005716:	e7f7      	b.n	8005708 <_realloc_r+0x14>
 8005718:	f000 f81c 	bl	8005754 <_malloc_usable_size_r>
 800571c:	0007      	movs	r7, r0
 800571e:	4285      	cmp	r5, r0
 8005720:	d802      	bhi.n	8005728 <_realloc_r+0x34>
 8005722:	0843      	lsrs	r3, r0, #1
 8005724:	42ab      	cmp	r3, r5
 8005726:	d3ef      	bcc.n	8005708 <_realloc_r+0x14>
 8005728:	0029      	movs	r1, r5
 800572a:	0030      	movs	r0, r6
 800572c:	f7ff fc40 	bl	8004fb0 <_malloc_r>
 8005730:	9001      	str	r0, [sp, #4]
 8005732:	2800      	cmp	r0, #0
 8005734:	d101      	bne.n	800573a <_realloc_r+0x46>
 8005736:	9c01      	ldr	r4, [sp, #4]
 8005738:	e7e6      	b.n	8005708 <_realloc_r+0x14>
 800573a:	002a      	movs	r2, r5
 800573c:	42bd      	cmp	r5, r7
 800573e:	d900      	bls.n	8005742 <_realloc_r+0x4e>
 8005740:	003a      	movs	r2, r7
 8005742:	0021      	movs	r1, r4
 8005744:	9801      	ldr	r0, [sp, #4]
 8005746:	f7ff ffcc 	bl	80056e2 <memcpy>
 800574a:	0021      	movs	r1, r4
 800574c:	0030      	movs	r0, r6
 800574e:	f7ff fbc3 	bl	8004ed8 <_free_r>
 8005752:	e7f0      	b.n	8005736 <_realloc_r+0x42>

08005754 <_malloc_usable_size_r>:
 8005754:	1f0b      	subs	r3, r1, #4
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	1f18      	subs	r0, r3, #4
 800575a:	2b00      	cmp	r3, #0
 800575c:	da01      	bge.n	8005762 <_malloc_usable_size_r+0xe>
 800575e:	580b      	ldr	r3, [r1, r0]
 8005760:	18c0      	adds	r0, r0, r3
 8005762:	4770      	bx	lr

08005764 <_init>:
 8005764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005766:	46c0      	nop			@ (mov r8, r8)
 8005768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800576a:	bc08      	pop	{r3}
 800576c:	469e      	mov	lr, r3
 800576e:	4770      	bx	lr

08005770 <_fini>:
 8005770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005772:	46c0      	nop			@ (mov r8, r8)
 8005774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005776:	bc08      	pop	{r3}
 8005778:	469e      	mov	lr, r3
 800577a:	4770      	bx	lr
