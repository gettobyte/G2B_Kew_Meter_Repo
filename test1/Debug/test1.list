
test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056c0  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08005778  08005778  00006778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058b4  080058b4  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080058b4  080058b4  0000705c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080058b4  080058b4  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058b4  080058b4  000068b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080058b8  080058b8  000068b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080058bc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  2000005c  08005918  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ac  08005918  000073ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ac1  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024d9  00000000  00000000  00018b45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  0001b020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c3f  00000000  00000000  0001bfb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000161c9  00000000  00000000  0001cbef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012a16  00000000  00000000  00032db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009392c  00000000  00000000  000457ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d90fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003db0  00000000  00000000  000d9140  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000dcef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000005c 	.word	0x2000005c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08005760 	.word	0x08005760

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000060 	.word	0x20000060
 80000fc:	08005760 	.word	0x08005760

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	@ 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	@ 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	@ 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			@ (mov r8, r8)

08000400 <ADC_Convert_Rank1>:
        value /= 10;
    }
}

uint16_t ADC_Convert_Rank1(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b084      	sub	sp, #16
 8000404:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	0018      	movs	r0, r3
 800040a:	230c      	movs	r3, #12
 800040c:	001a      	movs	r2, r3
 800040e:	2100      	movs	r1, #0
 8000410:	f004 fd2c 	bl	8004e6c <memset>

	  sConfig.Channel = ADC_CHANNEL_0;
 8000414:	1d3b      	adds	r3, r7, #4
 8000416:	2201      	movs	r2, #1
 8000418:	601a      	str	r2, [r3, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 800041a:	1d3b      	adds	r3, r7, #4
 800041c:	2200      	movs	r2, #0
 800041e:	605a      	str	r2, [r3, #4]
	  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000420:	1d3b      	adds	r3, r7, #4
 8000422:	2200      	movs	r2, #0
 8000424:	609a      	str	r2, [r3, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000426:	1d3a      	adds	r2, r7, #4
 8000428:	4b16      	ldr	r3, [pc, #88]	@ (8000484 <ADC_Convert_Rank1+0x84>)
 800042a:	0011      	movs	r1, r2
 800042c:	0018      	movs	r0, r3
 800042e:	f001 fb33 	bl	8001a98 <HAL_ADC_ConfigChannel>
 8000432:	1e03      	subs	r3, r0, #0
 8000434:	d001      	beq.n	800043a <ADC_Convert_Rank1+0x3a>
	  {
	    Error_Handler();
 8000436:	f000 fbb9 	bl	8000bac <Error_Handler>
	  }

	status = HAL_ADC_Start(&hadc1);
 800043a:	4b12      	ldr	r3, [pc, #72]	@ (8000484 <ADC_Convert_Rank1+0x84>)
 800043c:	0018      	movs	r0, r3
 800043e:	f001 fa01 	bl	8001844 <HAL_ADC_Start>
 8000442:	0003      	movs	r3, r0
 8000444:	001a      	movs	r2, r3
 8000446:	4b10      	ldr	r3, [pc, #64]	@ (8000488 <ADC_Convert_Rank1+0x88>)
 8000448:	701a      	strb	r2, [r3, #0]
	status = HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800044a:	2301      	movs	r3, #1
 800044c:	425a      	negs	r2, r3
 800044e:	4b0d      	ldr	r3, [pc, #52]	@ (8000484 <ADC_Convert_Rank1+0x84>)
 8000450:	0011      	movs	r1, r2
 8000452:	0018      	movs	r0, r3
 8000454:	f001 fa80 	bl	8001958 <HAL_ADC_PollForConversion>
 8000458:	0003      	movs	r3, r0
 800045a:	001a      	movs	r2, r3
 800045c:	4b0a      	ldr	r3, [pc, #40]	@ (8000488 <ADC_Convert_Rank1+0x88>)
 800045e:	701a      	strb	r2, [r3, #0]
	adc_Value_1 = HAL_ADC_GetValue(&hadc1);
 8000460:	4b08      	ldr	r3, [pc, #32]	@ (8000484 <ADC_Convert_Rank1+0x84>)
 8000462:	0018      	movs	r0, r3
 8000464:	f001 fb0c 	bl	8001a80 <HAL_ADC_GetValue>
 8000468:	0003      	movs	r3, r0
 800046a:	b29a      	uxth	r2, r3
 800046c:	4b07      	ldr	r3, [pc, #28]	@ (800048c <ADC_Convert_Rank1+0x8c>)
 800046e:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 8000470:	4b04      	ldr	r3, [pc, #16]	@ (8000484 <ADC_Convert_Rank1+0x84>)
 8000472:	0018      	movs	r0, r3
 8000474:	f001 fa34 	bl	80018e0 <HAL_ADC_Stop>

	return adc_Value_1;
 8000478:	4b04      	ldr	r3, [pc, #16]	@ (800048c <ADC_Convert_Rank1+0x8c>)
 800047a:	881b      	ldrh	r3, [r3, #0]
}
 800047c:	0018      	movs	r0, r3
 800047e:	46bd      	mov	sp, r7
 8000480:	b004      	add	sp, #16
 8000482:	bd80      	pop	{r7, pc}
 8000484:	20000078 	.word	0x20000078
 8000488:	200001bc 	.word	0x200001bc
 800048c:	200001c8 	.word	0x200001c8

08000490 <ADC_Convert_Rank2>:

uint16_t ADC_Convert_Rank2(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b084      	sub	sp, #16
 8000494:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	0018      	movs	r0, r3
 800049a:	230c      	movs	r3, #12
 800049c:	001a      	movs	r2, r3
 800049e:	2100      	movs	r1, #0
 80004a0:	f004 fce4 	bl	8004e6c <memset>

	  sConfig.Channel = ADC_CHANNEL_1;
 80004a4:	1d3b      	adds	r3, r7, #4
 80004a6:	4a1a      	ldr	r2, [pc, #104]	@ (8000510 <ADC_Convert_Rank2+0x80>)
 80004a8:	601a      	str	r2, [r3, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004aa:	1d3b      	adds	r3, r7, #4
 80004ac:	2200      	movs	r2, #0
 80004ae:	605a      	str	r2, [r3, #4]
	  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80004b0:	1d3b      	adds	r3, r7, #4
 80004b2:	2200      	movs	r2, #0
 80004b4:	609a      	str	r2, [r3, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004b6:	1d3a      	adds	r2, r7, #4
 80004b8:	4b16      	ldr	r3, [pc, #88]	@ (8000514 <ADC_Convert_Rank2+0x84>)
 80004ba:	0011      	movs	r1, r2
 80004bc:	0018      	movs	r0, r3
 80004be:	f001 faeb 	bl	8001a98 <HAL_ADC_ConfigChannel>
 80004c2:	1e03      	subs	r3, r0, #0
 80004c4:	d001      	beq.n	80004ca <ADC_Convert_Rank2+0x3a>
	  {
	    Error_Handler();
 80004c6:	f000 fb71 	bl	8000bac <Error_Handler>
	  }

	status = HAL_ADC_Start(&hadc1);
 80004ca:	4b12      	ldr	r3, [pc, #72]	@ (8000514 <ADC_Convert_Rank2+0x84>)
 80004cc:	0018      	movs	r0, r3
 80004ce:	f001 f9b9 	bl	8001844 <HAL_ADC_Start>
 80004d2:	0003      	movs	r3, r0
 80004d4:	001a      	movs	r2, r3
 80004d6:	4b10      	ldr	r3, [pc, #64]	@ (8000518 <ADC_Convert_Rank2+0x88>)
 80004d8:	701a      	strb	r2, [r3, #0]
	status = HAL_ADC_PollForConversion(&hadc1, 1);
 80004da:	4b0e      	ldr	r3, [pc, #56]	@ (8000514 <ADC_Convert_Rank2+0x84>)
 80004dc:	2101      	movs	r1, #1
 80004de:	0018      	movs	r0, r3
 80004e0:	f001 fa3a 	bl	8001958 <HAL_ADC_PollForConversion>
 80004e4:	0003      	movs	r3, r0
 80004e6:	001a      	movs	r2, r3
 80004e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000518 <ADC_Convert_Rank2+0x88>)
 80004ea:	701a      	strb	r2, [r3, #0]
	adc_Value_2= HAL_ADC_GetValue(&hadc1);
 80004ec:	4b09      	ldr	r3, [pc, #36]	@ (8000514 <ADC_Convert_Rank2+0x84>)
 80004ee:	0018      	movs	r0, r3
 80004f0:	f001 fac6 	bl	8001a80 <HAL_ADC_GetValue>
 80004f4:	0003      	movs	r3, r0
 80004f6:	b29a      	uxth	r2, r3
 80004f8:	4b08      	ldr	r3, [pc, #32]	@ (800051c <ADC_Convert_Rank2+0x8c>)
 80004fa:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 80004fc:	4b05      	ldr	r3, [pc, #20]	@ (8000514 <ADC_Convert_Rank2+0x84>)
 80004fe:	0018      	movs	r0, r3
 8000500:	f001 f9ee 	bl	80018e0 <HAL_ADC_Stop>

	return adc_Value_2;
 8000504:	4b05      	ldr	r3, [pc, #20]	@ (800051c <ADC_Convert_Rank2+0x8c>)
 8000506:	881b      	ldrh	r3, [r3, #0]
}
 8000508:	0018      	movs	r0, r3
 800050a:	46bd      	mov	sp, r7
 800050c:	b004      	add	sp, #16
 800050e:	bd80      	pop	{r7, pc}
 8000510:	04000002 	.word	0x04000002
 8000514:	20000078 	.word	0x20000078
 8000518:	200001bc 	.word	0x200001bc
 800051c:	200001ca 	.word	0x200001ca

08000520 <ADC_Convert_Rank3>:

uint16_t ADC_Convert_Rank3(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000526:	1d3b      	adds	r3, r7, #4
 8000528:	0018      	movs	r0, r3
 800052a:	230c      	movs	r3, #12
 800052c:	001a      	movs	r2, r3
 800052e:	2100      	movs	r1, #0
 8000530:	f004 fc9c 	bl	8004e6c <memset>

	  sConfig.Channel = ADC_CHANNEL_2;
 8000534:	1d3b      	adds	r3, r7, #4
 8000536:	4a1a      	ldr	r2, [pc, #104]	@ (80005a0 <ADC_Convert_Rank3+0x80>)
 8000538:	601a      	str	r2, [r3, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	2200      	movs	r2, #0
 800053e:	605a      	str	r2, [r3, #4]
	  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000540:	1d3b      	adds	r3, r7, #4
 8000542:	2200      	movs	r2, #0
 8000544:	609a      	str	r2, [r3, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000546:	1d3a      	adds	r2, r7, #4
 8000548:	4b16      	ldr	r3, [pc, #88]	@ (80005a4 <ADC_Convert_Rank3+0x84>)
 800054a:	0011      	movs	r1, r2
 800054c:	0018      	movs	r0, r3
 800054e:	f001 faa3 	bl	8001a98 <HAL_ADC_ConfigChannel>
 8000552:	1e03      	subs	r3, r0, #0
 8000554:	d001      	beq.n	800055a <ADC_Convert_Rank3+0x3a>
	  {
	    Error_Handler();
 8000556:	f000 fb29 	bl	8000bac <Error_Handler>
	  }

	status = HAL_ADC_Start(&hadc1);
 800055a:	4b12      	ldr	r3, [pc, #72]	@ (80005a4 <ADC_Convert_Rank3+0x84>)
 800055c:	0018      	movs	r0, r3
 800055e:	f001 f971 	bl	8001844 <HAL_ADC_Start>
 8000562:	0003      	movs	r3, r0
 8000564:	001a      	movs	r2, r3
 8000566:	4b10      	ldr	r3, [pc, #64]	@ (80005a8 <ADC_Convert_Rank3+0x88>)
 8000568:	701a      	strb	r2, [r3, #0]
	status = HAL_ADC_PollForConversion(&hadc1, 1);
 800056a:	4b0e      	ldr	r3, [pc, #56]	@ (80005a4 <ADC_Convert_Rank3+0x84>)
 800056c:	2101      	movs	r1, #1
 800056e:	0018      	movs	r0, r3
 8000570:	f001 f9f2 	bl	8001958 <HAL_ADC_PollForConversion>
 8000574:	0003      	movs	r3, r0
 8000576:	001a      	movs	r2, r3
 8000578:	4b0b      	ldr	r3, [pc, #44]	@ (80005a8 <ADC_Convert_Rank3+0x88>)
 800057a:	701a      	strb	r2, [r3, #0]
	adc_Value_2= HAL_ADC_GetValue(&hadc1);
 800057c:	4b09      	ldr	r3, [pc, #36]	@ (80005a4 <ADC_Convert_Rank3+0x84>)
 800057e:	0018      	movs	r0, r3
 8000580:	f001 fa7e 	bl	8001a80 <HAL_ADC_GetValue>
 8000584:	0003      	movs	r3, r0
 8000586:	b29a      	uxth	r2, r3
 8000588:	4b08      	ldr	r3, [pc, #32]	@ (80005ac <ADC_Convert_Rank3+0x8c>)
 800058a:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 800058c:	4b05      	ldr	r3, [pc, #20]	@ (80005a4 <ADC_Convert_Rank3+0x84>)
 800058e:	0018      	movs	r0, r3
 8000590:	f001 f9a6 	bl	80018e0 <HAL_ADC_Stop>

	return adc_Value_2;
 8000594:	4b05      	ldr	r3, [pc, #20]	@ (80005ac <ADC_Convert_Rank3+0x8c>)
 8000596:	881b      	ldrh	r3, [r3, #0]
}
 8000598:	0018      	movs	r0, r3
 800059a:	46bd      	mov	sp, r7
 800059c:	b004      	add	sp, #16
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	08000004 	.word	0x08000004
 80005a4:	20000078 	.word	0x20000078
 80005a8:	200001bc 	.word	0x200001bc
 80005ac:	200001ca 	.word	0x200001ca

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b6:	f000 fd89 	bl	80010cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ba:	f000 f927 	bl	800080c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005be:	f000 fadf 	bl	8000b80 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005c2:	f000 f97f 	bl	80008c4 <MX_ADC1_Init>
  MX_TIM3_Init();
 80005c6:	f000 fa11 	bl	80009ec <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80005ca:	f000 fa8b 	bl	8000ae4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  status = HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 80005ce:	4b77      	ldr	r3, [pc, #476]	@ (80007ac <main+0x1fc>)
 80005d0:	2100      	movs	r1, #0
 80005d2:	0018      	movs	r0, r3
 80005d4:	f002 fea2 	bl	800331c <HAL_TIM_OC_Start_IT>
 80005d8:	0003      	movs	r3, r0
 80005da:	001a      	movs	r2, r3
 80005dc:	4b74      	ldr	r3, [pc, #464]	@ (80007b0 <main+0x200>)
 80005de:	701a      	strb	r2, [r3, #0]
//	  HAL_Delay(100);

	  // === Case 1: Show raw 12-bit ADC value (0–4095) ===
	  // Comment this block when testing voltage

	  sum_1 = 0;
 80005e0:	4b74      	ldr	r3, [pc, #464]	@ (80007b4 <main+0x204>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
	  sum_2 = 0;
 80005e6:	4b74      	ldr	r3, [pc, #464]	@ (80007b8 <main+0x208>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]

	  for (uint8_t i = 0; i < SAMPLES; i++)
 80005ec:	1dfb      	adds	r3, r7, #7
 80005ee:	2200      	movs	r2, #0
 80005f0:	701a      	strb	r2, [r3, #0]
 80005f2:	e022      	b.n	800063a <main+0x8a>
	  {
		  a = ADC_Convert_Rank1();
 80005f4:	f7ff ff04 	bl	8000400 <ADC_Convert_Rank1>
 80005f8:	0003      	movs	r3, r0
 80005fa:	b21a      	sxth	r2, r3
 80005fc:	4b6f      	ldr	r3, [pc, #444]	@ (80007bc <main+0x20c>)
 80005fe:	801a      	strh	r2, [r3, #0]
		  b = ADC_Convert_Rank2();
 8000600:	f7ff ff46 	bl	8000490 <ADC_Convert_Rank2>
 8000604:	0003      	movs	r3, r0
 8000606:	b21a      	sxth	r2, r3
 8000608:	4b6d      	ldr	r3, [pc, #436]	@ (80007c0 <main+0x210>)
 800060a:	801a      	strh	r2, [r3, #0]

		  sum_1 += a;
 800060c:	4b6b      	ldr	r3, [pc, #428]	@ (80007bc <main+0x20c>)
 800060e:	2200      	movs	r2, #0
 8000610:	5e9b      	ldrsh	r3, [r3, r2]
 8000612:	001a      	movs	r2, r3
 8000614:	4b67      	ldr	r3, [pc, #412]	@ (80007b4 <main+0x204>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	18d2      	adds	r2, r2, r3
 800061a:	4b66      	ldr	r3, [pc, #408]	@ (80007b4 <main+0x204>)
 800061c:	601a      	str	r2, [r3, #0]
		  sum_2 += b;
 800061e:	4b68      	ldr	r3, [pc, #416]	@ (80007c0 <main+0x210>)
 8000620:	2200      	movs	r2, #0
 8000622:	5e9b      	ldrsh	r3, [r3, r2]
 8000624:	001a      	movs	r2, r3
 8000626:	4b64      	ldr	r3, [pc, #400]	@ (80007b8 <main+0x208>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	18d2      	adds	r2, r2, r3
 800062c:	4b62      	ldr	r3, [pc, #392]	@ (80007b8 <main+0x208>)
 800062e:	601a      	str	r2, [r3, #0]
	  for (uint8_t i = 0; i < SAMPLES; i++)
 8000630:	1dfb      	adds	r3, r7, #7
 8000632:	781a      	ldrb	r2, [r3, #0]
 8000634:	1dfb      	adds	r3, r7, #7
 8000636:	3201      	adds	r2, #1
 8000638:	701a      	strb	r2, [r3, #0]
 800063a:	1dfb      	adds	r3, r7, #7
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	2bff      	cmp	r3, #255	@ 0xff
 8000640:	d1d8      	bne.n	80005f4 <main+0x44>
	  }

	  average_1 = sum_1 / SAMPLES;
 8000642:	4b5c      	ldr	r3, [pc, #368]	@ (80007b4 <main+0x204>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	21ff      	movs	r1, #255	@ 0xff
 8000648:	0018      	movs	r0, r3
 800064a:	f7ff fd63 	bl	8000114 <__udivsi3>
 800064e:	0003      	movs	r3, r0
 8000650:	b29a      	uxth	r2, r3
 8000652:	4b5c      	ldr	r3, [pc, #368]	@ (80007c4 <main+0x214>)
 8000654:	801a      	strh	r2, [r3, #0]

	  average_2 = sum_2 / SAMPLES;
 8000656:	4b58      	ldr	r3, [pc, #352]	@ (80007b8 <main+0x208>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	21ff      	movs	r1, #255	@ 0xff
 800065c:	0018      	movs	r0, r3
 800065e:	f7ff fd59 	bl	8000114 <__udivsi3>
 8000662:	0003      	movs	r3, r0
 8000664:	b29a      	uxth	r2, r3
 8000666:	4b58      	ldr	r3, [pc, #352]	@ (80007c8 <main+0x218>)
 8000668:	801a      	strh	r2, [r3, #0]

	  deviation = ((average_1 - average_2));
 800066a:	4b56      	ldr	r3, [pc, #344]	@ (80007c4 <main+0x214>)
 800066c:	881a      	ldrh	r2, [r3, #0]
 800066e:	4b56      	ldr	r3, [pc, #344]	@ (80007c8 <main+0x218>)
 8000670:	881b      	ldrh	r3, [r3, #0]
 8000672:	1ad3      	subs	r3, r2, r3
 8000674:	b29b      	uxth	r3, r3
 8000676:	b21a      	sxth	r2, r3
 8000678:	4b54      	ldr	r3, [pc, #336]	@ (80007cc <main+0x21c>)
 800067a:	801a      	strh	r2, [r3, #0]

	  corrected = deviation + 4;
 800067c:	4b53      	ldr	r3, [pc, #332]	@ (80007cc <main+0x21c>)
 800067e:	2200      	movs	r2, #0
 8000680:	5e9b      	ldrsh	r3, [r3, r2]
 8000682:	b29b      	uxth	r3, r3
 8000684:	3304      	adds	r3, #4
 8000686:	b29b      	uxth	r3, r3
 8000688:	b21a      	sxth	r2, r3
 800068a:	4b51      	ldr	r3, [pc, #324]	@ (80007d0 <main+0x220>)
 800068c:	801a      	strh	r2, [r3, #0]

//	  Apply EMA filtering
	  filtered_adc = ((filtered_adc * ((1 << SMOOTHING_SHIFT) - 1)) + corrected) >> SMOOTHING_SHIFT;
 800068e:	4b51      	ldr	r3, [pc, #324]	@ (80007d4 <main+0x224>)
 8000690:	2200      	movs	r2, #0
 8000692:	5e9b      	ldrsh	r3, [r3, r2]
 8000694:	001a      	movs	r2, r3
 8000696:	0013      	movs	r3, r2
 8000698:	00db      	lsls	r3, r3, #3
 800069a:	1a9b      	subs	r3, r3, r2
 800069c:	4a4c      	ldr	r2, [pc, #304]	@ (80007d0 <main+0x220>)
 800069e:	2100      	movs	r1, #0
 80006a0:	5e52      	ldrsh	r2, [r2, r1]
 80006a2:	189b      	adds	r3, r3, r2
 80006a4:	10db      	asrs	r3, r3, #3
 80006a6:	b21a      	sxth	r2, r3
 80006a8:	4b4a      	ldr	r3, [pc, #296]	@ (80007d4 <main+0x224>)
 80006aa:	801a      	strh	r2, [r3, #0]

	  current_A = ((filtered_adc) * 790) / (4095);  // Scale to mV
 80006ac:	4b49      	ldr	r3, [pc, #292]	@ (80007d4 <main+0x224>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	5e9b      	ldrsh	r3, [r3, r2]
 80006b2:	001a      	movs	r2, r3
 80006b4:	4b48      	ldr	r3, [pc, #288]	@ (80007d8 <main+0x228>)
 80006b6:	4353      	muls	r3, r2
 80006b8:	4948      	ldr	r1, [pc, #288]	@ (80007dc <main+0x22c>)
 80006ba:	0018      	movs	r0, r3
 80006bc:	f7ff fdb4 	bl	8000228 <__divsi3>
 80006c0:	0003      	movs	r3, r0
 80006c2:	b21a      	sxth	r2, r3
 80006c4:	4b46      	ldr	r3, [pc, #280]	@ (80007e0 <main+0x230>)
 80006c6:	801a      	strh	r2, [r3, #0]
//	  digits[3] = (average_2 / 100) % 10;
//	  digits[4] = (average_2 / 10) % 10;
//	  digits[5] = average_2 % 10;
//
	  // Optional: blank last 2 digits
	  digits[0] = digits[1] = 10;  // Assuming 10 means blank pattern
 80006c8:	4b46      	ldr	r3, [pc, #280]	@ (80007e4 <main+0x234>)
 80006ca:	220a      	movs	r2, #10
 80006cc:	705a      	strb	r2, [r3, #1]
 80006ce:	4b45      	ldr	r3, [pc, #276]	@ (80007e4 <main+0x234>)
 80006d0:	785a      	ldrb	r2, [r3, #1]
 80006d2:	4b44      	ldr	r3, [pc, #272]	@ (80007e4 <main+0x234>)
 80006d4:	701a      	strb	r2, [r3, #0]

	  HAL_Delay(10);
 80006d6:	200a      	movs	r0, #10
 80006d8:	f000 fd7e 	bl	80011d8 <HAL_Delay>


	  // === Case 2: Show voltage (e.g., 3.245 V = 3245 mV) ===
	  // Comment this block when testing raw ADC value

		sum = 0;
 80006dc:	4b42      	ldr	r3, [pc, #264]	@ (80007e8 <main+0x238>)
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]

		for (uint8_t i = 0; i < SAMPLES; i++)
 80006e2:	1dbb      	adds	r3, r7, #6
 80006e4:	2200      	movs	r2, #0
 80006e6:	701a      	strb	r2, [r3, #0]
 80006e8:	e012      	b.n	8000710 <main+0x160>
		{
			adc_Value = ADC_Convert_Rank3();
 80006ea:	f7ff ff19 	bl	8000520 <ADC_Convert_Rank3>
 80006ee:	0003      	movs	r3, r0
 80006f0:	001a      	movs	r2, r3
 80006f2:	4b3e      	ldr	r3, [pc, #248]	@ (80007ec <main+0x23c>)
 80006f4:	801a      	strh	r2, [r3, #0]
			sum += adc_Value;
 80006f6:	4b3d      	ldr	r3, [pc, #244]	@ (80007ec <main+0x23c>)
 80006f8:	881b      	ldrh	r3, [r3, #0]
 80006fa:	001a      	movs	r2, r3
 80006fc:	4b3a      	ldr	r3, [pc, #232]	@ (80007e8 <main+0x238>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	18d2      	adds	r2, r2, r3
 8000702:	4b39      	ldr	r3, [pc, #228]	@ (80007e8 <main+0x238>)
 8000704:	601a      	str	r2, [r3, #0]
		for (uint8_t i = 0; i < SAMPLES; i++)
 8000706:	1dbb      	adds	r3, r7, #6
 8000708:	781a      	ldrb	r2, [r3, #0]
 800070a:	1dbb      	adds	r3, r7, #6
 800070c:	3201      	adds	r2, #1
 800070e:	701a      	strb	r2, [r3, #0]
 8000710:	1dbb      	adds	r3, r7, #6
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2bff      	cmp	r3, #255	@ 0xff
 8000716:	d1e8      	bne.n	80006ea <main+0x13a>
		}


		corrected = (average > 80) ? (average - 80) : 0;
 8000718:	4b35      	ldr	r3, [pc, #212]	@ (80007f0 <main+0x240>)
 800071a:	881b      	ldrh	r3, [r3, #0]
 800071c:	2b50      	cmp	r3, #80	@ 0x50
 800071e:	d905      	bls.n	800072c <main+0x17c>
 8000720:	4b33      	ldr	r3, [pc, #204]	@ (80007f0 <main+0x240>)
 8000722:	881b      	ldrh	r3, [r3, #0]
 8000724:	3b50      	subs	r3, #80	@ 0x50
 8000726:	b29b      	uxth	r3, r3
 8000728:	b21a      	sxth	r2, r3
 800072a:	e000      	b.n	800072e <main+0x17e>
 800072c:	2200      	movs	r2, #0
 800072e:	4b28      	ldr	r3, [pc, #160]	@ (80007d0 <main+0x220>)
 8000730:	801a      	strh	r2, [r3, #0]

	    // Apply EMA filtering
	    filtered_adc = ((filtered_adc * ((1 << SMOOTHING_SHIFT) - 1)) + corrected) >> SMOOTHING_SHIFT;
 8000732:	4b28      	ldr	r3, [pc, #160]	@ (80007d4 <main+0x224>)
 8000734:	2200      	movs	r2, #0
 8000736:	5e9b      	ldrsh	r3, [r3, r2]
 8000738:	001a      	movs	r2, r3
 800073a:	0013      	movs	r3, r2
 800073c:	00db      	lsls	r3, r3, #3
 800073e:	1a9b      	subs	r3, r3, r2
 8000740:	4a23      	ldr	r2, [pc, #140]	@ (80007d0 <main+0x220>)
 8000742:	2100      	movs	r1, #0
 8000744:	5e52      	ldrsh	r2, [r2, r1]
 8000746:	189b      	adds	r3, r3, r2
 8000748:	10db      	asrs	r3, r3, #3
 800074a:	b21a      	sxth	r2, r3
 800074c:	4b21      	ldr	r3, [pc, #132]	@ (80007d4 <main+0x224>)
 800074e:	801a      	strh	r2, [r3, #0]

		voltage_mV = ((corrected) * 1000) / (4095);  // Scale to mV
 8000750:	4b1f      	ldr	r3, [pc, #124]	@ (80007d0 <main+0x220>)
 8000752:	2200      	movs	r2, #0
 8000754:	5e9b      	ldrsh	r3, [r3, r2]
 8000756:	001a      	movs	r2, r3
 8000758:	0013      	movs	r3, r2
 800075a:	015b      	lsls	r3, r3, #5
 800075c:	1a9b      	subs	r3, r3, r2
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	189b      	adds	r3, r3, r2
 8000762:	00db      	lsls	r3, r3, #3
 8000764:	491d      	ldr	r1, [pc, #116]	@ (80007dc <main+0x22c>)
 8000766:	0018      	movs	r0, r3
 8000768:	f7ff fd5e 	bl	8000228 <__divsi3>
 800076c:	0003      	movs	r3, r0
 800076e:	b29a      	uxth	r2, r3
 8000770:	4b20      	ldr	r3, [pc, #128]	@ (80007f4 <main+0x244>)
 8000772:	801a      	strh	r2, [r3, #0]
//
////		 Optional: enable DP on digit 0 or 1
////		 In TIM callback, check seg==0 or seg==1 and enable DP accordingly
//
//		digits[0] = digits[1] = 10;  // Blank
		HAL_Delay(10);
 8000774:	200a      	movs	r0, #10
 8000776:	f000 fd2f 	bl	80011d8 <HAL_Delay>

		power = 60;
 800077a:	4b1f      	ldr	r3, [pc, #124]	@ (80007f8 <main+0x248>)
 800077c:	223c      	movs	r2, #60	@ 0x3c
 800077e:	601a      	str	r2, [r3, #0]

	  len = sprintf(uart_data, "%d\r\n", power);
 8000780:	4b1d      	ldr	r3, [pc, #116]	@ (80007f8 <main+0x248>)
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	491d      	ldr	r1, [pc, #116]	@ (80007fc <main+0x24c>)
 8000786:	4b1e      	ldr	r3, [pc, #120]	@ (8000800 <main+0x250>)
 8000788:	0018      	movs	r0, r3
 800078a:	f004 fb4d 	bl	8004e28 <siprintf>
 800078e:	0003      	movs	r3, r0
 8000790:	001a      	movs	r2, r3
 8000792:	4b1c      	ldr	r3, [pc, #112]	@ (8000804 <main+0x254>)
 8000794:	601a      	str	r2, [r3, #0]

	  HAL_UART_Transmit(&huart1, uart_data, len, HAL_MAX_DELAY);
 8000796:	4b1b      	ldr	r3, [pc, #108]	@ (8000804 <main+0x254>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	b29a      	uxth	r2, r3
 800079c:	2301      	movs	r3, #1
 800079e:	425b      	negs	r3, r3
 80007a0:	4917      	ldr	r1, [pc, #92]	@ (8000800 <main+0x250>)
 80007a2:	4819      	ldr	r0, [pc, #100]	@ (8000808 <main+0x258>)
 80007a4:	f003 fde4 	bl	8004370 <HAL_UART_Transmit>
  {
 80007a8:	e71a      	b.n	80005e0 <main+0x30>
 80007aa:	46c0      	nop			@ (mov r8, r8)
 80007ac:	200000dc 	.word	0x200000dc
 80007b0:	200001bc 	.word	0x200001bc
 80007b4:	200001d0 	.word	0x200001d0
 80007b8:	200001d4 	.word	0x200001d4
 80007bc:	200001e4 	.word	0x200001e4
 80007c0:	200001e6 	.word	0x200001e6
 80007c4:	200001da 	.word	0x200001da
 80007c8:	200001dc 	.word	0x200001dc
 80007cc:	200001e2 	.word	0x200001e2
 80007d0:	200001e0 	.word	0x200001e0
 80007d4:	200001ea 	.word	0x200001ea
 80007d8:	00000316 	.word	0x00000316
 80007dc:	00000fff 	.word	0x00000fff
 80007e0:	200001e8 	.word	0x200001e8
 80007e4:	200001c0 	.word	0x200001c0
 80007e8:	200001cc 	.word	0x200001cc
 80007ec:	200001c6 	.word	0x200001c6
 80007f0:	200001d8 	.word	0x200001d8
 80007f4:	200001de 	.word	0x200001de
 80007f8:	200001ec 	.word	0x200001ec
 80007fc:	08005778 	.word	0x08005778
 8000800:	200001f0 	.word	0x200001f0
 8000804:	20000254 	.word	0x20000254
 8000808:	20000128 	.word	0x20000128

0800080c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800080c:	b590      	push	{r4, r7, lr}
 800080e:	b093      	sub	sp, #76	@ 0x4c
 8000810:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000812:	2414      	movs	r4, #20
 8000814:	193b      	adds	r3, r7, r4
 8000816:	0018      	movs	r0, r3
 8000818:	2334      	movs	r3, #52	@ 0x34
 800081a:	001a      	movs	r2, r3
 800081c:	2100      	movs	r1, #0
 800081e:	f004 fb25 	bl	8004e6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	0018      	movs	r0, r3
 8000826:	2310      	movs	r3, #16
 8000828:	001a      	movs	r2, r3
 800082a:	2100      	movs	r1, #0
 800082c:	f004 fb1e 	bl	8004e6c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000830:	2380      	movs	r3, #128	@ 0x80
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	0018      	movs	r0, r3
 8000836:	f001 fe8d 	bl	8002554 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800083a:	193b      	adds	r3, r7, r4
 800083c:	2202      	movs	r2, #2
 800083e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000840:	193b      	adds	r3, r7, r4
 8000842:	2280      	movs	r2, #128	@ 0x80
 8000844:	0052      	lsls	r2, r2, #1
 8000846:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000848:	0021      	movs	r1, r4
 800084a:	187b      	adds	r3, r7, r1
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000850:	187b      	adds	r3, r7, r1
 8000852:	2240      	movs	r2, #64	@ 0x40
 8000854:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000856:	187b      	adds	r3, r7, r1
 8000858:	2202      	movs	r2, #2
 800085a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800085c:	187b      	adds	r3, r7, r1
 800085e:	2202      	movs	r2, #2
 8000860:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000862:	187b      	adds	r3, r7, r1
 8000864:	2200      	movs	r2, #0
 8000866:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000868:	187b      	adds	r3, r7, r1
 800086a:	2208      	movs	r2, #8
 800086c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800086e:	187b      	adds	r3, r7, r1
 8000870:	22c0      	movs	r2, #192	@ 0xc0
 8000872:	02d2      	lsls	r2, r2, #11
 8000874:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000876:	187b      	adds	r3, r7, r1
 8000878:	2280      	movs	r2, #128	@ 0x80
 800087a:	0592      	lsls	r2, r2, #22
 800087c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800087e:	187b      	adds	r3, r7, r1
 8000880:	0018      	movs	r0, r3
 8000882:	f001 feb3 	bl	80025ec <HAL_RCC_OscConfig>
 8000886:	1e03      	subs	r3, r0, #0
 8000888:	d001      	beq.n	800088e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800088a:	f000 f98f 	bl	8000bac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	2207      	movs	r2, #7
 8000892:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	2202      	movs	r2, #2
 8000898:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	22a0      	movs	r2, #160	@ 0xa0
 80008a4:	01d2      	lsls	r2, r2, #7
 80008a6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008a8:	1d3b      	adds	r3, r7, #4
 80008aa:	2102      	movs	r1, #2
 80008ac:	0018      	movs	r0, r3
 80008ae:	f002 f9ad 	bl	8002c0c <HAL_RCC_ClockConfig>
 80008b2:	1e03      	subs	r3, r0, #0
 80008b4:	d001      	beq.n	80008ba <SystemClock_Config+0xae>
  {
    Error_Handler();
 80008b6:	f000 f979 	bl	8000bac <Error_Handler>
  }
}
 80008ba:	46c0      	nop			@ (mov r8, r8)
 80008bc:	46bd      	mov	sp, r7
 80008be:	b013      	add	sp, #76	@ 0x4c
 80008c0:	bd90      	pop	{r4, r7, pc}
	...

080008c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	0018      	movs	r0, r3
 80008ce:	230c      	movs	r3, #12
 80008d0:	001a      	movs	r2, r3
 80008d2:	2100      	movs	r1, #0
 80008d4:	f004 faca 	bl	8004e6c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008d8:	4b3f      	ldr	r3, [pc, #252]	@ (80009d8 <MX_ADC1_Init+0x114>)
 80008da:	4a40      	ldr	r2, [pc, #256]	@ (80009dc <MX_ADC1_Init+0x118>)
 80008dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008de:	4b3e      	ldr	r3, [pc, #248]	@ (80009d8 <MX_ADC1_Init+0x114>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008e4:	4b3c      	ldr	r3, [pc, #240]	@ (80009d8 <MX_ADC1_Init+0x114>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008ea:	4b3b      	ldr	r3, [pc, #236]	@ (80009d8 <MX_ADC1_Init+0x114>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80008f0:	4b39      	ldr	r3, [pc, #228]	@ (80009d8 <MX_ADC1_Init+0x114>)
 80008f2:	2280      	movs	r2, #128	@ 0x80
 80008f4:	0392      	lsls	r2, r2, #14
 80008f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008f8:	4b37      	ldr	r3, [pc, #220]	@ (80009d8 <MX_ADC1_Init+0x114>)
 80008fa:	2204      	movs	r2, #4
 80008fc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008fe:	4b36      	ldr	r3, [pc, #216]	@ (80009d8 <MX_ADC1_Init+0x114>)
 8000900:	2200      	movs	r2, #0
 8000902:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000904:	4b34      	ldr	r3, [pc, #208]	@ (80009d8 <MX_ADC1_Init+0x114>)
 8000906:	2200      	movs	r2, #0
 8000908:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800090a:	4b33      	ldr	r3, [pc, #204]	@ (80009d8 <MX_ADC1_Init+0x114>)
 800090c:	2200      	movs	r2, #0
 800090e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 3;
 8000910:	4b31      	ldr	r3, [pc, #196]	@ (80009d8 <MX_ADC1_Init+0x114>)
 8000912:	2203      	movs	r2, #3
 8000914:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000916:	4b30      	ldr	r3, [pc, #192]	@ (80009d8 <MX_ADC1_Init+0x114>)
 8000918:	2220      	movs	r2, #32
 800091a:	2101      	movs	r1, #1
 800091c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800091e:	4b2e      	ldr	r3, [pc, #184]	@ (80009d8 <MX_ADC1_Init+0x114>)
 8000920:	2200      	movs	r2, #0
 8000922:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000924:	4b2c      	ldr	r3, [pc, #176]	@ (80009d8 <MX_ADC1_Init+0x114>)
 8000926:	2200      	movs	r2, #0
 8000928:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800092a:	4b2b      	ldr	r3, [pc, #172]	@ (80009d8 <MX_ADC1_Init+0x114>)
 800092c:	222c      	movs	r2, #44	@ 0x2c
 800092e:	2100      	movs	r1, #0
 8000930:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000932:	4b29      	ldr	r3, [pc, #164]	@ (80009d8 <MX_ADC1_Init+0x114>)
 8000934:	2280      	movs	r2, #128	@ 0x80
 8000936:	0152      	lsls	r2, r2, #5
 8000938:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_39CYCLES_5;
 800093a:	4b27      	ldr	r3, [pc, #156]	@ (80009d8 <MX_ADC1_Init+0x114>)
 800093c:	2205      	movs	r2, #5
 800093e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000940:	4b25      	ldr	r3, [pc, #148]	@ (80009d8 <MX_ADC1_Init+0x114>)
 8000942:	2207      	movs	r2, #7
 8000944:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000946:	4b24      	ldr	r3, [pc, #144]	@ (80009d8 <MX_ADC1_Init+0x114>)
 8000948:	223c      	movs	r2, #60	@ 0x3c
 800094a:	2100      	movs	r1, #0
 800094c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800094e:	4b22      	ldr	r3, [pc, #136]	@ (80009d8 <MX_ADC1_Init+0x114>)
 8000950:	2200      	movs	r2, #0
 8000952:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000954:	4b20      	ldr	r3, [pc, #128]	@ (80009d8 <MX_ADC1_Init+0x114>)
 8000956:	0018      	movs	r0, r3
 8000958:	f000 fdcc 	bl	80014f4 <HAL_ADC_Init>
 800095c:	1e03      	subs	r3, r0, #0
 800095e:	d001      	beq.n	8000964 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8000960:	f000 f924 	bl	8000bac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000964:	1d3b      	adds	r3, r7, #4
 8000966:	2201      	movs	r2, #1
 8000968:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	2200      	movs	r2, #0
 800096e:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000976:	1d3a      	adds	r2, r7, #4
 8000978:	4b17      	ldr	r3, [pc, #92]	@ (80009d8 <MX_ADC1_Init+0x114>)
 800097a:	0011      	movs	r1, r2
 800097c:	0018      	movs	r0, r3
 800097e:	f001 f88b 	bl	8001a98 <HAL_ADC_ConfigChannel>
 8000982:	1e03      	subs	r3, r0, #0
 8000984:	d001      	beq.n	800098a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000986:	f000 f911 	bl	8000bac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	4a14      	ldr	r2, [pc, #80]	@ (80009e0 <MX_ADC1_Init+0x11c>)
 800098e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	2204      	movs	r2, #4
 8000994:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000996:	1d3a      	adds	r2, r7, #4
 8000998:	4b0f      	ldr	r3, [pc, #60]	@ (80009d8 <MX_ADC1_Init+0x114>)
 800099a:	0011      	movs	r1, r2
 800099c:	0018      	movs	r0, r3
 800099e:	f001 f87b 	bl	8001a98 <HAL_ADC_ConfigChannel>
 80009a2:	1e03      	subs	r3, r0, #0
 80009a4:	d001      	beq.n	80009aa <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 80009a6:	f000 f901 	bl	8000bac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	4a0d      	ldr	r2, [pc, #52]	@ (80009e4 <MX_ADC1_Init+0x120>)
 80009ae:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	2208      	movs	r2, #8
 80009b4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_2;
 80009b6:	1d3b      	adds	r3, r7, #4
 80009b8:	4a0b      	ldr	r2, [pc, #44]	@ (80009e8 <MX_ADC1_Init+0x124>)
 80009ba:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009bc:	1d3a      	adds	r2, r7, #4
 80009be:	4b06      	ldr	r3, [pc, #24]	@ (80009d8 <MX_ADC1_Init+0x114>)
 80009c0:	0011      	movs	r1, r2
 80009c2:	0018      	movs	r0, r3
 80009c4:	f001 f868 	bl	8001a98 <HAL_ADC_ConfigChannel>
 80009c8:	1e03      	subs	r3, r0, #0
 80009ca:	d001      	beq.n	80009d0 <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 80009cc:	f000 f8ee 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009d0:	46c0      	nop			@ (mov r8, r8)
 80009d2:	46bd      	mov	sp, r7
 80009d4:	b004      	add	sp, #16
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000078 	.word	0x20000078
 80009dc:	40012400 	.word	0x40012400
 80009e0:	04000002 	.word	0x04000002
 80009e4:	08000004 	.word	0x08000004
 80009e8:	07ffff04 	.word	0x07ffff04

080009ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08e      	sub	sp, #56	@ 0x38
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009f2:	2328      	movs	r3, #40	@ 0x28
 80009f4:	18fb      	adds	r3, r7, r3
 80009f6:	0018      	movs	r0, r3
 80009f8:	2310      	movs	r3, #16
 80009fa:	001a      	movs	r2, r3
 80009fc:	2100      	movs	r1, #0
 80009fe:	f004 fa35 	bl	8004e6c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a02:	231c      	movs	r3, #28
 8000a04:	18fb      	adds	r3, r7, r3
 8000a06:	0018      	movs	r0, r3
 8000a08:	230c      	movs	r3, #12
 8000a0a:	001a      	movs	r2, r3
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	f004 fa2d 	bl	8004e6c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a12:	003b      	movs	r3, r7
 8000a14:	0018      	movs	r0, r3
 8000a16:	231c      	movs	r3, #28
 8000a18:	001a      	movs	r2, r3
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	f004 fa26 	bl	8004e6c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a20:	4b2e      	ldr	r3, [pc, #184]	@ (8000adc <MX_TIM3_Init+0xf0>)
 8000a22:	4a2f      	ldr	r2, [pc, #188]	@ (8000ae0 <MX_TIM3_Init+0xf4>)
 8000a24:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8000a26:	4b2d      	ldr	r3, [pc, #180]	@ (8000adc <MX_TIM3_Init+0xf0>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2c:	4b2b      	ldr	r3, [pc, #172]	@ (8000adc <MX_TIM3_Init+0xf0>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 32768;
 8000a32:	4b2a      	ldr	r3, [pc, #168]	@ (8000adc <MX_TIM3_Init+0xf0>)
 8000a34:	2280      	movs	r2, #128	@ 0x80
 8000a36:	0212      	lsls	r2, r2, #8
 8000a38:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a3a:	4b28      	ldr	r3, [pc, #160]	@ (8000adc <MX_TIM3_Init+0xf0>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a40:	4b26      	ldr	r3, [pc, #152]	@ (8000adc <MX_TIM3_Init+0xf0>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a46:	4b25      	ldr	r3, [pc, #148]	@ (8000adc <MX_TIM3_Init+0xf0>)
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f002 fbaf 	bl	80031ac <HAL_TIM_Base_Init>
 8000a4e:	1e03      	subs	r3, r0, #0
 8000a50:	d001      	beq.n	8000a56 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000a52:	f000 f8ab 	bl	8000bac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a56:	2128      	movs	r1, #40	@ 0x28
 8000a58:	187b      	adds	r3, r7, r1
 8000a5a:	2280      	movs	r2, #128	@ 0x80
 8000a5c:	0152      	lsls	r2, r2, #5
 8000a5e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a60:	187a      	adds	r2, r7, r1
 8000a62:	4b1e      	ldr	r3, [pc, #120]	@ (8000adc <MX_TIM3_Init+0xf0>)
 8000a64:	0011      	movs	r1, r2
 8000a66:	0018      	movs	r0, r3
 8000a68:	f002 fede 	bl	8003828 <HAL_TIM_ConfigClockSource>
 8000a6c:	1e03      	subs	r3, r0, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000a70:	f000 f89c 	bl	8000bac <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000a74:	4b19      	ldr	r3, [pc, #100]	@ (8000adc <MX_TIM3_Init+0xf0>)
 8000a76:	0018      	movs	r0, r3
 8000a78:	f002 fbf0 	bl	800325c <HAL_TIM_OC_Init>
 8000a7c:	1e03      	subs	r3, r0, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000a80:	f000 f894 	bl	8000bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a84:	211c      	movs	r1, #28
 8000a86:	187b      	adds	r3, r7, r1
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a8c:	187b      	adds	r3, r7, r1
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a92:	187a      	adds	r2, r7, r1
 8000a94:	4b11      	ldr	r3, [pc, #68]	@ (8000adc <MX_TIM3_Init+0xf0>)
 8000a96:	0011      	movs	r1, r2
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f003 fb99 	bl	80041d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a9e:	1e03      	subs	r3, r0, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8000aa2:	f000 f883 	bl	8000bac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000aa6:	003b      	movs	r3, r7
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000aac:	003b      	movs	r3, r7
 8000aae:	2200      	movs	r2, #0
 8000ab0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ab2:	003b      	movs	r3, r7
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ab8:	003b      	movs	r3, r7
 8000aba:	2200      	movs	r2, #0
 8000abc:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000abe:	0039      	movs	r1, r7
 8000ac0:	4b06      	ldr	r3, [pc, #24]	@ (8000adc <MX_TIM3_Init+0xf0>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f002 fe4f 	bl	8003768 <HAL_TIM_OC_ConfigChannel>
 8000aca:	1e03      	subs	r3, r0, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8000ace:	f000 f86d 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ad2:	46c0      	nop			@ (mov r8, r8)
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	b00e      	add	sp, #56	@ 0x38
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	46c0      	nop			@ (mov r8, r8)
 8000adc:	200000dc 	.word	0x200000dc
 8000ae0:	40000400 	.word	0x40000400

08000ae4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ae8:	4b23      	ldr	r3, [pc, #140]	@ (8000b78 <MX_USART1_UART_Init+0x94>)
 8000aea:	4a24      	ldr	r2, [pc, #144]	@ (8000b7c <MX_USART1_UART_Init+0x98>)
 8000aec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000aee:	4b22      	ldr	r3, [pc, #136]	@ (8000b78 <MX_USART1_UART_Init+0x94>)
 8000af0:	22e1      	movs	r2, #225	@ 0xe1
 8000af2:	0252      	lsls	r2, r2, #9
 8000af4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000af6:	4b20      	ldr	r3, [pc, #128]	@ (8000b78 <MX_USART1_UART_Init+0x94>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	@ (8000b78 <MX_USART1_UART_Init+0x94>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	@ (8000b78 <MX_USART1_UART_Init+0x94>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	@ (8000b78 <MX_USART1_UART_Init+0x94>)
 8000b0a:	220c      	movs	r2, #12
 8000b0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000b78 <MX_USART1_UART_Init+0x94>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b14:	4b18      	ldr	r3, [pc, #96]	@ (8000b78 <MX_USART1_UART_Init+0x94>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b1a:	4b17      	ldr	r3, [pc, #92]	@ (8000b78 <MX_USART1_UART_Init+0x94>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b20:	4b15      	ldr	r3, [pc, #84]	@ (8000b78 <MX_USART1_UART_Init+0x94>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b26:	4b14      	ldr	r3, [pc, #80]	@ (8000b78 <MX_USART1_UART_Init+0x94>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b2c:	4b12      	ldr	r3, [pc, #72]	@ (8000b78 <MX_USART1_UART_Init+0x94>)
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f003 fbc8 	bl	80042c4 <HAL_UART_Init>
 8000b34:	1e03      	subs	r3, r0, #0
 8000b36:	d001      	beq.n	8000b3c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b38:	f000 f838 	bl	8000bac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b78 <MX_USART1_UART_Init+0x94>)
 8000b3e:	2100      	movs	r1, #0
 8000b40:	0018      	movs	r0, r3
 8000b42:	f004 f891 	bl	8004c68 <HAL_UARTEx_SetTxFifoThreshold>
 8000b46:	1e03      	subs	r3, r0, #0
 8000b48:	d001      	beq.n	8000b4e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b4a:	f000 f82f 	bl	8000bac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b78 <MX_USART1_UART_Init+0x94>)
 8000b50:	2100      	movs	r1, #0
 8000b52:	0018      	movs	r0, r3
 8000b54:	f004 f8c8 	bl	8004ce8 <HAL_UARTEx_SetRxFifoThreshold>
 8000b58:	1e03      	subs	r3, r0, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b5c:	f000 f826 	bl	8000bac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b60:	4b05      	ldr	r3, [pc, #20]	@ (8000b78 <MX_USART1_UART_Init+0x94>)
 8000b62:	0018      	movs	r0, r3
 8000b64:	f004 f846 	bl	8004bf4 <HAL_UARTEx_DisableFifoMode>
 8000b68:	1e03      	subs	r3, r0, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b6c:	f000 f81e 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b70:	46c0      	nop			@ (mov r8, r8)
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	46c0      	nop			@ (mov r8, r8)
 8000b78:	20000128 	.word	0x20000128
 8000b7c:	40013800 	.word	0x40013800

08000b80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	4b08      	ldr	r3, [pc, #32]	@ (8000ba8 <MX_GPIO_Init+0x28>)
 8000b88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b8a:	4b07      	ldr	r3, [pc, #28]	@ (8000ba8 <MX_GPIO_Init+0x28>)
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	430a      	orrs	r2, r1
 8000b90:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b92:	4b05      	ldr	r3, [pc, #20]	@ (8000ba8 <MX_GPIO_Init+0x28>)
 8000b94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b96:	2201      	movs	r2, #1
 8000b98:	4013      	ands	r3, r2
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b9e:	46c0      	nop			@ (mov r8, r8)
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	b002      	add	sp, #8
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	46c0      	nop			@ (mov r8, r8)
 8000ba8:	40021000 	.word	0x40021000

08000bac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb0:	b672      	cpsid	i
}
 8000bb2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb4:	46c0      	nop			@ (mov r8, r8)
 8000bb6:	e7fd      	b.n	8000bb4 <Error_Handler+0x8>

08000bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000bfc <HAL_MspInit+0x44>)
 8000bc0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bfc <HAL_MspInit+0x44>)
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	641a      	str	r2, [r3, #64]	@ 0x40
 8000bca:	4b0c      	ldr	r3, [pc, #48]	@ (8000bfc <HAL_MspInit+0x44>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bce:	2201      	movs	r2, #1
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd6:	4b09      	ldr	r3, [pc, #36]	@ (8000bfc <HAL_MspInit+0x44>)
 8000bd8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000bda:	4b08      	ldr	r3, [pc, #32]	@ (8000bfc <HAL_MspInit+0x44>)
 8000bdc:	2180      	movs	r1, #128	@ 0x80
 8000bde:	0549      	lsls	r1, r1, #21
 8000be0:	430a      	orrs	r2, r1
 8000be2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000be4:	4b05      	ldr	r3, [pc, #20]	@ (8000bfc <HAL_MspInit+0x44>)
 8000be6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000be8:	2380      	movs	r3, #128	@ 0x80
 8000bea:	055b      	lsls	r3, r3, #21
 8000bec:	4013      	ands	r3, r2
 8000bee:	603b      	str	r3, [r7, #0]
 8000bf0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf2:	46c0      	nop			@ (mov r8, r8)
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	b002      	add	sp, #8
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	46c0      	nop			@ (mov r8, r8)
 8000bfc:	40021000 	.word	0x40021000

08000c00 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c00:	b590      	push	{r4, r7, lr}
 8000c02:	b091      	sub	sp, #68	@ 0x44
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	232c      	movs	r3, #44	@ 0x2c
 8000c0a:	18fb      	adds	r3, r7, r3
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	2314      	movs	r3, #20
 8000c10:	001a      	movs	r2, r3
 8000c12:	2100      	movs	r1, #0
 8000c14:	f004 f92a 	bl	8004e6c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c18:	2414      	movs	r4, #20
 8000c1a:	193b      	adds	r3, r7, r4
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	2318      	movs	r3, #24
 8000c20:	001a      	movs	r2, r3
 8000c22:	2100      	movs	r1, #0
 8000c24:	f004 f922 	bl	8004e6c <memset>
  if(hadc->Instance==ADC1)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a20      	ldr	r2, [pc, #128]	@ (8000cb0 <HAL_ADC_MspInit+0xb0>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d13a      	bne.n	8000ca8 <HAL_ADC_MspInit+0xa8>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c32:	193b      	adds	r3, r7, r4
 8000c34:	2280      	movs	r2, #128	@ 0x80
 8000c36:	01d2      	lsls	r2, r2, #7
 8000c38:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_HSI;
 8000c3a:	193b      	adds	r3, r7, r4
 8000c3c:	2280      	movs	r2, #128	@ 0x80
 8000c3e:	0612      	lsls	r2, r2, #24
 8000c40:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c42:	193b      	adds	r3, r7, r4
 8000c44:	0018      	movs	r0, r3
 8000c46:	f002 f98b 	bl	8002f60 <HAL_RCCEx_PeriphCLKConfig>
 8000c4a:	1e03      	subs	r3, r0, #0
 8000c4c:	d001      	beq.n	8000c52 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8000c4e:	f7ff ffad 	bl	8000bac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c52:	4b18      	ldr	r3, [pc, #96]	@ (8000cb4 <HAL_ADC_MspInit+0xb4>)
 8000c54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c56:	4b17      	ldr	r3, [pc, #92]	@ (8000cb4 <HAL_ADC_MspInit+0xb4>)
 8000c58:	2180      	movs	r1, #128	@ 0x80
 8000c5a:	0349      	lsls	r1, r1, #13
 8000c5c:	430a      	orrs	r2, r1
 8000c5e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000c60:	4b14      	ldr	r3, [pc, #80]	@ (8000cb4 <HAL_ADC_MspInit+0xb4>)
 8000c62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c64:	2380      	movs	r3, #128	@ 0x80
 8000c66:	035b      	lsls	r3, r3, #13
 8000c68:	4013      	ands	r3, r2
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6e:	4b11      	ldr	r3, [pc, #68]	@ (8000cb4 <HAL_ADC_MspInit+0xb4>)
 8000c70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c72:	4b10      	ldr	r3, [pc, #64]	@ (8000cb4 <HAL_ADC_MspInit+0xb4>)
 8000c74:	2101      	movs	r1, #1
 8000c76:	430a      	orrs	r2, r1
 8000c78:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb4 <HAL_ADC_MspInit+0xb4>)
 8000c7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c7e:	2201      	movs	r2, #1
 8000c80:	4013      	ands	r3, r2
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000c86:	212c      	movs	r1, #44	@ 0x2c
 8000c88:	187b      	adds	r3, r7, r1
 8000c8a:	2207      	movs	r2, #7
 8000c8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c8e:	187b      	adds	r3, r7, r1
 8000c90:	2203      	movs	r2, #3
 8000c92:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	187b      	adds	r3, r7, r1
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9a:	187a      	adds	r2, r7, r1
 8000c9c:	23a0      	movs	r3, #160	@ 0xa0
 8000c9e:	05db      	lsls	r3, r3, #23
 8000ca0:	0011      	movs	r1, r2
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	f001 fad4 	bl	8002250 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000ca8:	46c0      	nop			@ (mov r8, r8)
 8000caa:	46bd      	mov	sp, r7
 8000cac:	b011      	add	sp, #68	@ 0x44
 8000cae:	bd90      	pop	{r4, r7, pc}
 8000cb0:	40012400 	.word	0x40012400
 8000cb4:	40021000 	.word	0x40021000

08000cb8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a0d      	ldr	r2, [pc, #52]	@ (8000cfc <HAL_TIM_Base_MspInit+0x44>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d113      	bne.n	8000cf2 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cca:	4b0d      	ldr	r3, [pc, #52]	@ (8000d00 <HAL_TIM_Base_MspInit+0x48>)
 8000ccc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000cce:	4b0c      	ldr	r3, [pc, #48]	@ (8000d00 <HAL_TIM_Base_MspInit+0x48>)
 8000cd0:	2102      	movs	r1, #2
 8000cd2:	430a      	orrs	r2, r1
 8000cd4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8000d00 <HAL_TIM_Base_MspInit+0x48>)
 8000cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000cda:	2202      	movs	r2, #2
 8000cdc:	4013      	ands	r3, r2
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2010      	movs	r0, #16
 8000ce8:	f001 fa80 	bl	80021ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000cec:	2010      	movs	r0, #16
 8000cee:	f001 fa92 	bl	8002216 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000cf2:	46c0      	nop			@ (mov r8, r8)
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	b004      	add	sp, #16
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	46c0      	nop			@ (mov r8, r8)
 8000cfc:	40000400 	.word	0x40000400
 8000d00:	40021000 	.word	0x40021000

08000d04 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d04:	b590      	push	{r4, r7, lr}
 8000d06:	b091      	sub	sp, #68	@ 0x44
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	232c      	movs	r3, #44	@ 0x2c
 8000d0e:	18fb      	adds	r3, r7, r3
 8000d10:	0018      	movs	r0, r3
 8000d12:	2314      	movs	r3, #20
 8000d14:	001a      	movs	r2, r3
 8000d16:	2100      	movs	r1, #0
 8000d18:	f004 f8a8 	bl	8004e6c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d1c:	2414      	movs	r4, #20
 8000d1e:	193b      	adds	r3, r7, r4
 8000d20:	0018      	movs	r0, r3
 8000d22:	2318      	movs	r3, #24
 8000d24:	001a      	movs	r2, r3
 8000d26:	2100      	movs	r1, #0
 8000d28:	f004 f8a0 	bl	8004e6c <memset>
  if(huart->Instance==USART1)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a23      	ldr	r2, [pc, #140]	@ (8000dc0 <HAL_UART_MspInit+0xbc>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d13f      	bne.n	8000db6 <HAL_UART_MspInit+0xb2>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d36:	193b      	adds	r3, r7, r4
 8000d38:	2201      	movs	r2, #1
 8000d3a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000d3c:	193b      	adds	r3, r7, r4
 8000d3e:	2200      	movs	r2, #0
 8000d40:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d42:	193b      	adds	r3, r7, r4
 8000d44:	0018      	movs	r0, r3
 8000d46:	f002 f90b 	bl	8002f60 <HAL_RCCEx_PeriphCLKConfig>
 8000d4a:	1e03      	subs	r3, r0, #0
 8000d4c:	d001      	beq.n	8000d52 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d4e:	f7ff ff2d 	bl	8000bac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d52:	4b1c      	ldr	r3, [pc, #112]	@ (8000dc4 <HAL_UART_MspInit+0xc0>)
 8000d54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d56:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc4 <HAL_UART_MspInit+0xc0>)
 8000d58:	2180      	movs	r1, #128	@ 0x80
 8000d5a:	01c9      	lsls	r1, r1, #7
 8000d5c:	430a      	orrs	r2, r1
 8000d5e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d60:	4b18      	ldr	r3, [pc, #96]	@ (8000dc4 <HAL_UART_MspInit+0xc0>)
 8000d62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d64:	2380      	movs	r3, #128	@ 0x80
 8000d66:	01db      	lsls	r3, r3, #7
 8000d68:	4013      	ands	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6e:	4b15      	ldr	r3, [pc, #84]	@ (8000dc4 <HAL_UART_MspInit+0xc0>)
 8000d70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d72:	4b14      	ldr	r3, [pc, #80]	@ (8000dc4 <HAL_UART_MspInit+0xc0>)
 8000d74:	2101      	movs	r1, #1
 8000d76:	430a      	orrs	r2, r1
 8000d78:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d7a:	4b12      	ldr	r3, [pc, #72]	@ (8000dc4 <HAL_UART_MspInit+0xc0>)
 8000d7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d7e:	2201      	movs	r2, #1
 8000d80:	4013      	ands	r3, r2
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d86:	212c      	movs	r1, #44	@ 0x2c
 8000d88:	187b      	adds	r3, r7, r1
 8000d8a:	22c0      	movs	r2, #192	@ 0xc0
 8000d8c:	00d2      	lsls	r2, r2, #3
 8000d8e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d90:	187b      	adds	r3, r7, r1
 8000d92:	2202      	movs	r2, #2
 8000d94:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	187b      	adds	r3, r7, r1
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9c:	187b      	adds	r3, r7, r1
 8000d9e:	2200      	movs	r2, #0
 8000da0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000da2:	187b      	adds	r3, r7, r1
 8000da4:	2201      	movs	r2, #1
 8000da6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da8:	187a      	adds	r2, r7, r1
 8000daa:	23a0      	movs	r3, #160	@ 0xa0
 8000dac:	05db      	lsls	r3, r3, #23
 8000dae:	0011      	movs	r1, r2
 8000db0:	0018      	movs	r0, r3
 8000db2:	f001 fa4d 	bl	8002250 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000db6:	46c0      	nop			@ (mov r8, r8)
 8000db8:	46bd      	mov	sp, r7
 8000dba:	b011      	add	sp, #68	@ 0x44
 8000dbc:	bd90      	pop	{r4, r7, pc}
 8000dbe:	46c0      	nop			@ (mov r8, r8)
 8000dc0:	40013800 	.word	0x40013800
 8000dc4:	40021000 	.word	0x40021000

08000dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dcc:	46c0      	nop			@ (mov r8, r8)
 8000dce:	e7fd      	b.n	8000dcc <NMI_Handler+0x4>

08000dd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd4:	46c0      	nop			@ (mov r8, r8)
 8000dd6:	e7fd      	b.n	8000dd4 <HardFault_Handler+0x4>

08000dd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ddc:	46c0      	nop			@ (mov r8, r8)
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000de6:	46c0      	nop			@ (mov r8, r8)
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df0:	f000 f9d6 	bl	80011a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df4:	46c0      	nop			@ (mov r8, r8)
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
	...

08000dfc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000dfc:	b590      	push	{r4, r7, lr}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000e02:	4b79      	ldr	r3, [pc, #484]	@ (8000fe8 <TIM3_IRQHandler+0x1ec>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	2108      	movs	r1, #8
 8000e08:	0018      	movs	r0, r3
 8000e0a:	f001 fb85 	bl	8002518 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000e0e:	4b76      	ldr	r3, [pc, #472]	@ (8000fe8 <TIM3_IRQHandler+0x1ec>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	2110      	movs	r1, #16
 8000e14:	0018      	movs	r0, r3
 8000e16:	f001 fb7f 	bl	8002518 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000e1a:	4b73      	ldr	r3, [pc, #460]	@ (8000fe8 <TIM3_IRQHandler+0x1ec>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	2120      	movs	r1, #32
 8000e20:	0018      	movs	r0, r3
 8000e22:	f001 fb79 	bl	8002518 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000e26:	4b70      	ldr	r3, [pc, #448]	@ (8000fe8 <TIM3_IRQHandler+0x1ec>)
 8000e28:	2201      	movs	r2, #1
 8000e2a:	2140      	movs	r1, #64	@ 0x40
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f001 fb73 	bl	8002518 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000e32:	4b6d      	ldr	r3, [pc, #436]	@ (8000fe8 <TIM3_IRQHandler+0x1ec>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	2180      	movs	r1, #128	@ 0x80
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f001 fb6d 	bl	8002518 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000e3e:	2380      	movs	r3, #128	@ 0x80
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	4869      	ldr	r0, [pc, #420]	@ (8000fe8 <TIM3_IRQHandler+0x1ec>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	0019      	movs	r1, r3
 8000e48:	f001 fb66 	bl	8002518 <HAL_GPIO_WritePin>

	// === Get pattern for current digit ===
	uint8_t val = digits[seg] % 10;  // Avoid invalid index
 8000e4c:	4b67      	ldr	r3, [pc, #412]	@ (8000fec <TIM3_IRQHandler+0x1f0>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	001a      	movs	r2, r3
 8000e52:	4b67      	ldr	r3, [pc, #412]	@ (8000ff0 <TIM3_IRQHandler+0x1f4>)
 8000e54:	5c9b      	ldrb	r3, [r3, r2]
 8000e56:	1dfc      	adds	r4, r7, #7
 8000e58:	210a      	movs	r1, #10
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	f7ff f9e0 	bl	8000220 <__aeabi_uidivmod>
 8000e60:	000b      	movs	r3, r1
 8000e62:	7023      	strb	r3, [r4, #0]
	uint8_t pattern = Segment_Patterns[val];
 8000e64:	1dfb      	adds	r3, r7, #7
 8000e66:	781a      	ldrb	r2, [r3, #0]
 8000e68:	1dbb      	adds	r3, r7, #6
 8000e6a:	4962      	ldr	r1, [pc, #392]	@ (8000ff4 <TIM3_IRQHandler+0x1f8>)
 8000e6c:	5c8a      	ldrb	r2, [r1, r2]
 8000e6e:	701a      	strb	r2, [r3, #0]

	// === Set segments A-G and DP ===
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, (pattern & 0x40) ? GPIO_PIN_RESET : GPIO_PIN_SET); // A
 8000e70:	1dbb      	adds	r3, r7, #6
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2240      	movs	r2, #64	@ 0x40
 8000e76:	4013      	ands	r3, r2
 8000e78:	425a      	negs	r2, r3
 8000e7a:	4153      	adcs	r3, r2
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	001a      	movs	r2, r3
 8000e80:	23a0      	movs	r3, #160	@ 0xa0
 8000e82:	05db      	lsls	r3, r3, #23
 8000e84:	2101      	movs	r1, #1
 8000e86:	0018      	movs	r0, r3
 8000e88:	f001 fb46 	bl	8002518 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, (pattern & 0x20) ? GPIO_PIN_RESET : GPIO_PIN_SET); // B
 8000e8c:	1dbb      	adds	r3, r7, #6
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	2220      	movs	r2, #32
 8000e92:	4013      	ands	r3, r2
 8000e94:	425a      	negs	r2, r3
 8000e96:	4153      	adcs	r3, r2
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	001a      	movs	r2, r3
 8000e9c:	23a0      	movs	r3, #160	@ 0xa0
 8000e9e:	05db      	lsls	r3, r3, #23
 8000ea0:	2102      	movs	r1, #2
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	f001 fb38 	bl	8002518 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, (pattern & 0x10) ? GPIO_PIN_RESET : GPIO_PIN_SET); // C
 8000ea8:	1dbb      	adds	r3, r7, #6
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2210      	movs	r2, #16
 8000eae:	4013      	ands	r3, r2
 8000eb0:	425a      	negs	r2, r3
 8000eb2:	4153      	adcs	r3, r2
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	001a      	movs	r2, r3
 8000eb8:	23a0      	movs	r3, #160	@ 0xa0
 8000eba:	05db      	lsls	r3, r3, #23
 8000ebc:	2104      	movs	r1, #4
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	f001 fb2a 	bl	8002518 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, (pattern & 0x08) ? GPIO_PIN_RESET : GPIO_PIN_SET); // D
 8000ec4:	1dbb      	adds	r3, r7, #6
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	2208      	movs	r2, #8
 8000eca:	4013      	ands	r3, r2
 8000ecc:	425a      	negs	r2, r3
 8000ece:	4153      	adcs	r3, r2
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	001a      	movs	r2, r3
 8000ed4:	23a0      	movs	r3, #160	@ 0xa0
 8000ed6:	05db      	lsls	r3, r3, #23
 8000ed8:	2108      	movs	r1, #8
 8000eda:	0018      	movs	r0, r3
 8000edc:	f001 fb1c 	bl	8002518 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, (pattern & 0x04) ? GPIO_PIN_RESET : GPIO_PIN_SET); // E
 8000ee0:	1dbb      	adds	r3, r7, #6
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2204      	movs	r2, #4
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	425a      	negs	r2, r3
 8000eea:	4153      	adcs	r3, r2
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	001a      	movs	r2, r3
 8000ef0:	23a0      	movs	r3, #160	@ 0xa0
 8000ef2:	05db      	lsls	r3, r3, #23
 8000ef4:	2110      	movs	r1, #16
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f001 fb0e 	bl	8002518 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, (pattern & 0x02) ? GPIO_PIN_RESET : GPIO_PIN_SET); // F
 8000efc:	1dbb      	adds	r3, r7, #6
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2202      	movs	r2, #2
 8000f02:	4013      	ands	r3, r2
 8000f04:	425a      	negs	r2, r3
 8000f06:	4153      	adcs	r3, r2
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	001a      	movs	r2, r3
 8000f0c:	23a0      	movs	r3, #160	@ 0xa0
 8000f0e:	05db      	lsls	r3, r3, #23
 8000f10:	2120      	movs	r1, #32
 8000f12:	0018      	movs	r0, r3
 8000f14:	f001 fb00 	bl	8002518 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, (pattern & 0x01) ? GPIO_PIN_RESET : GPIO_PIN_SET); // G
 8000f18:	1dbb      	adds	r3, r7, #6
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	4013      	ands	r3, r2
 8000f20:	425a      	negs	r2, r3
 8000f22:	4153      	adcs	r3, r2
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	001a      	movs	r2, r3
 8000f28:	23a0      	movs	r3, #160	@ 0xa0
 8000f2a:	05db      	lsls	r3, r3, #23
 8000f2c:	2140      	movs	r1, #64	@ 0x40
 8000f2e:	0018      	movs	r0, r3
 8000f30:	f001 faf2 	bl	8002518 <HAL_GPIO_WritePin>

//	Handle Dot Point (DP) on PA7
    if (seg == 0)
 8000f34:	4b2d      	ldr	r3, [pc, #180]	@ (8000fec <TIM3_IRQHandler+0x1f0>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d107      	bne.n	8000f4c <TIM3_IRQHandler+0x150>
    {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);  // DP ON
 8000f3c:	23a0      	movs	r3, #160	@ 0xa0
 8000f3e:	05db      	lsls	r3, r3, #23
 8000f40:	2201      	movs	r2, #1
 8000f42:	2180      	movs	r1, #128	@ 0x80
 8000f44:	0018      	movs	r0, r3
 8000f46:	f001 fae7 	bl	8002518 <HAL_GPIO_WritePin>
 8000f4a:	e006      	b.n	8000f5a <TIM3_IRQHandler+0x15e>
    }
    else
    {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);    // DP OFF otherwise
 8000f4c:	23a0      	movs	r3, #160	@ 0xa0
 8000f4e:	05db      	lsls	r3, r3, #23
 8000f50:	2200      	movs	r2, #0
 8000f52:	2180      	movs	r1, #128	@ 0x80
 8000f54:	0018      	movs	r0, r3
 8000f56:	f001 fadf 	bl	8002518 <HAL_GPIO_WritePin>
    }

	// === Enable current digit (active-low) ===
	switch (seg)
 8000f5a:	4b24      	ldr	r3, [pc, #144]	@ (8000fec <TIM3_IRQHandler+0x1f0>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	2b05      	cmp	r3, #5
 8000f60:	d82f      	bhi.n	8000fc2 <TIM3_IRQHandler+0x1c6>
 8000f62:	009a      	lsls	r2, r3, #2
 8000f64:	4b24      	ldr	r3, [pc, #144]	@ (8000ff8 <TIM3_IRQHandler+0x1fc>)
 8000f66:	18d3      	adds	r3, r2, r3
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	469f      	mov	pc, r3
	{
		case 0: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); break;
 8000f6c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fe8 <TIM3_IRQHandler+0x1ec>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2108      	movs	r1, #8
 8000f72:	0018      	movs	r0, r3
 8000f74:	f001 fad0 	bl	8002518 <HAL_GPIO_WritePin>
 8000f78:	e023      	b.n	8000fc2 <TIM3_IRQHandler+0x1c6>
		case 1: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); break;
 8000f7a:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe8 <TIM3_IRQHandler+0x1ec>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2110      	movs	r1, #16
 8000f80:	0018      	movs	r0, r3
 8000f82:	f001 fac9 	bl	8002518 <HAL_GPIO_WritePin>
 8000f86:	e01c      	b.n	8000fc2 <TIM3_IRQHandler+0x1c6>
		case 2: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); break;
 8000f88:	4b17      	ldr	r3, [pc, #92]	@ (8000fe8 <TIM3_IRQHandler+0x1ec>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2120      	movs	r1, #32
 8000f8e:	0018      	movs	r0, r3
 8000f90:	f001 fac2 	bl	8002518 <HAL_GPIO_WritePin>
 8000f94:	e015      	b.n	8000fc2 <TIM3_IRQHandler+0x1c6>
		case 3: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); break;
 8000f96:	4b14      	ldr	r3, [pc, #80]	@ (8000fe8 <TIM3_IRQHandler+0x1ec>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2140      	movs	r1, #64	@ 0x40
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	f001 fabb 	bl	8002518 <HAL_GPIO_WritePin>
 8000fa2:	e00e      	b.n	8000fc2 <TIM3_IRQHandler+0x1c6>
		case 4: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); break;
 8000fa4:	4b10      	ldr	r3, [pc, #64]	@ (8000fe8 <TIM3_IRQHandler+0x1ec>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2180      	movs	r1, #128	@ 0x80
 8000faa:	0018      	movs	r0, r3
 8000fac:	f001 fab4 	bl	8002518 <HAL_GPIO_WritePin>
 8000fb0:	e007      	b.n	8000fc2 <TIM3_IRQHandler+0x1c6>
		case 5: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET); break;
 8000fb2:	2380      	movs	r3, #128	@ 0x80
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	480c      	ldr	r0, [pc, #48]	@ (8000fe8 <TIM3_IRQHandler+0x1ec>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	0019      	movs	r1, r3
 8000fbc:	f001 faac 	bl	8002518 <HAL_GPIO_WritePin>
 8000fc0:	46c0      	nop			@ (mov r8, r8)
	}

	// === Advance to next digit ===
	seg = (seg + 1) % 6;
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000fec <TIM3_IRQHandler+0x1f0>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	2106      	movs	r1, #6
 8000fca:	0018      	movs	r0, r3
 8000fcc:	f7ff fa12 	bl	80003f4 <__aeabi_idivmod>
 8000fd0:	000b      	movs	r3, r1
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	4b05      	ldr	r3, [pc, #20]	@ (8000fec <TIM3_IRQHandler+0x1f0>)
 8000fd6:	701a      	strb	r2, [r3, #0]

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000fd8:	4b08      	ldr	r3, [pc, #32]	@ (8000ffc <TIM3_IRQHandler+0x200>)
 8000fda:	0018      	movs	r0, r3
 8000fdc:	f002 fabc 	bl	8003558 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000fe0:	46c0      	nop			@ (mov r8, r8)
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	b003      	add	sp, #12
 8000fe6:	bd90      	pop	{r4, r7, pc}
 8000fe8:	50000400 	.word	0x50000400
 8000fec:	20000258 	.word	0x20000258
 8000ff0:	200001c0 	.word	0x200001c0
 8000ff4:	08005780 	.word	0x08005780
 8000ff8:	0800578c 	.word	0x0800578c
 8000ffc:	200000dc 	.word	0x200000dc

08001000 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001008:	4a14      	ldr	r2, [pc, #80]	@ (800105c <_sbrk+0x5c>)
 800100a:	4b15      	ldr	r3, [pc, #84]	@ (8001060 <_sbrk+0x60>)
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001014:	4b13      	ldr	r3, [pc, #76]	@ (8001064 <_sbrk+0x64>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d102      	bne.n	8001022 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800101c:	4b11      	ldr	r3, [pc, #68]	@ (8001064 <_sbrk+0x64>)
 800101e:	4a12      	ldr	r2, [pc, #72]	@ (8001068 <_sbrk+0x68>)
 8001020:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001022:	4b10      	ldr	r3, [pc, #64]	@ (8001064 <_sbrk+0x64>)
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	18d3      	adds	r3, r2, r3
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	429a      	cmp	r2, r3
 800102e:	d207      	bcs.n	8001040 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001030:	f003 ff24 	bl	8004e7c <__errno>
 8001034:	0003      	movs	r3, r0
 8001036:	220c      	movs	r2, #12
 8001038:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800103a:	2301      	movs	r3, #1
 800103c:	425b      	negs	r3, r3
 800103e:	e009      	b.n	8001054 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001040:	4b08      	ldr	r3, [pc, #32]	@ (8001064 <_sbrk+0x64>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001046:	4b07      	ldr	r3, [pc, #28]	@ (8001064 <_sbrk+0x64>)
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	18d2      	adds	r2, r2, r3
 800104e:	4b05      	ldr	r3, [pc, #20]	@ (8001064 <_sbrk+0x64>)
 8001050:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001052:	68fb      	ldr	r3, [r7, #12]
}
 8001054:	0018      	movs	r0, r3
 8001056:	46bd      	mov	sp, r7
 8001058:	b006      	add	sp, #24
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20002000 	.word	0x20002000
 8001060:	00000400 	.word	0x00000400
 8001064:	2000025c 	.word	0x2000025c
 8001068:	200003b0 	.word	0x200003b0

0800106c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001070:	46c0      	nop			@ (mov r8, r8)
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001078:	480d      	ldr	r0, [pc, #52]	@ (80010b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800107a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800107c:	f7ff fff6 	bl	800106c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001080:	480c      	ldr	r0, [pc, #48]	@ (80010b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001082:	490d      	ldr	r1, [pc, #52]	@ (80010b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001084:	4a0d      	ldr	r2, [pc, #52]	@ (80010bc <LoopForever+0xe>)
  movs r3, #0
 8001086:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001088:	e002      	b.n	8001090 <LoopCopyDataInit>

0800108a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800108c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800108e:	3304      	adds	r3, #4

08001090 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001090:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001092:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001094:	d3f9      	bcc.n	800108a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001096:	4a0a      	ldr	r2, [pc, #40]	@ (80010c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001098:	4c0a      	ldr	r4, [pc, #40]	@ (80010c4 <LoopForever+0x16>)
  movs r3, #0
 800109a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800109c:	e001      	b.n	80010a2 <LoopFillZerobss>

0800109e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800109e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a0:	3204      	adds	r2, #4

080010a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a4:	d3fb      	bcc.n	800109e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010a6:	f003 feef 	bl	8004e88 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80010aa:	f7ff fa81 	bl	80005b0 <main>

080010ae <LoopForever>:

LoopForever:
  b LoopForever
 80010ae:	e7fe      	b.n	80010ae <LoopForever>
  ldr   r0, =_estack
 80010b0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80010b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80010bc:	080058bc 	.word	0x080058bc
  ldr r2, =_sbss
 80010c0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80010c4:	200003ac 	.word	0x200003ac

080010c8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010c8:	e7fe      	b.n	80010c8 <ADC1_IRQHandler>
	...

080010cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010d2:	1dfb      	adds	r3, r7, #7
 80010d4:	2200      	movs	r2, #0
 80010d6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001108 <HAL_Init+0x3c>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001108 <HAL_Init+0x3c>)
 80010de:	2180      	movs	r1, #128	@ 0x80
 80010e0:	0049      	lsls	r1, r1, #1
 80010e2:	430a      	orrs	r2, r1
 80010e4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010e6:	2003      	movs	r0, #3
 80010e8:	f000 f810 	bl	800110c <HAL_InitTick>
 80010ec:	1e03      	subs	r3, r0, #0
 80010ee:	d003      	beq.n	80010f8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80010f0:	1dfb      	adds	r3, r7, #7
 80010f2:	2201      	movs	r2, #1
 80010f4:	701a      	strb	r2, [r3, #0]
 80010f6:	e001      	b.n	80010fc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80010f8:	f7ff fd5e 	bl	8000bb8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010fc:	1dfb      	adds	r3, r7, #7
 80010fe:	781b      	ldrb	r3, [r3, #0]
}
 8001100:	0018      	movs	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	b002      	add	sp, #8
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40022000 	.word	0x40022000

0800110c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800110c:	b590      	push	{r4, r7, lr}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001114:	230f      	movs	r3, #15
 8001116:	18fb      	adds	r3, r7, r3
 8001118:	2200      	movs	r2, #0
 800111a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800111c:	4b1d      	ldr	r3, [pc, #116]	@ (8001194 <HAL_InitTick+0x88>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d02b      	beq.n	800117c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001124:	4b1c      	ldr	r3, [pc, #112]	@ (8001198 <HAL_InitTick+0x8c>)
 8001126:	681c      	ldr	r4, [r3, #0]
 8001128:	4b1a      	ldr	r3, [pc, #104]	@ (8001194 <HAL_InitTick+0x88>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	0019      	movs	r1, r3
 800112e:	23fa      	movs	r3, #250	@ 0xfa
 8001130:	0098      	lsls	r0, r3, #2
 8001132:	f7fe ffef 	bl	8000114 <__udivsi3>
 8001136:	0003      	movs	r3, r0
 8001138:	0019      	movs	r1, r3
 800113a:	0020      	movs	r0, r4
 800113c:	f7fe ffea 	bl	8000114 <__udivsi3>
 8001140:	0003      	movs	r3, r0
 8001142:	0018      	movs	r0, r3
 8001144:	f001 f877 	bl	8002236 <HAL_SYSTICK_Config>
 8001148:	1e03      	subs	r3, r0, #0
 800114a:	d112      	bne.n	8001172 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2b03      	cmp	r3, #3
 8001150:	d80a      	bhi.n	8001168 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001152:	6879      	ldr	r1, [r7, #4]
 8001154:	2301      	movs	r3, #1
 8001156:	425b      	negs	r3, r3
 8001158:	2200      	movs	r2, #0
 800115a:	0018      	movs	r0, r3
 800115c:	f001 f846 	bl	80021ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001160:	4b0e      	ldr	r3, [pc, #56]	@ (800119c <HAL_InitTick+0x90>)
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	e00d      	b.n	8001184 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001168:	230f      	movs	r3, #15
 800116a:	18fb      	adds	r3, r7, r3
 800116c:	2201      	movs	r2, #1
 800116e:	701a      	strb	r2, [r3, #0]
 8001170:	e008      	b.n	8001184 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001172:	230f      	movs	r3, #15
 8001174:	18fb      	adds	r3, r7, r3
 8001176:	2201      	movs	r2, #1
 8001178:	701a      	strb	r2, [r3, #0]
 800117a:	e003      	b.n	8001184 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800117c:	230f      	movs	r3, #15
 800117e:	18fb      	adds	r3, r7, r3
 8001180:	2201      	movs	r2, #1
 8001182:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001184:	230f      	movs	r3, #15
 8001186:	18fb      	adds	r3, r7, r3
 8001188:	781b      	ldrb	r3, [r3, #0]
}
 800118a:	0018      	movs	r0, r3
 800118c:	46bd      	mov	sp, r7
 800118e:	b005      	add	sp, #20
 8001190:	bd90      	pop	{r4, r7, pc}
 8001192:	46c0      	nop			@ (mov r8, r8)
 8001194:	20000008 	.word	0x20000008
 8001198:	20000000 	.word	0x20000000
 800119c:	20000004 	.word	0x20000004

080011a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011a4:	4b05      	ldr	r3, [pc, #20]	@ (80011bc <HAL_IncTick+0x1c>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	001a      	movs	r2, r3
 80011aa:	4b05      	ldr	r3, [pc, #20]	@ (80011c0 <HAL_IncTick+0x20>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	18d2      	adds	r2, r2, r3
 80011b0:	4b03      	ldr	r3, [pc, #12]	@ (80011c0 <HAL_IncTick+0x20>)
 80011b2:	601a      	str	r2, [r3, #0]
}
 80011b4:	46c0      	nop			@ (mov r8, r8)
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	46c0      	nop			@ (mov r8, r8)
 80011bc:	20000008 	.word	0x20000008
 80011c0:	20000260 	.word	0x20000260

080011c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  return uwTick;
 80011c8:	4b02      	ldr	r3, [pc, #8]	@ (80011d4 <HAL_GetTick+0x10>)
 80011ca:	681b      	ldr	r3, [r3, #0]
}
 80011cc:	0018      	movs	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	46c0      	nop			@ (mov r8, r8)
 80011d4:	20000260 	.word	0x20000260

080011d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011e0:	f7ff fff0 	bl	80011c4 <HAL_GetTick>
 80011e4:	0003      	movs	r3, r0
 80011e6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	3301      	adds	r3, #1
 80011f0:	d005      	beq.n	80011fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011f2:	4b0a      	ldr	r3, [pc, #40]	@ (800121c <HAL_Delay+0x44>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	001a      	movs	r2, r3
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	189b      	adds	r3, r3, r2
 80011fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011fe:	46c0      	nop			@ (mov r8, r8)
 8001200:	f7ff ffe0 	bl	80011c4 <HAL_GetTick>
 8001204:	0002      	movs	r2, r0
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	429a      	cmp	r2, r3
 800120e:	d8f7      	bhi.n	8001200 <HAL_Delay+0x28>
  {
  }
}
 8001210:	46c0      	nop			@ (mov r8, r8)
 8001212:	46c0      	nop			@ (mov r8, r8)
 8001214:	46bd      	mov	sp, r7
 8001216:	b004      	add	sp, #16
 8001218:	bd80      	pop	{r7, pc}
 800121a:	46c0      	nop			@ (mov r8, r8)
 800121c:	20000008 	.word	0x20000008

08001220 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a05      	ldr	r2, [pc, #20]	@ (8001244 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001230:	401a      	ands	r2, r3
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	431a      	orrs	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	601a      	str	r2, [r3, #0]
}
 800123a:	46c0      	nop			@ (mov r8, r8)
 800123c:	46bd      	mov	sp, r7
 800123e:	b002      	add	sp, #8
 8001240:	bd80      	pop	{r7, pc}
 8001242:	46c0      	nop			@ (mov r8, r8)
 8001244:	fe3fffff 	.word	0xfe3fffff

08001248 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	23e0      	movs	r3, #224	@ 0xe0
 8001256:	045b      	lsls	r3, r3, #17
 8001258:	4013      	ands	r3, r2
}
 800125a:	0018      	movs	r0, r3
 800125c:	46bd      	mov	sp, r7
 800125e:	b002      	add	sp, #8
 8001260:	bd80      	pop	{r7, pc}

08001262 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b084      	sub	sp, #16
 8001266:	af00      	add	r7, sp, #0
 8001268:	60f8      	str	r0, [r7, #12]
 800126a:	60b9      	str	r1, [r7, #8]
 800126c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	695b      	ldr	r3, [r3, #20]
 8001272:	68ba      	ldr	r2, [r7, #8]
 8001274:	2104      	movs	r1, #4
 8001276:	400a      	ands	r2, r1
 8001278:	2107      	movs	r1, #7
 800127a:	4091      	lsls	r1, r2
 800127c:	000a      	movs	r2, r1
 800127e:	43d2      	mvns	r2, r2
 8001280:	401a      	ands	r2, r3
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	2104      	movs	r1, #4
 8001286:	400b      	ands	r3, r1
 8001288:	6879      	ldr	r1, [r7, #4]
 800128a:	4099      	lsls	r1, r3
 800128c:	000b      	movs	r3, r1
 800128e:	431a      	orrs	r2, r3
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001294:	46c0      	nop			@ (mov r8, r8)
 8001296:	46bd      	mov	sp, r7
 8001298:	b004      	add	sp, #16
 800129a:	bd80      	pop	{r7, pc}

0800129c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	683a      	ldr	r2, [r7, #0]
 80012ac:	2104      	movs	r1, #4
 80012ae:	400a      	ands	r2, r1
 80012b0:	2107      	movs	r1, #7
 80012b2:	4091      	lsls	r1, r2
 80012b4:	000a      	movs	r2, r1
 80012b6:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	2104      	movs	r1, #4
 80012bc:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80012be:	40da      	lsrs	r2, r3
 80012c0:	0013      	movs	r3, r2
}
 80012c2:	0018      	movs	r0, r3
 80012c4:	46bd      	mov	sp, r7
 80012c6:	b002      	add	sp, #8
 80012c8:	bd80      	pop	{r7, pc}

080012ca <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	68da      	ldr	r2, [r3, #12]
 80012d6:	23c0      	movs	r3, #192	@ 0xc0
 80012d8:	011b      	lsls	r3, r3, #4
 80012da:	4013      	ands	r3, r2
 80012dc:	d101      	bne.n	80012e2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80012de:	2301      	movs	r3, #1
 80012e0:	e000      	b.n	80012e4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80012e2:	2300      	movs	r3, #0
}
 80012e4:	0018      	movs	r0, r3
 80012e6:	46bd      	mov	sp, r7
 80012e8:	b002      	add	sp, #8
 80012ea:	bd80      	pop	{r7, pc}

080012ec <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012fc:	68ba      	ldr	r2, [r7, #8]
 80012fe:	211f      	movs	r1, #31
 8001300:	400a      	ands	r2, r1
 8001302:	210f      	movs	r1, #15
 8001304:	4091      	lsls	r1, r2
 8001306:	000a      	movs	r2, r1
 8001308:	43d2      	mvns	r2, r2
 800130a:	401a      	ands	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	0e9b      	lsrs	r3, r3, #26
 8001310:	210f      	movs	r1, #15
 8001312:	4019      	ands	r1, r3
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	201f      	movs	r0, #31
 8001318:	4003      	ands	r3, r0
 800131a:	4099      	lsls	r1, r3
 800131c:	000b      	movs	r3, r1
 800131e:	431a      	orrs	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001324:	46c0      	nop			@ (mov r8, r8)
 8001326:	46bd      	mov	sp, r7
 8001328:	b004      	add	sp, #16
 800132a:	bd80      	pop	{r7, pc}

0800132c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	035b      	lsls	r3, r3, #13
 800133e:	0b5b      	lsrs	r3, r3, #13
 8001340:	431a      	orrs	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001346:	46c0      	nop			@ (mov r8, r8)
 8001348:	46bd      	mov	sp, r7
 800134a:	b002      	add	sp, #8
 800134c:	bd80      	pop	{r7, pc}

0800134e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
 8001356:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800135c:	683a      	ldr	r2, [r7, #0]
 800135e:	0352      	lsls	r2, r2, #13
 8001360:	0b52      	lsrs	r2, r2, #13
 8001362:	43d2      	mvns	r2, r2
 8001364:	401a      	ands	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800136a:	46c0      	nop			@ (mov r8, r8)
 800136c:	46bd      	mov	sp, r7
 800136e:	b002      	add	sp, #8
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	695b      	ldr	r3, [r3, #20]
 8001384:	68ba      	ldr	r2, [r7, #8]
 8001386:	0212      	lsls	r2, r2, #8
 8001388:	43d2      	mvns	r2, r2
 800138a:	401a      	ands	r2, r3
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	021b      	lsls	r3, r3, #8
 8001390:	6879      	ldr	r1, [r7, #4]
 8001392:	400b      	ands	r3, r1
 8001394:	4904      	ldr	r1, [pc, #16]	@ (80013a8 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001396:	400b      	ands	r3, r1
 8001398:	431a      	orrs	r2, r3
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800139e:	46c0      	nop			@ (mov r8, r8)
 80013a0:	46bd      	mov	sp, r7
 80013a2:	b004      	add	sp, #16
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	46c0      	nop			@ (mov r8, r8)
 80013a8:	07ffff00 	.word	0x07ffff00

080013ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	4a05      	ldr	r2, [pc, #20]	@ (80013d0 <LL_ADC_EnableInternalRegulator+0x24>)
 80013ba:	4013      	ands	r3, r2
 80013bc:	2280      	movs	r2, #128	@ 0x80
 80013be:	0552      	lsls	r2, r2, #21
 80013c0:	431a      	orrs	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80013c6:	46c0      	nop			@ (mov r8, r8)
 80013c8:	46bd      	mov	sp, r7
 80013ca:	b002      	add	sp, #8
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	46c0      	nop			@ (mov r8, r8)
 80013d0:	6fffffe8 	.word	0x6fffffe8

080013d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	2380      	movs	r3, #128	@ 0x80
 80013e2:	055b      	lsls	r3, r3, #21
 80013e4:	401a      	ands	r2, r3
 80013e6:	2380      	movs	r3, #128	@ 0x80
 80013e8:	055b      	lsls	r3, r3, #21
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d101      	bne.n	80013f2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80013ee:	2301      	movs	r3, #1
 80013f0:	e000      	b.n	80013f4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80013f2:	2300      	movs	r3, #0
}
 80013f4:	0018      	movs	r0, r3
 80013f6:	46bd      	mov	sp, r7
 80013f8:	b002      	add	sp, #8
 80013fa:	bd80      	pop	{r7, pc}

080013fc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	4a04      	ldr	r2, [pc, #16]	@ (800141c <LL_ADC_Enable+0x20>)
 800140a:	4013      	ands	r3, r2
 800140c:	2201      	movs	r2, #1
 800140e:	431a      	orrs	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001414:	46c0      	nop			@ (mov r8, r8)
 8001416:	46bd      	mov	sp, r7
 8001418:	b002      	add	sp, #8
 800141a:	bd80      	pop	{r7, pc}
 800141c:	7fffffe8 	.word	0x7fffffe8

08001420 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	4a04      	ldr	r2, [pc, #16]	@ (8001440 <LL_ADC_Disable+0x20>)
 800142e:	4013      	ands	r3, r2
 8001430:	2202      	movs	r2, #2
 8001432:	431a      	orrs	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001438:	46c0      	nop			@ (mov r8, r8)
 800143a:	46bd      	mov	sp, r7
 800143c:	b002      	add	sp, #8
 800143e:	bd80      	pop	{r7, pc}
 8001440:	7fffffe8 	.word	0x7fffffe8

08001444 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	2201      	movs	r2, #1
 8001452:	4013      	ands	r3, r2
 8001454:	2b01      	cmp	r3, #1
 8001456:	d101      	bne.n	800145c <LL_ADC_IsEnabled+0x18>
 8001458:	2301      	movs	r3, #1
 800145a:	e000      	b.n	800145e <LL_ADC_IsEnabled+0x1a>
 800145c:	2300      	movs	r3, #0
}
 800145e:	0018      	movs	r0, r3
 8001460:	46bd      	mov	sp, r7
 8001462:	b002      	add	sp, #8
 8001464:	bd80      	pop	{r7, pc}

08001466 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	2202      	movs	r2, #2
 8001474:	4013      	ands	r3, r2
 8001476:	2b02      	cmp	r3, #2
 8001478:	d101      	bne.n	800147e <LL_ADC_IsDisableOngoing+0x18>
 800147a:	2301      	movs	r3, #1
 800147c:	e000      	b.n	8001480 <LL_ADC_IsDisableOngoing+0x1a>
 800147e:	2300      	movs	r3, #0
}
 8001480:	0018      	movs	r0, r3
 8001482:	46bd      	mov	sp, r7
 8001484:	b002      	add	sp, #8
 8001486:	bd80      	pop	{r7, pc}

08001488 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	4a04      	ldr	r2, [pc, #16]	@ (80014a8 <LL_ADC_REG_StartConversion+0x20>)
 8001496:	4013      	ands	r3, r2
 8001498:	2204      	movs	r2, #4
 800149a:	431a      	orrs	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80014a0:	46c0      	nop			@ (mov r8, r8)
 80014a2:	46bd      	mov	sp, r7
 80014a4:	b002      	add	sp, #8
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	7fffffe8 	.word	0x7fffffe8

080014ac <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	4a04      	ldr	r2, [pc, #16]	@ (80014cc <LL_ADC_REG_StopConversion+0x20>)
 80014ba:	4013      	ands	r3, r2
 80014bc:	2210      	movs	r2, #16
 80014be:	431a      	orrs	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80014c4:	46c0      	nop			@ (mov r8, r8)
 80014c6:	46bd      	mov	sp, r7
 80014c8:	b002      	add	sp, #8
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	7fffffe8 	.word	0x7fffffe8

080014d0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	2204      	movs	r2, #4
 80014de:	4013      	ands	r3, r2
 80014e0:	2b04      	cmp	r3, #4
 80014e2:	d101      	bne.n	80014e8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80014e4:	2301      	movs	r3, #1
 80014e6:	e000      	b.n	80014ea <LL_ADC_REG_IsConversionOngoing+0x1a>
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	0018      	movs	r0, r3
 80014ec:	46bd      	mov	sp, r7
 80014ee:	b002      	add	sp, #8
 80014f0:	bd80      	pop	{r7, pc}
	...

080014f4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b088      	sub	sp, #32
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014fc:	231f      	movs	r3, #31
 80014fe:	18fb      	adds	r3, r7, r3
 8001500:	2200      	movs	r2, #0
 8001502:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001504:	2300      	movs	r3, #0
 8001506:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800150c:	2300      	movs	r3, #0
 800150e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d101      	bne.n	800151a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e17f      	b.n	800181a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800151e:	2b00      	cmp	r3, #0
 8001520:	d10a      	bne.n	8001538 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	0018      	movs	r0, r3
 8001526:	f7ff fb6b 	bl	8000c00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2254      	movs	r2, #84	@ 0x54
 8001534:	2100      	movs	r1, #0
 8001536:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	0018      	movs	r0, r3
 800153e:	f7ff ff49 	bl	80013d4 <LL_ADC_IsInternalRegulatorEnabled>
 8001542:	1e03      	subs	r3, r0, #0
 8001544:	d115      	bne.n	8001572 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	0018      	movs	r0, r3
 800154c:	f7ff ff2e 	bl	80013ac <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001550:	4bb4      	ldr	r3, [pc, #720]	@ (8001824 <HAL_ADC_Init+0x330>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	49b4      	ldr	r1, [pc, #720]	@ (8001828 <HAL_ADC_Init+0x334>)
 8001556:	0018      	movs	r0, r3
 8001558:	f7fe fddc 	bl	8000114 <__udivsi3>
 800155c:	0003      	movs	r3, r0
 800155e:	3301      	adds	r3, #1
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001564:	e002      	b.n	800156c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	3b01      	subs	r3, #1
 800156a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1f9      	bne.n	8001566 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	0018      	movs	r0, r3
 8001578:	f7ff ff2c 	bl	80013d4 <LL_ADC_IsInternalRegulatorEnabled>
 800157c:	1e03      	subs	r3, r0, #0
 800157e:	d10f      	bne.n	80015a0 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001584:	2210      	movs	r2, #16
 8001586:	431a      	orrs	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001590:	2201      	movs	r2, #1
 8001592:	431a      	orrs	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001598:	231f      	movs	r3, #31
 800159a:	18fb      	adds	r3, r7, r3
 800159c:	2201      	movs	r2, #1
 800159e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	0018      	movs	r0, r3
 80015a6:	f7ff ff93 	bl	80014d0 <LL_ADC_REG_IsConversionOngoing>
 80015aa:	0003      	movs	r3, r0
 80015ac:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b2:	2210      	movs	r2, #16
 80015b4:	4013      	ands	r3, r2
 80015b6:	d000      	beq.n	80015ba <HAL_ADC_Init+0xc6>
 80015b8:	e122      	b.n	8001800 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d000      	beq.n	80015c2 <HAL_ADC_Init+0xce>
 80015c0:	e11e      	b.n	8001800 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015c6:	4a99      	ldr	r2, [pc, #612]	@ (800182c <HAL_ADC_Init+0x338>)
 80015c8:	4013      	ands	r3, r2
 80015ca:	2202      	movs	r2, #2
 80015cc:	431a      	orrs	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	0018      	movs	r0, r3
 80015d8:	f7ff ff34 	bl	8001444 <LL_ADC_IsEnabled>
 80015dc:	1e03      	subs	r3, r0, #0
 80015de:	d000      	beq.n	80015e2 <HAL_ADC_Init+0xee>
 80015e0:	e0ad      	b.n	800173e <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	7e1b      	ldrb	r3, [r3, #24]
 80015ea:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80015ec:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	7e5b      	ldrb	r3, [r3, #25]
 80015f2:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80015f4:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	7e9b      	ldrb	r3, [r3, #26]
 80015fa:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80015fc:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	2b00      	cmp	r3, #0
 8001604:	d002      	beq.n	800160c <HAL_ADC_Init+0x118>
 8001606:	2380      	movs	r3, #128	@ 0x80
 8001608:	015b      	lsls	r3, r3, #5
 800160a:	e000      	b.n	800160e <HAL_ADC_Init+0x11a>
 800160c:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800160e:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001614:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	2b00      	cmp	r3, #0
 800161c:	da04      	bge.n	8001628 <HAL_ADC_Init+0x134>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	691b      	ldr	r3, [r3, #16]
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	085b      	lsrs	r3, r3, #1
 8001626:	e001      	b.n	800162c <HAL_ADC_Init+0x138>
 8001628:	2380      	movs	r3, #128	@ 0x80
 800162a:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 800162c:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	212c      	movs	r1, #44	@ 0x2c
 8001632:	5c5b      	ldrb	r3, [r3, r1]
 8001634:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001636:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4313      	orrs	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2220      	movs	r2, #32
 8001642:	5c9b      	ldrb	r3, [r3, r2]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d115      	bne.n	8001674 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	7e9b      	ldrb	r3, [r3, #26]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d105      	bne.n	800165c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	2280      	movs	r2, #128	@ 0x80
 8001654:	0252      	lsls	r2, r2, #9
 8001656:	4313      	orrs	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
 800165a:	e00b      	b.n	8001674 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001660:	2220      	movs	r2, #32
 8001662:	431a      	orrs	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800166c:	2201      	movs	r2, #1
 800166e:	431a      	orrs	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001678:	2b00      	cmp	r3, #0
 800167a:	d00a      	beq.n	8001692 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001680:	23e0      	movs	r3, #224	@ 0xe0
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800168a:	4313      	orrs	r3, r2
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	4313      	orrs	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	4a65      	ldr	r2, [pc, #404]	@ (8001830 <HAL_ADC_Init+0x33c>)
 800169a:	4013      	ands	r3, r2
 800169c:	0019      	movs	r1, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	430a      	orrs	r2, r1
 80016a6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	0f9b      	lsrs	r3, r3, #30
 80016ae:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80016b4:	4313      	orrs	r3, r2
 80016b6:	697a      	ldr	r2, [r7, #20]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	223c      	movs	r2, #60	@ 0x3c
 80016c0:	5c9b      	ldrb	r3, [r3, r2]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d111      	bne.n	80016ea <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	0f9b      	lsrs	r3, r3, #30
 80016cc:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80016d2:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 80016d8:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80016de:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	2201      	movs	r2, #1
 80016e6:	4313      	orrs	r3, r2
 80016e8:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	691b      	ldr	r3, [r3, #16]
 80016f0:	4a50      	ldr	r2, [pc, #320]	@ (8001834 <HAL_ADC_Init+0x340>)
 80016f2:	4013      	ands	r3, r2
 80016f4:	0019      	movs	r1, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	697a      	ldr	r2, [r7, #20]
 80016fc:	430a      	orrs	r2, r1
 80016fe:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685a      	ldr	r2, [r3, #4]
 8001704:	23c0      	movs	r3, #192	@ 0xc0
 8001706:	061b      	lsls	r3, r3, #24
 8001708:	429a      	cmp	r2, r3
 800170a:	d018      	beq.n	800173e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001710:	2380      	movs	r3, #128	@ 0x80
 8001712:	05db      	lsls	r3, r3, #23
 8001714:	429a      	cmp	r2, r3
 8001716:	d012      	beq.n	800173e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800171c:	2380      	movs	r3, #128	@ 0x80
 800171e:	061b      	lsls	r3, r3, #24
 8001720:	429a      	cmp	r2, r3
 8001722:	d00c      	beq.n	800173e <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001724:	4b44      	ldr	r3, [pc, #272]	@ (8001838 <HAL_ADC_Init+0x344>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a44      	ldr	r2, [pc, #272]	@ (800183c <HAL_ADC_Init+0x348>)
 800172a:	4013      	ands	r3, r2
 800172c:	0019      	movs	r1, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685a      	ldr	r2, [r3, #4]
 8001732:	23f0      	movs	r3, #240	@ 0xf0
 8001734:	039b      	lsls	r3, r3, #14
 8001736:	401a      	ands	r2, r3
 8001738:	4b3f      	ldr	r3, [pc, #252]	@ (8001838 <HAL_ADC_Init+0x344>)
 800173a:	430a      	orrs	r2, r1
 800173c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6818      	ldr	r0, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001746:	001a      	movs	r2, r3
 8001748:	2100      	movs	r1, #0
 800174a:	f7ff fd8a 	bl	8001262 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6818      	ldr	r0, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001756:	493a      	ldr	r1, [pc, #232]	@ (8001840 <HAL_ADC_Init+0x34c>)
 8001758:	001a      	movs	r2, r3
 800175a:	f7ff fd82 	bl	8001262 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	691b      	ldr	r3, [r3, #16]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d109      	bne.n	800177a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2110      	movs	r1, #16
 8001772:	4249      	negs	r1, r1
 8001774:	430a      	orrs	r2, r1
 8001776:	629a      	str	r2, [r3, #40]	@ 0x28
 8001778:	e018      	b.n	80017ac <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	691a      	ldr	r2, [r3, #16]
 800177e:	2380      	movs	r3, #128	@ 0x80
 8001780:	039b      	lsls	r3, r3, #14
 8001782:	429a      	cmp	r2, r3
 8001784:	d112      	bne.n	80017ac <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	69db      	ldr	r3, [r3, #28]
 8001790:	3b01      	subs	r3, #1
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	221c      	movs	r2, #28
 8001796:	4013      	ands	r3, r2
 8001798:	2210      	movs	r2, #16
 800179a:	4252      	negs	r2, r2
 800179c:	409a      	lsls	r2, r3
 800179e:	0011      	movs	r1, r2
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	430a      	orrs	r2, r1
 80017aa:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2100      	movs	r1, #0
 80017b2:	0018      	movs	r0, r3
 80017b4:	f7ff fd72 	bl	800129c <LL_ADC_GetSamplingTimeCommonChannels>
 80017b8:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80017be:	429a      	cmp	r2, r3
 80017c0:	d10b      	bne.n	80017da <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017cc:	2203      	movs	r2, #3
 80017ce:	4393      	bics	r3, r2
 80017d0:	2201      	movs	r2, #1
 80017d2:	431a      	orrs	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80017d8:	e01c      	b.n	8001814 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017de:	2212      	movs	r2, #18
 80017e0:	4393      	bics	r3, r2
 80017e2:	2210      	movs	r2, #16
 80017e4:	431a      	orrs	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017ee:	2201      	movs	r2, #1
 80017f0:	431a      	orrs	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80017f6:	231f      	movs	r3, #31
 80017f8:	18fb      	adds	r3, r7, r3
 80017fa:	2201      	movs	r2, #1
 80017fc:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80017fe:	e009      	b.n	8001814 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001804:	2210      	movs	r2, #16
 8001806:	431a      	orrs	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800180c:	231f      	movs	r3, #31
 800180e:	18fb      	adds	r3, r7, r3
 8001810:	2201      	movs	r2, #1
 8001812:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001814:	231f      	movs	r3, #31
 8001816:	18fb      	adds	r3, r7, r3
 8001818:	781b      	ldrb	r3, [r3, #0]
}
 800181a:	0018      	movs	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	b008      	add	sp, #32
 8001820:	bd80      	pop	{r7, pc}
 8001822:	46c0      	nop			@ (mov r8, r8)
 8001824:	20000000 	.word	0x20000000
 8001828:	00030d40 	.word	0x00030d40
 800182c:	fffffefd 	.word	0xfffffefd
 8001830:	ffde0201 	.word	0xffde0201
 8001834:	1ffffc02 	.word	0x1ffffc02
 8001838:	40012708 	.word	0x40012708
 800183c:	ffc3ffff 	.word	0xffc3ffff
 8001840:	07ffff04 	.word	0x07ffff04

08001844 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001844:	b5b0      	push	{r4, r5, r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	0018      	movs	r0, r3
 8001852:	f7ff fe3d 	bl	80014d0 <LL_ADC_REG_IsConversionOngoing>
 8001856:	1e03      	subs	r3, r0, #0
 8001858:	d135      	bne.n	80018c6 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2254      	movs	r2, #84	@ 0x54
 800185e:	5c9b      	ldrb	r3, [r3, r2]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d101      	bne.n	8001868 <HAL_ADC_Start+0x24>
 8001864:	2302      	movs	r3, #2
 8001866:	e035      	b.n	80018d4 <HAL_ADC_Start+0x90>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2254      	movs	r2, #84	@ 0x54
 800186c:	2101      	movs	r1, #1
 800186e:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001870:	250f      	movs	r5, #15
 8001872:	197c      	adds	r4, r7, r5
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	0018      	movs	r0, r3
 8001878:	f000 fb28 	bl	8001ecc <ADC_Enable>
 800187c:	0003      	movs	r3, r0
 800187e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001880:	197b      	adds	r3, r7, r5
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d119      	bne.n	80018bc <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800188c:	4a13      	ldr	r2, [pc, #76]	@ (80018dc <HAL_ADC_Start+0x98>)
 800188e:	4013      	ands	r3, r2
 8001890:	2280      	movs	r2, #128	@ 0x80
 8001892:	0052      	lsls	r2, r2, #1
 8001894:	431a      	orrs	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	221c      	movs	r2, #28
 80018a6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2254      	movs	r2, #84	@ 0x54
 80018ac:	2100      	movs	r1, #0
 80018ae:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	0018      	movs	r0, r3
 80018b6:	f7ff fde7 	bl	8001488 <LL_ADC_REG_StartConversion>
 80018ba:	e008      	b.n	80018ce <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2254      	movs	r2, #84	@ 0x54
 80018c0:	2100      	movs	r1, #0
 80018c2:	5499      	strb	r1, [r3, r2]
 80018c4:	e003      	b.n	80018ce <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80018c6:	230f      	movs	r3, #15
 80018c8:	18fb      	adds	r3, r7, r3
 80018ca:	2202      	movs	r2, #2
 80018cc:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80018ce:	230f      	movs	r3, #15
 80018d0:	18fb      	adds	r3, r7, r3
 80018d2:	781b      	ldrb	r3, [r3, #0]
}
 80018d4:	0018      	movs	r0, r3
 80018d6:	46bd      	mov	sp, r7
 80018d8:	b004      	add	sp, #16
 80018da:	bdb0      	pop	{r4, r5, r7, pc}
 80018dc:	fffff0fe 	.word	0xfffff0fe

080018e0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80018e0:	b5b0      	push	{r4, r5, r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2254      	movs	r2, #84	@ 0x54
 80018ec:	5c9b      	ldrb	r3, [r3, r2]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d101      	bne.n	80018f6 <HAL_ADC_Stop+0x16>
 80018f2:	2302      	movs	r3, #2
 80018f4:	e029      	b.n	800194a <HAL_ADC_Stop+0x6a>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2254      	movs	r2, #84	@ 0x54
 80018fa:	2101      	movs	r1, #1
 80018fc:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80018fe:	250f      	movs	r5, #15
 8001900:	197c      	adds	r4, r7, r5
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	0018      	movs	r0, r3
 8001906:	f000 fa9f 	bl	8001e48 <ADC_ConversionStop>
 800190a:	0003      	movs	r3, r0
 800190c:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800190e:	197b      	adds	r3, r7, r5
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d112      	bne.n	800193c <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001916:	197c      	adds	r4, r7, r5
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	0018      	movs	r0, r3
 800191c:	f000 fb5c 	bl	8001fd8 <ADC_Disable>
 8001920:	0003      	movs	r3, r0
 8001922:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001924:	197b      	adds	r3, r7, r5
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d107      	bne.n	800193c <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001930:	4a08      	ldr	r2, [pc, #32]	@ (8001954 <HAL_ADC_Stop+0x74>)
 8001932:	4013      	ands	r3, r2
 8001934:	2201      	movs	r2, #1
 8001936:	431a      	orrs	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2254      	movs	r2, #84	@ 0x54
 8001940:	2100      	movs	r1, #0
 8001942:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001944:	230f      	movs	r3, #15
 8001946:	18fb      	adds	r3, r7, r3
 8001948:	781b      	ldrb	r3, [r3, #0]
}
 800194a:	0018      	movs	r0, r3
 800194c:	46bd      	mov	sp, r7
 800194e:	b004      	add	sp, #16
 8001950:	bdb0      	pop	{r4, r5, r7, pc}
 8001952:	46c0      	nop			@ (mov r8, r8)
 8001954:	fffffefe 	.word	0xfffffefe

08001958 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	695b      	ldr	r3, [r3, #20]
 8001966:	2b08      	cmp	r3, #8
 8001968:	d102      	bne.n	8001970 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800196a:	2308      	movs	r3, #8
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	e00f      	b.n	8001990 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	2201      	movs	r2, #1
 8001978:	4013      	ands	r3, r2
 800197a:	d007      	beq.n	800198c <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001980:	2220      	movs	r2, #32
 8001982:	431a      	orrs	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e072      	b.n	8001a72 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800198c:	2304      	movs	r3, #4
 800198e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001990:	f7ff fc18 	bl	80011c4 <HAL_GetTick>
 8001994:	0003      	movs	r3, r0
 8001996:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001998:	e01f      	b.n	80019da <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	3301      	adds	r3, #1
 800199e:	d01c      	beq.n	80019da <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80019a0:	f7ff fc10 	bl	80011c4 <HAL_GetTick>
 80019a4:	0002      	movs	r2, r0
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d302      	bcc.n	80019b6 <HAL_ADC_PollForConversion+0x5e>
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d111      	bne.n	80019da <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	68fa      	ldr	r2, [r7, #12]
 80019be:	4013      	ands	r3, r2
 80019c0:	d10b      	bne.n	80019da <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019c6:	2204      	movs	r2, #4
 80019c8:	431a      	orrs	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2254      	movs	r2, #84	@ 0x54
 80019d2:	2100      	movs	r1, #0
 80019d4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e04b      	b.n	8001a72 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	68fa      	ldr	r2, [r7, #12]
 80019e2:	4013      	ands	r3, r2
 80019e4:	d0d9      	beq.n	800199a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ea:	2280      	movs	r2, #128	@ 0x80
 80019ec:	0092      	lsls	r2, r2, #2
 80019ee:	431a      	orrs	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	0018      	movs	r0, r3
 80019fa:	f7ff fc66 	bl	80012ca <LL_ADC_REG_IsTriggerSourceSWStart>
 80019fe:	1e03      	subs	r3, r0, #0
 8001a00:	d02e      	beq.n	8001a60 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	7e9b      	ldrb	r3, [r3, #26]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d12a      	bne.n	8001a60 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2208      	movs	r2, #8
 8001a12:	4013      	ands	r3, r2
 8001a14:	2b08      	cmp	r3, #8
 8001a16:	d123      	bne.n	8001a60 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	f7ff fd57 	bl	80014d0 <LL_ADC_REG_IsConversionOngoing>
 8001a22:	1e03      	subs	r3, r0, #0
 8001a24:	d110      	bne.n	8001a48 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	685a      	ldr	r2, [r3, #4]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	210c      	movs	r1, #12
 8001a32:	438a      	bics	r2, r1
 8001a34:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a3a:	4a10      	ldr	r2, [pc, #64]	@ (8001a7c <HAL_ADC_PollForConversion+0x124>)
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	2201      	movs	r2, #1
 8001a40:	431a      	orrs	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	659a      	str	r2, [r3, #88]	@ 0x58
 8001a46:	e00b      	b.n	8001a60 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a4c:	2220      	movs	r2, #32
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a58:	2201      	movs	r2, #1
 8001a5a:	431a      	orrs	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	7e1b      	ldrb	r3, [r3, #24]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d103      	bne.n	8001a70 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	220c      	movs	r2, #12
 8001a6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	0018      	movs	r0, r3
 8001a74:	46bd      	mov	sp, r7
 8001a76:	b004      	add	sp, #16
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	46c0      	nop			@ (mov r8, r8)
 8001a7c:	fffffefe 	.word	0xfffffefe

08001a80 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001a8e:	0018      	movs	r0, r3
 8001a90:	46bd      	mov	sp, r7
 8001a92:	b002      	add	sp, #8
 8001a94:	bd80      	pop	{r7, pc}
	...

08001a98 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aa2:	2317      	movs	r3, #23
 8001aa4:	18fb      	adds	r3, r7, r3
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2254      	movs	r2, #84	@ 0x54
 8001ab2:	5c9b      	ldrb	r3, [r3, r2]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d101      	bne.n	8001abc <HAL_ADC_ConfigChannel+0x24>
 8001ab8:	2302      	movs	r3, #2
 8001aba:	e1c0      	b.n	8001e3e <HAL_ADC_ConfigChannel+0x3a6>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2254      	movs	r2, #84	@ 0x54
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	0018      	movs	r0, r3
 8001aca:	f7ff fd01 	bl	80014d0 <LL_ADC_REG_IsConversionOngoing>
 8001ace:	1e03      	subs	r3, r0, #0
 8001ad0:	d000      	beq.n	8001ad4 <HAL_ADC_ConfigChannel+0x3c>
 8001ad2:	e1a3      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d100      	bne.n	8001ade <HAL_ADC_ConfigChannel+0x46>
 8001adc:	e143      	b.n	8001d66 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	691a      	ldr	r2, [r3, #16]
 8001ae2:	2380      	movs	r3, #128	@ 0x80
 8001ae4:	061b      	lsls	r3, r3, #24
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d004      	beq.n	8001af4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001aee:	4ac1      	ldr	r2, [pc, #772]	@ (8001df4 <HAL_ADC_ConfigChannel+0x35c>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d108      	bne.n	8001b06 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	0019      	movs	r1, r3
 8001afe:	0010      	movs	r0, r2
 8001b00:	f7ff fc14 	bl	800132c <LL_ADC_REG_SetSequencerChAdd>
 8001b04:	e0c9      	b.n	8001c9a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	211f      	movs	r1, #31
 8001b10:	400b      	ands	r3, r1
 8001b12:	210f      	movs	r1, #15
 8001b14:	4099      	lsls	r1, r3
 8001b16:	000b      	movs	r3, r1
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	0019      	movs	r1, r3
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	035b      	lsls	r3, r3, #13
 8001b24:	0b5b      	lsrs	r3, r3, #13
 8001b26:	d105      	bne.n	8001b34 <HAL_ADC_ConfigChannel+0x9c>
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	0e9b      	lsrs	r3, r3, #26
 8001b2e:	221f      	movs	r2, #31
 8001b30:	4013      	ands	r3, r2
 8001b32:	e098      	b.n	8001c66 <HAL_ADC_ConfigChannel+0x1ce>
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	d000      	beq.n	8001b40 <HAL_ADC_ConfigChannel+0xa8>
 8001b3e:	e091      	b.n	8001c64 <HAL_ADC_ConfigChannel+0x1cc>
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2202      	movs	r2, #2
 8001b46:	4013      	ands	r3, r2
 8001b48:	d000      	beq.n	8001b4c <HAL_ADC_ConfigChannel+0xb4>
 8001b4a:	e089      	b.n	8001c60 <HAL_ADC_ConfigChannel+0x1c8>
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2204      	movs	r2, #4
 8001b52:	4013      	ands	r3, r2
 8001b54:	d000      	beq.n	8001b58 <HAL_ADC_ConfigChannel+0xc0>
 8001b56:	e081      	b.n	8001c5c <HAL_ADC_ConfigChannel+0x1c4>
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2208      	movs	r2, #8
 8001b5e:	4013      	ands	r3, r2
 8001b60:	d000      	beq.n	8001b64 <HAL_ADC_ConfigChannel+0xcc>
 8001b62:	e079      	b.n	8001c58 <HAL_ADC_ConfigChannel+0x1c0>
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2210      	movs	r2, #16
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	d000      	beq.n	8001b70 <HAL_ADC_ConfigChannel+0xd8>
 8001b6e:	e071      	b.n	8001c54 <HAL_ADC_ConfigChannel+0x1bc>
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2220      	movs	r2, #32
 8001b76:	4013      	ands	r3, r2
 8001b78:	d000      	beq.n	8001b7c <HAL_ADC_ConfigChannel+0xe4>
 8001b7a:	e069      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x1b8>
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2240      	movs	r2, #64	@ 0x40
 8001b82:	4013      	ands	r3, r2
 8001b84:	d000      	beq.n	8001b88 <HAL_ADC_ConfigChannel+0xf0>
 8001b86:	e061      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x1b4>
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2280      	movs	r2, #128	@ 0x80
 8001b8e:	4013      	ands	r3, r2
 8001b90:	d000      	beq.n	8001b94 <HAL_ADC_ConfigChannel+0xfc>
 8001b92:	e059      	b.n	8001c48 <HAL_ADC_ConfigChannel+0x1b0>
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	2380      	movs	r3, #128	@ 0x80
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	d151      	bne.n	8001c44 <HAL_ADC_ConfigChannel+0x1ac>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	2380      	movs	r3, #128	@ 0x80
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4013      	ands	r3, r2
 8001baa:	d149      	bne.n	8001c40 <HAL_ADC_ConfigChannel+0x1a8>
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	2380      	movs	r3, #128	@ 0x80
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	d141      	bne.n	8001c3c <HAL_ADC_ConfigChannel+0x1a4>
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	2380      	movs	r3, #128	@ 0x80
 8001bbe:	011b      	lsls	r3, r3, #4
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	d139      	bne.n	8001c38 <HAL_ADC_ConfigChannel+0x1a0>
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	2380      	movs	r3, #128	@ 0x80
 8001bca:	015b      	lsls	r3, r3, #5
 8001bcc:	4013      	ands	r3, r2
 8001bce:	d131      	bne.n	8001c34 <HAL_ADC_ConfigChannel+0x19c>
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	2380      	movs	r3, #128	@ 0x80
 8001bd6:	019b      	lsls	r3, r3, #6
 8001bd8:	4013      	ands	r3, r2
 8001bda:	d129      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x198>
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	2380      	movs	r3, #128	@ 0x80
 8001be2:	01db      	lsls	r3, r3, #7
 8001be4:	4013      	ands	r3, r2
 8001be6:	d121      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x194>
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	2380      	movs	r3, #128	@ 0x80
 8001bee:	021b      	lsls	r3, r3, #8
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	d119      	bne.n	8001c28 <HAL_ADC_ConfigChannel+0x190>
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	2380      	movs	r3, #128	@ 0x80
 8001bfa:	025b      	lsls	r3, r3, #9
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	d111      	bne.n	8001c24 <HAL_ADC_ConfigChannel+0x18c>
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	2380      	movs	r3, #128	@ 0x80
 8001c06:	029b      	lsls	r3, r3, #10
 8001c08:	4013      	ands	r3, r2
 8001c0a:	d109      	bne.n	8001c20 <HAL_ADC_ConfigChannel+0x188>
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	2380      	movs	r3, #128	@ 0x80
 8001c12:	02db      	lsls	r3, r3, #11
 8001c14:	4013      	ands	r3, r2
 8001c16:	d001      	beq.n	8001c1c <HAL_ADC_ConfigChannel+0x184>
 8001c18:	2312      	movs	r3, #18
 8001c1a:	e024      	b.n	8001c66 <HAL_ADC_ConfigChannel+0x1ce>
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	e022      	b.n	8001c66 <HAL_ADC_ConfigChannel+0x1ce>
 8001c20:	2311      	movs	r3, #17
 8001c22:	e020      	b.n	8001c66 <HAL_ADC_ConfigChannel+0x1ce>
 8001c24:	2310      	movs	r3, #16
 8001c26:	e01e      	b.n	8001c66 <HAL_ADC_ConfigChannel+0x1ce>
 8001c28:	230f      	movs	r3, #15
 8001c2a:	e01c      	b.n	8001c66 <HAL_ADC_ConfigChannel+0x1ce>
 8001c2c:	230e      	movs	r3, #14
 8001c2e:	e01a      	b.n	8001c66 <HAL_ADC_ConfigChannel+0x1ce>
 8001c30:	230d      	movs	r3, #13
 8001c32:	e018      	b.n	8001c66 <HAL_ADC_ConfigChannel+0x1ce>
 8001c34:	230c      	movs	r3, #12
 8001c36:	e016      	b.n	8001c66 <HAL_ADC_ConfigChannel+0x1ce>
 8001c38:	230b      	movs	r3, #11
 8001c3a:	e014      	b.n	8001c66 <HAL_ADC_ConfigChannel+0x1ce>
 8001c3c:	230a      	movs	r3, #10
 8001c3e:	e012      	b.n	8001c66 <HAL_ADC_ConfigChannel+0x1ce>
 8001c40:	2309      	movs	r3, #9
 8001c42:	e010      	b.n	8001c66 <HAL_ADC_ConfigChannel+0x1ce>
 8001c44:	2308      	movs	r3, #8
 8001c46:	e00e      	b.n	8001c66 <HAL_ADC_ConfigChannel+0x1ce>
 8001c48:	2307      	movs	r3, #7
 8001c4a:	e00c      	b.n	8001c66 <HAL_ADC_ConfigChannel+0x1ce>
 8001c4c:	2306      	movs	r3, #6
 8001c4e:	e00a      	b.n	8001c66 <HAL_ADC_ConfigChannel+0x1ce>
 8001c50:	2305      	movs	r3, #5
 8001c52:	e008      	b.n	8001c66 <HAL_ADC_ConfigChannel+0x1ce>
 8001c54:	2304      	movs	r3, #4
 8001c56:	e006      	b.n	8001c66 <HAL_ADC_ConfigChannel+0x1ce>
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e004      	b.n	8001c66 <HAL_ADC_ConfigChannel+0x1ce>
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	e002      	b.n	8001c66 <HAL_ADC_ConfigChannel+0x1ce>
 8001c60:	2301      	movs	r3, #1
 8001c62:	e000      	b.n	8001c66 <HAL_ADC_ConfigChannel+0x1ce>
 8001c64:	2300      	movs	r3, #0
 8001c66:	683a      	ldr	r2, [r7, #0]
 8001c68:	6852      	ldr	r2, [r2, #4]
 8001c6a:	201f      	movs	r0, #31
 8001c6c:	4002      	ands	r2, r0
 8001c6e:	4093      	lsls	r3, r2
 8001c70:	000a      	movs	r2, r1
 8001c72:	431a      	orrs	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	089b      	lsrs	r3, r3, #2
 8001c7e:	1c5a      	adds	r2, r3, #1
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	69db      	ldr	r3, [r3, #28]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d808      	bhi.n	8001c9a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6818      	ldr	r0, [r3, #0]
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	6859      	ldr	r1, [r3, #4]
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	001a      	movs	r2, r3
 8001c96:	f7ff fb29 	bl	80012ec <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6818      	ldr	r0, [r3, #0]
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	6819      	ldr	r1, [r3, #0]
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	001a      	movs	r2, r3
 8001ca8:	f7ff fb64 	bl	8001374 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	db00      	blt.n	8001cb6 <HAL_ADC_ConfigChannel+0x21e>
 8001cb4:	e0bc      	b.n	8001e30 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cb6:	4b50      	ldr	r3, [pc, #320]	@ (8001df8 <HAL_ADC_ConfigChannel+0x360>)
 8001cb8:	0018      	movs	r0, r3
 8001cba:	f7ff fac5 	bl	8001248 <LL_ADC_GetCommonPathInternalCh>
 8001cbe:	0003      	movs	r3, r0
 8001cc0:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a4d      	ldr	r2, [pc, #308]	@ (8001dfc <HAL_ADC_ConfigChannel+0x364>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d122      	bne.n	8001d12 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	2380      	movs	r3, #128	@ 0x80
 8001cd0:	041b      	lsls	r3, r3, #16
 8001cd2:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001cd4:	d11d      	bne.n	8001d12 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	2280      	movs	r2, #128	@ 0x80
 8001cda:	0412      	lsls	r2, r2, #16
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	4a46      	ldr	r2, [pc, #280]	@ (8001df8 <HAL_ADC_ConfigChannel+0x360>)
 8001ce0:	0019      	movs	r1, r3
 8001ce2:	0010      	movs	r0, r2
 8001ce4:	f7ff fa9c 	bl	8001220 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ce8:	4b45      	ldr	r3, [pc, #276]	@ (8001e00 <HAL_ADC_ConfigChannel+0x368>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4945      	ldr	r1, [pc, #276]	@ (8001e04 <HAL_ADC_ConfigChannel+0x36c>)
 8001cee:	0018      	movs	r0, r3
 8001cf0:	f7fe fa10 	bl	8000114 <__udivsi3>
 8001cf4:	0003      	movs	r3, r0
 8001cf6:	1c5a      	adds	r2, r3, #1
 8001cf8:	0013      	movs	r3, r2
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	189b      	adds	r3, r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d02:	e002      	b.n	8001d0a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	3b01      	subs	r3, #1
 8001d08:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d1f9      	bne.n	8001d04 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001d10:	e08e      	b.n	8001e30 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a3c      	ldr	r2, [pc, #240]	@ (8001e08 <HAL_ADC_ConfigChannel+0x370>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d10e      	bne.n	8001d3a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	2380      	movs	r3, #128	@ 0x80
 8001d20:	045b      	lsls	r3, r3, #17
 8001d22:	4013      	ands	r3, r2
 8001d24:	d109      	bne.n	8001d3a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	2280      	movs	r2, #128	@ 0x80
 8001d2a:	0452      	lsls	r2, r2, #17
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	4a32      	ldr	r2, [pc, #200]	@ (8001df8 <HAL_ADC_ConfigChannel+0x360>)
 8001d30:	0019      	movs	r1, r3
 8001d32:	0010      	movs	r0, r2
 8001d34:	f7ff fa74 	bl	8001220 <LL_ADC_SetCommonPathInternalCh>
 8001d38:	e07a      	b.n	8001e30 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a33      	ldr	r2, [pc, #204]	@ (8001e0c <HAL_ADC_ConfigChannel+0x374>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d000      	beq.n	8001d46 <HAL_ADC_ConfigChannel+0x2ae>
 8001d44:	e074      	b.n	8001e30 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	2380      	movs	r3, #128	@ 0x80
 8001d4a:	03db      	lsls	r3, r3, #15
 8001d4c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001d4e:	d000      	beq.n	8001d52 <HAL_ADC_ConfigChannel+0x2ba>
 8001d50:	e06e      	b.n	8001e30 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	2280      	movs	r2, #128	@ 0x80
 8001d56:	03d2      	lsls	r2, r2, #15
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	4a27      	ldr	r2, [pc, #156]	@ (8001df8 <HAL_ADC_ConfigChannel+0x360>)
 8001d5c:	0019      	movs	r1, r3
 8001d5e:	0010      	movs	r0, r2
 8001d60:	f7ff fa5e 	bl	8001220 <LL_ADC_SetCommonPathInternalCh>
 8001d64:	e064      	b.n	8001e30 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	691a      	ldr	r2, [r3, #16]
 8001d6a:	2380      	movs	r3, #128	@ 0x80
 8001d6c:	061b      	lsls	r3, r3, #24
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d004      	beq.n	8001d7c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001d76:	4a1f      	ldr	r2, [pc, #124]	@ (8001df4 <HAL_ADC_ConfigChannel+0x35c>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d107      	bne.n	8001d8c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	0019      	movs	r1, r3
 8001d86:	0010      	movs	r0, r2
 8001d88:	f7ff fae1 	bl	800134e <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	da4d      	bge.n	8001e30 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d94:	4b18      	ldr	r3, [pc, #96]	@ (8001df8 <HAL_ADC_ConfigChannel+0x360>)
 8001d96:	0018      	movs	r0, r3
 8001d98:	f7ff fa56 	bl	8001248 <LL_ADC_GetCommonPathInternalCh>
 8001d9c:	0003      	movs	r3, r0
 8001d9e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a15      	ldr	r2, [pc, #84]	@ (8001dfc <HAL_ADC_ConfigChannel+0x364>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d108      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	4a18      	ldr	r2, [pc, #96]	@ (8001e10 <HAL_ADC_ConfigChannel+0x378>)
 8001dae:	4013      	ands	r3, r2
 8001db0:	4a11      	ldr	r2, [pc, #68]	@ (8001df8 <HAL_ADC_ConfigChannel+0x360>)
 8001db2:	0019      	movs	r1, r3
 8001db4:	0010      	movs	r0, r2
 8001db6:	f7ff fa33 	bl	8001220 <LL_ADC_SetCommonPathInternalCh>
 8001dba:	e039      	b.n	8001e30 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a11      	ldr	r2, [pc, #68]	@ (8001e08 <HAL_ADC_ConfigChannel+0x370>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d108      	bne.n	8001dd8 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	4a12      	ldr	r2, [pc, #72]	@ (8001e14 <HAL_ADC_ConfigChannel+0x37c>)
 8001dca:	4013      	ands	r3, r2
 8001dcc:	4a0a      	ldr	r2, [pc, #40]	@ (8001df8 <HAL_ADC_ConfigChannel+0x360>)
 8001dce:	0019      	movs	r1, r3
 8001dd0:	0010      	movs	r0, r2
 8001dd2:	f7ff fa25 	bl	8001220 <LL_ADC_SetCommonPathInternalCh>
 8001dd6:	e02b      	b.n	8001e30 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a0b      	ldr	r2, [pc, #44]	@ (8001e0c <HAL_ADC_ConfigChannel+0x374>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d126      	bne.n	8001e30 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	4a0c      	ldr	r2, [pc, #48]	@ (8001e18 <HAL_ADC_ConfigChannel+0x380>)
 8001de6:	4013      	ands	r3, r2
 8001de8:	4a03      	ldr	r2, [pc, #12]	@ (8001df8 <HAL_ADC_ConfigChannel+0x360>)
 8001dea:	0019      	movs	r1, r3
 8001dec:	0010      	movs	r0, r2
 8001dee:	f7ff fa17 	bl	8001220 <LL_ADC_SetCommonPathInternalCh>
 8001df2:	e01d      	b.n	8001e30 <HAL_ADC_ConfigChannel+0x398>
 8001df4:	80000004 	.word	0x80000004
 8001df8:	40012708 	.word	0x40012708
 8001dfc:	b0001000 	.word	0xb0001000
 8001e00:	20000000 	.word	0x20000000
 8001e04:	00030d40 	.word	0x00030d40
 8001e08:	b8004000 	.word	0xb8004000
 8001e0c:	b4002000 	.word	0xb4002000
 8001e10:	ff7fffff 	.word	0xff7fffff
 8001e14:	feffffff 	.word	0xfeffffff
 8001e18:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e20:	2220      	movs	r2, #32
 8001e22:	431a      	orrs	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001e28:	2317      	movs	r3, #23
 8001e2a:	18fb      	adds	r3, r7, r3
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2254      	movs	r2, #84	@ 0x54
 8001e34:	2100      	movs	r1, #0
 8001e36:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001e38:	2317      	movs	r3, #23
 8001e3a:	18fb      	adds	r3, r7, r3
 8001e3c:	781b      	ldrb	r3, [r3, #0]
}
 8001e3e:	0018      	movs	r0, r3
 8001e40:	46bd      	mov	sp, r7
 8001e42:	b006      	add	sp, #24
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	46c0      	nop			@ (mov r8, r8)

08001e48 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	0018      	movs	r0, r3
 8001e56:	f7ff fb3b 	bl	80014d0 <LL_ADC_REG_IsConversionOngoing>
 8001e5a:	1e03      	subs	r3, r0, #0
 8001e5c:	d031      	beq.n	8001ec2 <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	0018      	movs	r0, r3
 8001e64:	f7ff faff 	bl	8001466 <LL_ADC_IsDisableOngoing>
 8001e68:	1e03      	subs	r3, r0, #0
 8001e6a:	d104      	bne.n	8001e76 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	0018      	movs	r0, r3
 8001e72:	f7ff fb1b 	bl	80014ac <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e76:	f7ff f9a5 	bl	80011c4 <HAL_GetTick>
 8001e7a:	0003      	movs	r3, r0
 8001e7c:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001e7e:	e01a      	b.n	8001eb6 <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001e80:	f7ff f9a0 	bl	80011c4 <HAL_GetTick>
 8001e84:	0002      	movs	r2, r0
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d913      	bls.n	8001eb6 <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	2204      	movs	r2, #4
 8001e96:	4013      	ands	r3, r2
 8001e98:	d00d      	beq.n	8001eb6 <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e9e:	2210      	movs	r2, #16
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eaa:	2201      	movs	r2, #1
 8001eac:	431a      	orrs	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e006      	b.n	8001ec4 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	2204      	movs	r2, #4
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	d1de      	bne.n	8001e80 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	b004      	add	sp, #16
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	0018      	movs	r0, r3
 8001ede:	f7ff fab1 	bl	8001444 <LL_ADC_IsEnabled>
 8001ee2:	1e03      	subs	r3, r0, #0
 8001ee4:	d000      	beq.n	8001ee8 <ADC_Enable+0x1c>
 8001ee6:	e069      	b.n	8001fbc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	4a36      	ldr	r2, [pc, #216]	@ (8001fc8 <ADC_Enable+0xfc>)
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	d00d      	beq.n	8001f10 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef8:	2210      	movs	r2, #16
 8001efa:	431a      	orrs	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f04:	2201      	movs	r2, #1
 8001f06:	431a      	orrs	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e056      	b.n	8001fbe <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	0018      	movs	r0, r3
 8001f16:	f7ff fa71 	bl	80013fc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8001f1a:	4b2c      	ldr	r3, [pc, #176]	@ (8001fcc <ADC_Enable+0x100>)
 8001f1c:	0018      	movs	r0, r3
 8001f1e:	f7ff f993 	bl	8001248 <LL_ADC_GetCommonPathInternalCh>
 8001f22:	0002      	movs	r2, r0
 8001f24:	2380      	movs	r3, #128	@ 0x80
 8001f26:	041b      	lsls	r3, r3, #16
 8001f28:	4013      	ands	r3, r2
 8001f2a:	d00f      	beq.n	8001f4c <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f2c:	4b28      	ldr	r3, [pc, #160]	@ (8001fd0 <ADC_Enable+0x104>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4928      	ldr	r1, [pc, #160]	@ (8001fd4 <ADC_Enable+0x108>)
 8001f32:	0018      	movs	r0, r3
 8001f34:	f7fe f8ee 	bl	8000114 <__udivsi3>
 8001f38:	0003      	movs	r3, r0
 8001f3a:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8001f3c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001f3e:	e002      	b.n	8001f46 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1f9      	bne.n	8001f40 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	7e5b      	ldrb	r3, [r3, #25]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d033      	beq.n	8001fbc <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001f54:	f7ff f936 	bl	80011c4 <HAL_GetTick>
 8001f58:	0003      	movs	r3, r0
 8001f5a:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f5c:	e027      	b.n	8001fae <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	0018      	movs	r0, r3
 8001f64:	f7ff fa6e 	bl	8001444 <LL_ADC_IsEnabled>
 8001f68:	1e03      	subs	r3, r0, #0
 8001f6a:	d104      	bne.n	8001f76 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	0018      	movs	r0, r3
 8001f72:	f7ff fa43 	bl	80013fc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f76:	f7ff f925 	bl	80011c4 <HAL_GetTick>
 8001f7a:	0002      	movs	r2, r0
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d914      	bls.n	8001fae <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d00d      	beq.n	8001fae <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f96:	2210      	movs	r2, #16
 8001f98:	431a      	orrs	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	431a      	orrs	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e007      	b.n	8001fbe <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d1d0      	bne.n	8001f5e <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	0018      	movs	r0, r3
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	b004      	add	sp, #16
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	46c0      	nop			@ (mov r8, r8)
 8001fc8:	80000017 	.word	0x80000017
 8001fcc:	40012708 	.word	0x40012708
 8001fd0:	20000000 	.word	0x20000000
 8001fd4:	00030d40 	.word	0x00030d40

08001fd8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	f7ff fa3e 	bl	8001466 <LL_ADC_IsDisableOngoing>
 8001fea:	0003      	movs	r3, r0
 8001fec:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	f7ff fa26 	bl	8001444 <LL_ADC_IsEnabled>
 8001ff8:	1e03      	subs	r3, r0, #0
 8001ffa:	d046      	beq.n	800208a <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d143      	bne.n	800208a <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	2205      	movs	r2, #5
 800200a:	4013      	ands	r3, r2
 800200c:	2b01      	cmp	r3, #1
 800200e:	d10d      	bne.n	800202c <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	0018      	movs	r0, r3
 8002016:	f7ff fa03 	bl	8001420 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2203      	movs	r2, #3
 8002020:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002022:	f7ff f8cf 	bl	80011c4 <HAL_GetTick>
 8002026:	0003      	movs	r3, r0
 8002028:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800202a:	e028      	b.n	800207e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002030:	2210      	movs	r2, #16
 8002032:	431a      	orrs	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800203c:	2201      	movs	r2, #1
 800203e:	431a      	orrs	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e021      	b.n	800208c <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002048:	f7ff f8bc 	bl	80011c4 <HAL_GetTick>
 800204c:	0002      	movs	r2, r0
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d913      	bls.n	800207e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	2201      	movs	r2, #1
 800205e:	4013      	ands	r3, r2
 8002060:	d00d      	beq.n	800207e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002066:	2210      	movs	r2, #16
 8002068:	431a      	orrs	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002072:	2201      	movs	r2, #1
 8002074:	431a      	orrs	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e006      	b.n	800208c <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	2201      	movs	r2, #1
 8002086:	4013      	ands	r3, r2
 8002088:	d1de      	bne.n	8002048 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	0018      	movs	r0, r3
 800208e:	46bd      	mov	sp, r7
 8002090:	b004      	add	sp, #16
 8002092:	bd80      	pop	{r7, pc}

08002094 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	0002      	movs	r2, r0
 800209c:	1dfb      	adds	r3, r7, #7
 800209e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80020a0:	1dfb      	adds	r3, r7, #7
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80020a6:	d809      	bhi.n	80020bc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020a8:	1dfb      	adds	r3, r7, #7
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	001a      	movs	r2, r3
 80020ae:	231f      	movs	r3, #31
 80020b0:	401a      	ands	r2, r3
 80020b2:	4b04      	ldr	r3, [pc, #16]	@ (80020c4 <__NVIC_EnableIRQ+0x30>)
 80020b4:	2101      	movs	r1, #1
 80020b6:	4091      	lsls	r1, r2
 80020b8:	000a      	movs	r2, r1
 80020ba:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80020bc:	46c0      	nop			@ (mov r8, r8)
 80020be:	46bd      	mov	sp, r7
 80020c0:	b002      	add	sp, #8
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	e000e100 	.word	0xe000e100

080020c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020c8:	b590      	push	{r4, r7, lr}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	0002      	movs	r2, r0
 80020d0:	6039      	str	r1, [r7, #0]
 80020d2:	1dfb      	adds	r3, r7, #7
 80020d4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80020d6:	1dfb      	adds	r3, r7, #7
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	2b7f      	cmp	r3, #127	@ 0x7f
 80020dc:	d828      	bhi.n	8002130 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020de:	4a2f      	ldr	r2, [pc, #188]	@ (800219c <__NVIC_SetPriority+0xd4>)
 80020e0:	1dfb      	adds	r3, r7, #7
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	b25b      	sxtb	r3, r3
 80020e6:	089b      	lsrs	r3, r3, #2
 80020e8:	33c0      	adds	r3, #192	@ 0xc0
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	589b      	ldr	r3, [r3, r2]
 80020ee:	1dfa      	adds	r2, r7, #7
 80020f0:	7812      	ldrb	r2, [r2, #0]
 80020f2:	0011      	movs	r1, r2
 80020f4:	2203      	movs	r2, #3
 80020f6:	400a      	ands	r2, r1
 80020f8:	00d2      	lsls	r2, r2, #3
 80020fa:	21ff      	movs	r1, #255	@ 0xff
 80020fc:	4091      	lsls	r1, r2
 80020fe:	000a      	movs	r2, r1
 8002100:	43d2      	mvns	r2, r2
 8002102:	401a      	ands	r2, r3
 8002104:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	019b      	lsls	r3, r3, #6
 800210a:	22ff      	movs	r2, #255	@ 0xff
 800210c:	401a      	ands	r2, r3
 800210e:	1dfb      	adds	r3, r7, #7
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	0018      	movs	r0, r3
 8002114:	2303      	movs	r3, #3
 8002116:	4003      	ands	r3, r0
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800211c:	481f      	ldr	r0, [pc, #124]	@ (800219c <__NVIC_SetPriority+0xd4>)
 800211e:	1dfb      	adds	r3, r7, #7
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	b25b      	sxtb	r3, r3
 8002124:	089b      	lsrs	r3, r3, #2
 8002126:	430a      	orrs	r2, r1
 8002128:	33c0      	adds	r3, #192	@ 0xc0
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800212e:	e031      	b.n	8002194 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002130:	4a1b      	ldr	r2, [pc, #108]	@ (80021a0 <__NVIC_SetPriority+0xd8>)
 8002132:	1dfb      	adds	r3, r7, #7
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	0019      	movs	r1, r3
 8002138:	230f      	movs	r3, #15
 800213a:	400b      	ands	r3, r1
 800213c:	3b08      	subs	r3, #8
 800213e:	089b      	lsrs	r3, r3, #2
 8002140:	3306      	adds	r3, #6
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	18d3      	adds	r3, r2, r3
 8002146:	3304      	adds	r3, #4
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	1dfa      	adds	r2, r7, #7
 800214c:	7812      	ldrb	r2, [r2, #0]
 800214e:	0011      	movs	r1, r2
 8002150:	2203      	movs	r2, #3
 8002152:	400a      	ands	r2, r1
 8002154:	00d2      	lsls	r2, r2, #3
 8002156:	21ff      	movs	r1, #255	@ 0xff
 8002158:	4091      	lsls	r1, r2
 800215a:	000a      	movs	r2, r1
 800215c:	43d2      	mvns	r2, r2
 800215e:	401a      	ands	r2, r3
 8002160:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	019b      	lsls	r3, r3, #6
 8002166:	22ff      	movs	r2, #255	@ 0xff
 8002168:	401a      	ands	r2, r3
 800216a:	1dfb      	adds	r3, r7, #7
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	0018      	movs	r0, r3
 8002170:	2303      	movs	r3, #3
 8002172:	4003      	ands	r3, r0
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002178:	4809      	ldr	r0, [pc, #36]	@ (80021a0 <__NVIC_SetPriority+0xd8>)
 800217a:	1dfb      	adds	r3, r7, #7
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	001c      	movs	r4, r3
 8002180:	230f      	movs	r3, #15
 8002182:	4023      	ands	r3, r4
 8002184:	3b08      	subs	r3, #8
 8002186:	089b      	lsrs	r3, r3, #2
 8002188:	430a      	orrs	r2, r1
 800218a:	3306      	adds	r3, #6
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	18c3      	adds	r3, r0, r3
 8002190:	3304      	adds	r3, #4
 8002192:	601a      	str	r2, [r3, #0]
}
 8002194:	46c0      	nop			@ (mov r8, r8)
 8002196:	46bd      	mov	sp, r7
 8002198:	b003      	add	sp, #12
 800219a:	bd90      	pop	{r4, r7, pc}
 800219c:	e000e100 	.word	0xe000e100
 80021a0:	e000ed00 	.word	0xe000ed00

080021a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	1e5a      	subs	r2, r3, #1
 80021b0:	2380      	movs	r3, #128	@ 0x80
 80021b2:	045b      	lsls	r3, r3, #17
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d301      	bcc.n	80021bc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021b8:	2301      	movs	r3, #1
 80021ba:	e010      	b.n	80021de <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021bc:	4b0a      	ldr	r3, [pc, #40]	@ (80021e8 <SysTick_Config+0x44>)
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	3a01      	subs	r2, #1
 80021c2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021c4:	2301      	movs	r3, #1
 80021c6:	425b      	negs	r3, r3
 80021c8:	2103      	movs	r1, #3
 80021ca:	0018      	movs	r0, r3
 80021cc:	f7ff ff7c 	bl	80020c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021d0:	4b05      	ldr	r3, [pc, #20]	@ (80021e8 <SysTick_Config+0x44>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021d6:	4b04      	ldr	r3, [pc, #16]	@ (80021e8 <SysTick_Config+0x44>)
 80021d8:	2207      	movs	r2, #7
 80021da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021dc:	2300      	movs	r3, #0
}
 80021de:	0018      	movs	r0, r3
 80021e0:	46bd      	mov	sp, r7
 80021e2:	b002      	add	sp, #8
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	46c0      	nop			@ (mov r8, r8)
 80021e8:	e000e010 	.word	0xe000e010

080021ec <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60b9      	str	r1, [r7, #8]
 80021f4:	607a      	str	r2, [r7, #4]
 80021f6:	210f      	movs	r1, #15
 80021f8:	187b      	adds	r3, r7, r1
 80021fa:	1c02      	adds	r2, r0, #0
 80021fc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80021fe:	68ba      	ldr	r2, [r7, #8]
 8002200:	187b      	adds	r3, r7, r1
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	b25b      	sxtb	r3, r3
 8002206:	0011      	movs	r1, r2
 8002208:	0018      	movs	r0, r3
 800220a:	f7ff ff5d 	bl	80020c8 <__NVIC_SetPriority>
}
 800220e:	46c0      	nop			@ (mov r8, r8)
 8002210:	46bd      	mov	sp, r7
 8002212:	b004      	add	sp, #16
 8002214:	bd80      	pop	{r7, pc}

08002216 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b082      	sub	sp, #8
 800221a:	af00      	add	r7, sp, #0
 800221c:	0002      	movs	r2, r0
 800221e:	1dfb      	adds	r3, r7, #7
 8002220:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002222:	1dfb      	adds	r3, r7, #7
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	b25b      	sxtb	r3, r3
 8002228:	0018      	movs	r0, r3
 800222a:	f7ff ff33 	bl	8002094 <__NVIC_EnableIRQ>
}
 800222e:	46c0      	nop			@ (mov r8, r8)
 8002230:	46bd      	mov	sp, r7
 8002232:	b002      	add	sp, #8
 8002234:	bd80      	pop	{r7, pc}

08002236 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b082      	sub	sp, #8
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	0018      	movs	r0, r3
 8002242:	f7ff ffaf 	bl	80021a4 <SysTick_Config>
 8002246:	0003      	movs	r3, r0
}
 8002248:	0018      	movs	r0, r3
 800224a:	46bd      	mov	sp, r7
 800224c:	b002      	add	sp, #8
 800224e:	bd80      	pop	{r7, pc}

08002250 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800225a:	2300      	movs	r3, #0
 800225c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800225e:	e147      	b.n	80024f0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2101      	movs	r1, #1
 8002266:	697a      	ldr	r2, [r7, #20]
 8002268:	4091      	lsls	r1, r2
 800226a:	000a      	movs	r2, r1
 800226c:	4013      	ands	r3, r2
 800226e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d100      	bne.n	8002278 <HAL_GPIO_Init+0x28>
 8002276:	e138      	b.n	80024ea <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	2203      	movs	r2, #3
 800227e:	4013      	ands	r3, r2
 8002280:	2b01      	cmp	r3, #1
 8002282:	d005      	beq.n	8002290 <HAL_GPIO_Init+0x40>
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	2203      	movs	r2, #3
 800228a:	4013      	ands	r3, r2
 800228c:	2b02      	cmp	r3, #2
 800228e:	d130      	bne.n	80022f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	2203      	movs	r2, #3
 800229c:	409a      	lsls	r2, r3
 800229e:	0013      	movs	r3, r2
 80022a0:	43da      	mvns	r2, r3
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	4013      	ands	r3, r2
 80022a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	68da      	ldr	r2, [r3, #12]
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	409a      	lsls	r2, r3
 80022b2:	0013      	movs	r3, r2
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022c6:	2201      	movs	r2, #1
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	409a      	lsls	r2, r3
 80022cc:	0013      	movs	r3, r2
 80022ce:	43da      	mvns	r2, r3
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	4013      	ands	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	091b      	lsrs	r3, r3, #4
 80022dc:	2201      	movs	r2, #1
 80022de:	401a      	ands	r2, r3
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	409a      	lsls	r2, r3
 80022e4:	0013      	movs	r3, r2
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2203      	movs	r2, #3
 80022f8:	4013      	ands	r3, r2
 80022fa:	2b03      	cmp	r3, #3
 80022fc:	d017      	beq.n	800232e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	2203      	movs	r2, #3
 800230a:	409a      	lsls	r2, r3
 800230c:	0013      	movs	r3, r2
 800230e:	43da      	mvns	r2, r3
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	4013      	ands	r3, r2
 8002314:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	689a      	ldr	r2, [r3, #8]
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	409a      	lsls	r2, r3
 8002320:	0013      	movs	r3, r2
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	4313      	orrs	r3, r2
 8002326:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	2203      	movs	r2, #3
 8002334:	4013      	ands	r3, r2
 8002336:	2b02      	cmp	r3, #2
 8002338:	d123      	bne.n	8002382 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	08da      	lsrs	r2, r3, #3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	3208      	adds	r2, #8
 8002342:	0092      	lsls	r2, r2, #2
 8002344:	58d3      	ldr	r3, [r2, r3]
 8002346:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	2207      	movs	r2, #7
 800234c:	4013      	ands	r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	220f      	movs	r2, #15
 8002352:	409a      	lsls	r2, r3
 8002354:	0013      	movs	r3, r2
 8002356:	43da      	mvns	r2, r3
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	4013      	ands	r3, r2
 800235c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	691a      	ldr	r2, [r3, #16]
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	2107      	movs	r1, #7
 8002366:	400b      	ands	r3, r1
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	409a      	lsls	r2, r3
 800236c:	0013      	movs	r3, r2
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	4313      	orrs	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	08da      	lsrs	r2, r3, #3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3208      	adds	r2, #8
 800237c:	0092      	lsls	r2, r2, #2
 800237e:	6939      	ldr	r1, [r7, #16]
 8002380:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	2203      	movs	r2, #3
 800238e:	409a      	lsls	r2, r3
 8002390:	0013      	movs	r3, r2
 8002392:	43da      	mvns	r2, r3
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	4013      	ands	r3, r2
 8002398:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2203      	movs	r2, #3
 80023a0:	401a      	ands	r2, r3
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	409a      	lsls	r2, r3
 80023a8:	0013      	movs	r3, r2
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	23c0      	movs	r3, #192	@ 0xc0
 80023bc:	029b      	lsls	r3, r3, #10
 80023be:	4013      	ands	r3, r2
 80023c0:	d100      	bne.n	80023c4 <HAL_GPIO_Init+0x174>
 80023c2:	e092      	b.n	80024ea <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80023c4:	4a50      	ldr	r2, [pc, #320]	@ (8002508 <HAL_GPIO_Init+0x2b8>)
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	089b      	lsrs	r3, r3, #2
 80023ca:	3318      	adds	r3, #24
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	589b      	ldr	r3, [r3, r2]
 80023d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	2203      	movs	r2, #3
 80023d6:	4013      	ands	r3, r2
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	220f      	movs	r2, #15
 80023dc:	409a      	lsls	r2, r3
 80023de:	0013      	movs	r3, r2
 80023e0:	43da      	mvns	r2, r3
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	4013      	ands	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	23a0      	movs	r3, #160	@ 0xa0
 80023ec:	05db      	lsls	r3, r3, #23
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d013      	beq.n	800241a <HAL_GPIO_Init+0x1ca>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a45      	ldr	r2, [pc, #276]	@ (800250c <HAL_GPIO_Init+0x2bc>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d00d      	beq.n	8002416 <HAL_GPIO_Init+0x1c6>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a44      	ldr	r2, [pc, #272]	@ (8002510 <HAL_GPIO_Init+0x2c0>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d007      	beq.n	8002412 <HAL_GPIO_Init+0x1c2>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a43      	ldr	r2, [pc, #268]	@ (8002514 <HAL_GPIO_Init+0x2c4>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d101      	bne.n	800240e <HAL_GPIO_Init+0x1be>
 800240a:	2303      	movs	r3, #3
 800240c:	e006      	b.n	800241c <HAL_GPIO_Init+0x1cc>
 800240e:	2305      	movs	r3, #5
 8002410:	e004      	b.n	800241c <HAL_GPIO_Init+0x1cc>
 8002412:	2302      	movs	r3, #2
 8002414:	e002      	b.n	800241c <HAL_GPIO_Init+0x1cc>
 8002416:	2301      	movs	r3, #1
 8002418:	e000      	b.n	800241c <HAL_GPIO_Init+0x1cc>
 800241a:	2300      	movs	r3, #0
 800241c:	697a      	ldr	r2, [r7, #20]
 800241e:	2103      	movs	r1, #3
 8002420:	400a      	ands	r2, r1
 8002422:	00d2      	lsls	r2, r2, #3
 8002424:	4093      	lsls	r3, r2
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	4313      	orrs	r3, r2
 800242a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800242c:	4936      	ldr	r1, [pc, #216]	@ (8002508 <HAL_GPIO_Init+0x2b8>)
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	089b      	lsrs	r3, r3, #2
 8002432:	3318      	adds	r3, #24
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800243a:	4b33      	ldr	r3, [pc, #204]	@ (8002508 <HAL_GPIO_Init+0x2b8>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	43da      	mvns	r2, r3
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	4013      	ands	r3, r2
 8002448:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685a      	ldr	r2, [r3, #4]
 800244e:	2380      	movs	r3, #128	@ 0x80
 8002450:	035b      	lsls	r3, r3, #13
 8002452:	4013      	ands	r3, r2
 8002454:	d003      	beq.n	800245e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	4313      	orrs	r3, r2
 800245c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800245e:	4b2a      	ldr	r3, [pc, #168]	@ (8002508 <HAL_GPIO_Init+0x2b8>)
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002464:	4b28      	ldr	r3, [pc, #160]	@ (8002508 <HAL_GPIO_Init+0x2b8>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	43da      	mvns	r2, r3
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	4013      	ands	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	2380      	movs	r3, #128	@ 0x80
 800247a:	039b      	lsls	r3, r3, #14
 800247c:	4013      	ands	r3, r2
 800247e:	d003      	beq.n	8002488 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	4313      	orrs	r3, r2
 8002486:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002488:	4b1f      	ldr	r3, [pc, #124]	@ (8002508 <HAL_GPIO_Init+0x2b8>)
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800248e:	4a1e      	ldr	r2, [pc, #120]	@ (8002508 <HAL_GPIO_Init+0x2b8>)
 8002490:	2384      	movs	r3, #132	@ 0x84
 8002492:	58d3      	ldr	r3, [r2, r3]
 8002494:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	43da      	mvns	r2, r3
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	4013      	ands	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	2380      	movs	r3, #128	@ 0x80
 80024a6:	029b      	lsls	r3, r3, #10
 80024a8:	4013      	ands	r3, r2
 80024aa:	d003      	beq.n	80024b4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024b4:	4914      	ldr	r1, [pc, #80]	@ (8002508 <HAL_GPIO_Init+0x2b8>)
 80024b6:	2284      	movs	r2, #132	@ 0x84
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80024bc:	4a12      	ldr	r2, [pc, #72]	@ (8002508 <HAL_GPIO_Init+0x2b8>)
 80024be:	2380      	movs	r3, #128	@ 0x80
 80024c0:	58d3      	ldr	r3, [r2, r3]
 80024c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	43da      	mvns	r2, r3
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	4013      	ands	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685a      	ldr	r2, [r3, #4]
 80024d2:	2380      	movs	r3, #128	@ 0x80
 80024d4:	025b      	lsls	r3, r3, #9
 80024d6:	4013      	ands	r3, r2
 80024d8:	d003      	beq.n	80024e2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	4313      	orrs	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024e2:	4909      	ldr	r1, [pc, #36]	@ (8002508 <HAL_GPIO_Init+0x2b8>)
 80024e4:	2280      	movs	r2, #128	@ 0x80
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	3301      	adds	r3, #1
 80024ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	40da      	lsrs	r2, r3
 80024f8:	1e13      	subs	r3, r2, #0
 80024fa:	d000      	beq.n	80024fe <HAL_GPIO_Init+0x2ae>
 80024fc:	e6b0      	b.n	8002260 <HAL_GPIO_Init+0x10>
  }
}
 80024fe:	46c0      	nop			@ (mov r8, r8)
 8002500:	46c0      	nop			@ (mov r8, r8)
 8002502:	46bd      	mov	sp, r7
 8002504:	b006      	add	sp, #24
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40021800 	.word	0x40021800
 800250c:	50000400 	.word	0x50000400
 8002510:	50000800 	.word	0x50000800
 8002514:	50000c00 	.word	0x50000c00

08002518 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	0008      	movs	r0, r1
 8002522:	0011      	movs	r1, r2
 8002524:	1cbb      	adds	r3, r7, #2
 8002526:	1c02      	adds	r2, r0, #0
 8002528:	801a      	strh	r2, [r3, #0]
 800252a:	1c7b      	adds	r3, r7, #1
 800252c:	1c0a      	adds	r2, r1, #0
 800252e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002530:	1c7b      	adds	r3, r7, #1
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d004      	beq.n	8002542 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002538:	1cbb      	adds	r3, r7, #2
 800253a:	881a      	ldrh	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002540:	e003      	b.n	800254a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002542:	1cbb      	adds	r3, r7, #2
 8002544:	881a      	ldrh	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800254a:	46c0      	nop			@ (mov r8, r8)
 800254c:	46bd      	mov	sp, r7
 800254e:	b002      	add	sp, #8
 8002550:	bd80      	pop	{r7, pc}
	...

08002554 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800255c:	4b19      	ldr	r3, [pc, #100]	@ (80025c4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a19      	ldr	r2, [pc, #100]	@ (80025c8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002562:	4013      	ands	r3, r2
 8002564:	0019      	movs	r1, r3
 8002566:	4b17      	ldr	r3, [pc, #92]	@ (80025c4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	430a      	orrs	r2, r1
 800256c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	2380      	movs	r3, #128	@ 0x80
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	429a      	cmp	r2, r3
 8002576:	d11f      	bne.n	80025b8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002578:	4b14      	ldr	r3, [pc, #80]	@ (80025cc <HAL_PWREx_ControlVoltageScaling+0x78>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	0013      	movs	r3, r2
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	189b      	adds	r3, r3, r2
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	4912      	ldr	r1, [pc, #72]	@ (80025d0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002586:	0018      	movs	r0, r3
 8002588:	f7fd fdc4 	bl	8000114 <__udivsi3>
 800258c:	0003      	movs	r3, r0
 800258e:	3301      	adds	r3, #1
 8002590:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002592:	e008      	b.n	80025a6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	3b01      	subs	r3, #1
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	e001      	b.n	80025a6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e009      	b.n	80025ba <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025a6:	4b07      	ldr	r3, [pc, #28]	@ (80025c4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80025a8:	695a      	ldr	r2, [r3, #20]
 80025aa:	2380      	movs	r3, #128	@ 0x80
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	401a      	ands	r2, r3
 80025b0:	2380      	movs	r3, #128	@ 0x80
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d0ed      	beq.n	8002594 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	0018      	movs	r0, r3
 80025bc:	46bd      	mov	sp, r7
 80025be:	b004      	add	sp, #16
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	46c0      	nop			@ (mov r8, r8)
 80025c4:	40007000 	.word	0x40007000
 80025c8:	fffff9ff 	.word	0xfffff9ff
 80025cc:	20000000 	.word	0x20000000
 80025d0:	000f4240 	.word	0x000f4240

080025d4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80025d8:	4b03      	ldr	r3, [pc, #12]	@ (80025e8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	23e0      	movs	r3, #224	@ 0xe0
 80025de:	01db      	lsls	r3, r3, #7
 80025e0:	4013      	ands	r3, r2
}
 80025e2:	0018      	movs	r0, r3
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40021000 	.word	0x40021000

080025ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b088      	sub	sp, #32
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e2f3      	b.n	8002be6 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2201      	movs	r2, #1
 8002604:	4013      	ands	r3, r2
 8002606:	d100      	bne.n	800260a <HAL_RCC_OscConfig+0x1e>
 8002608:	e07c      	b.n	8002704 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800260a:	4bc3      	ldr	r3, [pc, #780]	@ (8002918 <HAL_RCC_OscConfig+0x32c>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	2238      	movs	r2, #56	@ 0x38
 8002610:	4013      	ands	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002614:	4bc0      	ldr	r3, [pc, #768]	@ (8002918 <HAL_RCC_OscConfig+0x32c>)
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	2203      	movs	r2, #3
 800261a:	4013      	ands	r3, r2
 800261c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	2b10      	cmp	r3, #16
 8002622:	d102      	bne.n	800262a <HAL_RCC_OscConfig+0x3e>
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	2b03      	cmp	r3, #3
 8002628:	d002      	beq.n	8002630 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	2b08      	cmp	r3, #8
 800262e:	d10b      	bne.n	8002648 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002630:	4bb9      	ldr	r3, [pc, #740]	@ (8002918 <HAL_RCC_OscConfig+0x32c>)
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	2380      	movs	r3, #128	@ 0x80
 8002636:	029b      	lsls	r3, r3, #10
 8002638:	4013      	ands	r3, r2
 800263a:	d062      	beq.n	8002702 <HAL_RCC_OscConfig+0x116>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d15e      	bne.n	8002702 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e2ce      	b.n	8002be6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	2380      	movs	r3, #128	@ 0x80
 800264e:	025b      	lsls	r3, r3, #9
 8002650:	429a      	cmp	r2, r3
 8002652:	d107      	bne.n	8002664 <HAL_RCC_OscConfig+0x78>
 8002654:	4bb0      	ldr	r3, [pc, #704]	@ (8002918 <HAL_RCC_OscConfig+0x32c>)
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	4baf      	ldr	r3, [pc, #700]	@ (8002918 <HAL_RCC_OscConfig+0x32c>)
 800265a:	2180      	movs	r1, #128	@ 0x80
 800265c:	0249      	lsls	r1, r1, #9
 800265e:	430a      	orrs	r2, r1
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	e020      	b.n	80026a6 <HAL_RCC_OscConfig+0xba>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	23a0      	movs	r3, #160	@ 0xa0
 800266a:	02db      	lsls	r3, r3, #11
 800266c:	429a      	cmp	r2, r3
 800266e:	d10e      	bne.n	800268e <HAL_RCC_OscConfig+0xa2>
 8002670:	4ba9      	ldr	r3, [pc, #676]	@ (8002918 <HAL_RCC_OscConfig+0x32c>)
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	4ba8      	ldr	r3, [pc, #672]	@ (8002918 <HAL_RCC_OscConfig+0x32c>)
 8002676:	2180      	movs	r1, #128	@ 0x80
 8002678:	02c9      	lsls	r1, r1, #11
 800267a:	430a      	orrs	r2, r1
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	4ba6      	ldr	r3, [pc, #664]	@ (8002918 <HAL_RCC_OscConfig+0x32c>)
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	4ba5      	ldr	r3, [pc, #660]	@ (8002918 <HAL_RCC_OscConfig+0x32c>)
 8002684:	2180      	movs	r1, #128	@ 0x80
 8002686:	0249      	lsls	r1, r1, #9
 8002688:	430a      	orrs	r2, r1
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	e00b      	b.n	80026a6 <HAL_RCC_OscConfig+0xba>
 800268e:	4ba2      	ldr	r3, [pc, #648]	@ (8002918 <HAL_RCC_OscConfig+0x32c>)
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	4ba1      	ldr	r3, [pc, #644]	@ (8002918 <HAL_RCC_OscConfig+0x32c>)
 8002694:	49a1      	ldr	r1, [pc, #644]	@ (800291c <HAL_RCC_OscConfig+0x330>)
 8002696:	400a      	ands	r2, r1
 8002698:	601a      	str	r2, [r3, #0]
 800269a:	4b9f      	ldr	r3, [pc, #636]	@ (8002918 <HAL_RCC_OscConfig+0x32c>)
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	4b9e      	ldr	r3, [pc, #632]	@ (8002918 <HAL_RCC_OscConfig+0x32c>)
 80026a0:	499f      	ldr	r1, [pc, #636]	@ (8002920 <HAL_RCC_OscConfig+0x334>)
 80026a2:	400a      	ands	r2, r1
 80026a4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d014      	beq.n	80026d8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ae:	f7fe fd89 	bl	80011c4 <HAL_GetTick>
 80026b2:	0003      	movs	r3, r0
 80026b4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026b8:	f7fe fd84 	bl	80011c4 <HAL_GetTick>
 80026bc:	0002      	movs	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b64      	cmp	r3, #100	@ 0x64
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e28d      	b.n	8002be6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026ca:	4b93      	ldr	r3, [pc, #588]	@ (8002918 <HAL_RCC_OscConfig+0x32c>)
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	2380      	movs	r3, #128	@ 0x80
 80026d0:	029b      	lsls	r3, r3, #10
 80026d2:	4013      	ands	r3, r2
 80026d4:	d0f0      	beq.n	80026b8 <HAL_RCC_OscConfig+0xcc>
 80026d6:	e015      	b.n	8002704 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d8:	f7fe fd74 	bl	80011c4 <HAL_GetTick>
 80026dc:	0003      	movs	r3, r0
 80026de:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026e0:	e008      	b.n	80026f4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026e2:	f7fe fd6f 	bl	80011c4 <HAL_GetTick>
 80026e6:	0002      	movs	r2, r0
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b64      	cmp	r3, #100	@ 0x64
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e278      	b.n	8002be6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026f4:	4b88      	ldr	r3, [pc, #544]	@ (8002918 <HAL_RCC_OscConfig+0x32c>)
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	2380      	movs	r3, #128	@ 0x80
 80026fa:	029b      	lsls	r3, r3, #10
 80026fc:	4013      	ands	r3, r2
 80026fe:	d1f0      	bne.n	80026e2 <HAL_RCC_OscConfig+0xf6>
 8002700:	e000      	b.n	8002704 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002702:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2202      	movs	r2, #2
 800270a:	4013      	ands	r3, r2
 800270c:	d100      	bne.n	8002710 <HAL_RCC_OscConfig+0x124>
 800270e:	e099      	b.n	8002844 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002710:	4b81      	ldr	r3, [pc, #516]	@ (8002918 <HAL_RCC_OscConfig+0x32c>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	2238      	movs	r2, #56	@ 0x38
 8002716:	4013      	ands	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800271a:	4b7f      	ldr	r3, [pc, #508]	@ (8002918 <HAL_RCC_OscConfig+0x32c>)
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	2203      	movs	r2, #3
 8002720:	4013      	ands	r3, r2
 8002722:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	2b10      	cmp	r3, #16
 8002728:	d102      	bne.n	8002730 <HAL_RCC_OscConfig+0x144>
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	2b02      	cmp	r3, #2
 800272e:	d002      	beq.n	8002736 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d135      	bne.n	80027a2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002736:	4b78      	ldr	r3, [pc, #480]	@ (8002918 <HAL_RCC_OscConfig+0x32c>)
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	2380      	movs	r3, #128	@ 0x80
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	4013      	ands	r3, r2
 8002740:	d005      	beq.n	800274e <HAL_RCC_OscConfig+0x162>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e24b      	b.n	8002be6 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800274e:	4b72      	ldr	r3, [pc, #456]	@ (8002918 <HAL_RCC_OscConfig+0x32c>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	4a74      	ldr	r2, [pc, #464]	@ (8002924 <HAL_RCC_OscConfig+0x338>)
 8002754:	4013      	ands	r3, r2
 8002756:	0019      	movs	r1, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	021a      	lsls	r2, r3, #8
 800275e:	4b6e      	ldr	r3, [pc, #440]	@ (8002918 <HAL_RCC_OscConfig+0x32c>)
 8002760:	430a      	orrs	r2, r1
 8002762:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d112      	bne.n	8002790 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800276a:	4b6b      	ldr	r3, [pc, #428]	@ (8002918 <HAL_RCC_OscConfig+0x32c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a6e      	ldr	r2, [pc, #440]	@ (8002928 <HAL_RCC_OscConfig+0x33c>)
 8002770:	4013      	ands	r3, r2
 8002772:	0019      	movs	r1, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	691a      	ldr	r2, [r3, #16]
 8002778:	4b67      	ldr	r3, [pc, #412]	@ (8002918 <HAL_RCC_OscConfig+0x32c>)
 800277a:	430a      	orrs	r2, r1
 800277c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800277e:	4b66      	ldr	r3, [pc, #408]	@ (8002918 <HAL_RCC_OscConfig+0x32c>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	0adb      	lsrs	r3, r3, #11
 8002784:	2207      	movs	r2, #7
 8002786:	4013      	ands	r3, r2
 8002788:	4a68      	ldr	r2, [pc, #416]	@ (800292c <HAL_RCC_OscConfig+0x340>)
 800278a:	40da      	lsrs	r2, r3
 800278c:	4b68      	ldr	r3, [pc, #416]	@ (8002930 <HAL_RCC_OscConfig+0x344>)
 800278e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002790:	4b68      	ldr	r3, [pc, #416]	@ (8002934 <HAL_RCC_OscConfig+0x348>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	0018      	movs	r0, r3
 8002796:	f7fe fcb9 	bl	800110c <HAL_InitTick>
 800279a:	1e03      	subs	r3, r0, #0
 800279c:	d051      	beq.n	8002842 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e221      	b.n	8002be6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d030      	beq.n	800280c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80027aa:	4b5b      	ldr	r3, [pc, #364]	@ (8002918 <HAL_RCC_OscConfig+0x32c>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a5e      	ldr	r2, [pc, #376]	@ (8002928 <HAL_RCC_OscConfig+0x33c>)
 80027b0:	4013      	ands	r3, r2
 80027b2:	0019      	movs	r1, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	691a      	ldr	r2, [r3, #16]
 80027b8:	4b57      	ldr	r3, [pc, #348]	@ (8002918 <HAL_RCC_OscConfig+0x32c>)
 80027ba:	430a      	orrs	r2, r1
 80027bc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80027be:	4b56      	ldr	r3, [pc, #344]	@ (8002918 <HAL_RCC_OscConfig+0x32c>)
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	4b55      	ldr	r3, [pc, #340]	@ (8002918 <HAL_RCC_OscConfig+0x32c>)
 80027c4:	2180      	movs	r1, #128	@ 0x80
 80027c6:	0049      	lsls	r1, r1, #1
 80027c8:	430a      	orrs	r2, r1
 80027ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027cc:	f7fe fcfa 	bl	80011c4 <HAL_GetTick>
 80027d0:	0003      	movs	r3, r0
 80027d2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027d4:	e008      	b.n	80027e8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027d6:	f7fe fcf5 	bl	80011c4 <HAL_GetTick>
 80027da:	0002      	movs	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e1fe      	b.n	8002be6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027e8:	4b4b      	ldr	r3, [pc, #300]	@ (8002918 <HAL_RCC_OscConfig+0x32c>)
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	2380      	movs	r3, #128	@ 0x80
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	4013      	ands	r3, r2
 80027f2:	d0f0      	beq.n	80027d6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f4:	4b48      	ldr	r3, [pc, #288]	@ (8002918 <HAL_RCC_OscConfig+0x32c>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	4a4a      	ldr	r2, [pc, #296]	@ (8002924 <HAL_RCC_OscConfig+0x338>)
 80027fa:	4013      	ands	r3, r2
 80027fc:	0019      	movs	r1, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	021a      	lsls	r2, r3, #8
 8002804:	4b44      	ldr	r3, [pc, #272]	@ (8002918 <HAL_RCC_OscConfig+0x32c>)
 8002806:	430a      	orrs	r2, r1
 8002808:	605a      	str	r2, [r3, #4]
 800280a:	e01b      	b.n	8002844 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800280c:	4b42      	ldr	r3, [pc, #264]	@ (8002918 <HAL_RCC_OscConfig+0x32c>)
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	4b41      	ldr	r3, [pc, #260]	@ (8002918 <HAL_RCC_OscConfig+0x32c>)
 8002812:	4949      	ldr	r1, [pc, #292]	@ (8002938 <HAL_RCC_OscConfig+0x34c>)
 8002814:	400a      	ands	r2, r1
 8002816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002818:	f7fe fcd4 	bl	80011c4 <HAL_GetTick>
 800281c:	0003      	movs	r3, r0
 800281e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002820:	e008      	b.n	8002834 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002822:	f7fe fccf 	bl	80011c4 <HAL_GetTick>
 8002826:	0002      	movs	r2, r0
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e1d8      	b.n	8002be6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002834:	4b38      	ldr	r3, [pc, #224]	@ (8002918 <HAL_RCC_OscConfig+0x32c>)
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	2380      	movs	r3, #128	@ 0x80
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	4013      	ands	r3, r2
 800283e:	d1f0      	bne.n	8002822 <HAL_RCC_OscConfig+0x236>
 8002840:	e000      	b.n	8002844 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002842:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2208      	movs	r2, #8
 800284a:	4013      	ands	r3, r2
 800284c:	d047      	beq.n	80028de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800284e:	4b32      	ldr	r3, [pc, #200]	@ (8002918 <HAL_RCC_OscConfig+0x32c>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	2238      	movs	r2, #56	@ 0x38
 8002854:	4013      	ands	r3, r2
 8002856:	2b18      	cmp	r3, #24
 8002858:	d10a      	bne.n	8002870 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800285a:	4b2f      	ldr	r3, [pc, #188]	@ (8002918 <HAL_RCC_OscConfig+0x32c>)
 800285c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800285e:	2202      	movs	r2, #2
 8002860:	4013      	ands	r3, r2
 8002862:	d03c      	beq.n	80028de <HAL_RCC_OscConfig+0x2f2>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d138      	bne.n	80028de <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e1ba      	b.n	8002be6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d019      	beq.n	80028ac <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002878:	4b27      	ldr	r3, [pc, #156]	@ (8002918 <HAL_RCC_OscConfig+0x32c>)
 800287a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800287c:	4b26      	ldr	r3, [pc, #152]	@ (8002918 <HAL_RCC_OscConfig+0x32c>)
 800287e:	2101      	movs	r1, #1
 8002880:	430a      	orrs	r2, r1
 8002882:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002884:	f7fe fc9e 	bl	80011c4 <HAL_GetTick>
 8002888:	0003      	movs	r3, r0
 800288a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800288c:	e008      	b.n	80028a0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800288e:	f7fe fc99 	bl	80011c4 <HAL_GetTick>
 8002892:	0002      	movs	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e1a2      	b.n	8002be6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002918 <HAL_RCC_OscConfig+0x32c>)
 80028a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028a4:	2202      	movs	r2, #2
 80028a6:	4013      	ands	r3, r2
 80028a8:	d0f1      	beq.n	800288e <HAL_RCC_OscConfig+0x2a2>
 80028aa:	e018      	b.n	80028de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80028ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002918 <HAL_RCC_OscConfig+0x32c>)
 80028ae:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80028b0:	4b19      	ldr	r3, [pc, #100]	@ (8002918 <HAL_RCC_OscConfig+0x32c>)
 80028b2:	2101      	movs	r1, #1
 80028b4:	438a      	bics	r2, r1
 80028b6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b8:	f7fe fc84 	bl	80011c4 <HAL_GetTick>
 80028bc:	0003      	movs	r3, r0
 80028be:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028c0:	e008      	b.n	80028d4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028c2:	f7fe fc7f 	bl	80011c4 <HAL_GetTick>
 80028c6:	0002      	movs	r2, r0
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e188      	b.n	8002be6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028d4:	4b10      	ldr	r3, [pc, #64]	@ (8002918 <HAL_RCC_OscConfig+0x32c>)
 80028d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028d8:	2202      	movs	r2, #2
 80028da:	4013      	ands	r3, r2
 80028dc:	d1f1      	bne.n	80028c2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2204      	movs	r2, #4
 80028e4:	4013      	ands	r3, r2
 80028e6:	d100      	bne.n	80028ea <HAL_RCC_OscConfig+0x2fe>
 80028e8:	e0c6      	b.n	8002a78 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ea:	231f      	movs	r3, #31
 80028ec:	18fb      	adds	r3, r7, r3
 80028ee:	2200      	movs	r2, #0
 80028f0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80028f2:	4b09      	ldr	r3, [pc, #36]	@ (8002918 <HAL_RCC_OscConfig+0x32c>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	2238      	movs	r2, #56	@ 0x38
 80028f8:	4013      	ands	r3, r2
 80028fa:	2b20      	cmp	r3, #32
 80028fc:	d11e      	bne.n	800293c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80028fe:	4b06      	ldr	r3, [pc, #24]	@ (8002918 <HAL_RCC_OscConfig+0x32c>)
 8002900:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002902:	2202      	movs	r2, #2
 8002904:	4013      	ands	r3, r2
 8002906:	d100      	bne.n	800290a <HAL_RCC_OscConfig+0x31e>
 8002908:	e0b6      	b.n	8002a78 <HAL_RCC_OscConfig+0x48c>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d000      	beq.n	8002914 <HAL_RCC_OscConfig+0x328>
 8002912:	e0b1      	b.n	8002a78 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e166      	b.n	8002be6 <HAL_RCC_OscConfig+0x5fa>
 8002918:	40021000 	.word	0x40021000
 800291c:	fffeffff 	.word	0xfffeffff
 8002920:	fffbffff 	.word	0xfffbffff
 8002924:	ffff80ff 	.word	0xffff80ff
 8002928:	ffffc7ff 	.word	0xffffc7ff
 800292c:	00f42400 	.word	0x00f42400
 8002930:	20000000 	.word	0x20000000
 8002934:	20000004 	.word	0x20000004
 8002938:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800293c:	4bac      	ldr	r3, [pc, #688]	@ (8002bf0 <HAL_RCC_OscConfig+0x604>)
 800293e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002940:	2380      	movs	r3, #128	@ 0x80
 8002942:	055b      	lsls	r3, r3, #21
 8002944:	4013      	ands	r3, r2
 8002946:	d101      	bne.n	800294c <HAL_RCC_OscConfig+0x360>
 8002948:	2301      	movs	r3, #1
 800294a:	e000      	b.n	800294e <HAL_RCC_OscConfig+0x362>
 800294c:	2300      	movs	r3, #0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d011      	beq.n	8002976 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002952:	4ba7      	ldr	r3, [pc, #668]	@ (8002bf0 <HAL_RCC_OscConfig+0x604>)
 8002954:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002956:	4ba6      	ldr	r3, [pc, #664]	@ (8002bf0 <HAL_RCC_OscConfig+0x604>)
 8002958:	2180      	movs	r1, #128	@ 0x80
 800295a:	0549      	lsls	r1, r1, #21
 800295c:	430a      	orrs	r2, r1
 800295e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002960:	4ba3      	ldr	r3, [pc, #652]	@ (8002bf0 <HAL_RCC_OscConfig+0x604>)
 8002962:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002964:	2380      	movs	r3, #128	@ 0x80
 8002966:	055b      	lsls	r3, r3, #21
 8002968:	4013      	ands	r3, r2
 800296a:	60fb      	str	r3, [r7, #12]
 800296c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800296e:	231f      	movs	r3, #31
 8002970:	18fb      	adds	r3, r7, r3
 8002972:	2201      	movs	r2, #1
 8002974:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002976:	4b9f      	ldr	r3, [pc, #636]	@ (8002bf4 <HAL_RCC_OscConfig+0x608>)
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	2380      	movs	r3, #128	@ 0x80
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	4013      	ands	r3, r2
 8002980:	d11a      	bne.n	80029b8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002982:	4b9c      	ldr	r3, [pc, #624]	@ (8002bf4 <HAL_RCC_OscConfig+0x608>)
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	4b9b      	ldr	r3, [pc, #620]	@ (8002bf4 <HAL_RCC_OscConfig+0x608>)
 8002988:	2180      	movs	r1, #128	@ 0x80
 800298a:	0049      	lsls	r1, r1, #1
 800298c:	430a      	orrs	r2, r1
 800298e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002990:	f7fe fc18 	bl	80011c4 <HAL_GetTick>
 8002994:	0003      	movs	r3, r0
 8002996:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002998:	e008      	b.n	80029ac <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800299a:	f7fe fc13 	bl	80011c4 <HAL_GetTick>
 800299e:	0002      	movs	r2, r0
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d901      	bls.n	80029ac <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e11c      	b.n	8002be6 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029ac:	4b91      	ldr	r3, [pc, #580]	@ (8002bf4 <HAL_RCC_OscConfig+0x608>)
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	2380      	movs	r3, #128	@ 0x80
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	4013      	ands	r3, r2
 80029b6:	d0f0      	beq.n	800299a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d106      	bne.n	80029ce <HAL_RCC_OscConfig+0x3e2>
 80029c0:	4b8b      	ldr	r3, [pc, #556]	@ (8002bf0 <HAL_RCC_OscConfig+0x604>)
 80029c2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80029c4:	4b8a      	ldr	r3, [pc, #552]	@ (8002bf0 <HAL_RCC_OscConfig+0x604>)
 80029c6:	2101      	movs	r1, #1
 80029c8:	430a      	orrs	r2, r1
 80029ca:	65da      	str	r2, [r3, #92]	@ 0x5c
 80029cc:	e01c      	b.n	8002a08 <HAL_RCC_OscConfig+0x41c>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	2b05      	cmp	r3, #5
 80029d4:	d10c      	bne.n	80029f0 <HAL_RCC_OscConfig+0x404>
 80029d6:	4b86      	ldr	r3, [pc, #536]	@ (8002bf0 <HAL_RCC_OscConfig+0x604>)
 80029d8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80029da:	4b85      	ldr	r3, [pc, #532]	@ (8002bf0 <HAL_RCC_OscConfig+0x604>)
 80029dc:	2104      	movs	r1, #4
 80029de:	430a      	orrs	r2, r1
 80029e0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80029e2:	4b83      	ldr	r3, [pc, #524]	@ (8002bf0 <HAL_RCC_OscConfig+0x604>)
 80029e4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80029e6:	4b82      	ldr	r3, [pc, #520]	@ (8002bf0 <HAL_RCC_OscConfig+0x604>)
 80029e8:	2101      	movs	r1, #1
 80029ea:	430a      	orrs	r2, r1
 80029ec:	65da      	str	r2, [r3, #92]	@ 0x5c
 80029ee:	e00b      	b.n	8002a08 <HAL_RCC_OscConfig+0x41c>
 80029f0:	4b7f      	ldr	r3, [pc, #508]	@ (8002bf0 <HAL_RCC_OscConfig+0x604>)
 80029f2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80029f4:	4b7e      	ldr	r3, [pc, #504]	@ (8002bf0 <HAL_RCC_OscConfig+0x604>)
 80029f6:	2101      	movs	r1, #1
 80029f8:	438a      	bics	r2, r1
 80029fa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80029fc:	4b7c      	ldr	r3, [pc, #496]	@ (8002bf0 <HAL_RCC_OscConfig+0x604>)
 80029fe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002a00:	4b7b      	ldr	r3, [pc, #492]	@ (8002bf0 <HAL_RCC_OscConfig+0x604>)
 8002a02:	2104      	movs	r1, #4
 8002a04:	438a      	bics	r2, r1
 8002a06:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d014      	beq.n	8002a3a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a10:	f7fe fbd8 	bl	80011c4 <HAL_GetTick>
 8002a14:	0003      	movs	r3, r0
 8002a16:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a18:	e009      	b.n	8002a2e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a1a:	f7fe fbd3 	bl	80011c4 <HAL_GetTick>
 8002a1e:	0002      	movs	r2, r0
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	4a74      	ldr	r2, [pc, #464]	@ (8002bf8 <HAL_RCC_OscConfig+0x60c>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e0db      	b.n	8002be6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a2e:	4b70      	ldr	r3, [pc, #448]	@ (8002bf0 <HAL_RCC_OscConfig+0x604>)
 8002a30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a32:	2202      	movs	r2, #2
 8002a34:	4013      	ands	r3, r2
 8002a36:	d0f0      	beq.n	8002a1a <HAL_RCC_OscConfig+0x42e>
 8002a38:	e013      	b.n	8002a62 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3a:	f7fe fbc3 	bl	80011c4 <HAL_GetTick>
 8002a3e:	0003      	movs	r3, r0
 8002a40:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a42:	e009      	b.n	8002a58 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a44:	f7fe fbbe 	bl	80011c4 <HAL_GetTick>
 8002a48:	0002      	movs	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	4a6a      	ldr	r2, [pc, #424]	@ (8002bf8 <HAL_RCC_OscConfig+0x60c>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e0c6      	b.n	8002be6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a58:	4b65      	ldr	r3, [pc, #404]	@ (8002bf0 <HAL_RCC_OscConfig+0x604>)
 8002a5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a5c:	2202      	movs	r2, #2
 8002a5e:	4013      	ands	r3, r2
 8002a60:	d1f0      	bne.n	8002a44 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002a62:	231f      	movs	r3, #31
 8002a64:	18fb      	adds	r3, r7, r3
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d105      	bne.n	8002a78 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002a6c:	4b60      	ldr	r3, [pc, #384]	@ (8002bf0 <HAL_RCC_OscConfig+0x604>)
 8002a6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a70:	4b5f      	ldr	r3, [pc, #380]	@ (8002bf0 <HAL_RCC_OscConfig+0x604>)
 8002a72:	4962      	ldr	r1, [pc, #392]	@ (8002bfc <HAL_RCC_OscConfig+0x610>)
 8002a74:	400a      	ands	r2, r1
 8002a76:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	69db      	ldr	r3, [r3, #28]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d100      	bne.n	8002a82 <HAL_RCC_OscConfig+0x496>
 8002a80:	e0b0      	b.n	8002be4 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a82:	4b5b      	ldr	r3, [pc, #364]	@ (8002bf0 <HAL_RCC_OscConfig+0x604>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	2238      	movs	r2, #56	@ 0x38
 8002a88:	4013      	ands	r3, r2
 8002a8a:	2b10      	cmp	r3, #16
 8002a8c:	d100      	bne.n	8002a90 <HAL_RCC_OscConfig+0x4a4>
 8002a8e:	e078      	b.n	8002b82 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	69db      	ldr	r3, [r3, #28]
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d153      	bne.n	8002b40 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a98:	4b55      	ldr	r3, [pc, #340]	@ (8002bf0 <HAL_RCC_OscConfig+0x604>)
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	4b54      	ldr	r3, [pc, #336]	@ (8002bf0 <HAL_RCC_OscConfig+0x604>)
 8002a9e:	4958      	ldr	r1, [pc, #352]	@ (8002c00 <HAL_RCC_OscConfig+0x614>)
 8002aa0:	400a      	ands	r2, r1
 8002aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa4:	f7fe fb8e 	bl	80011c4 <HAL_GetTick>
 8002aa8:	0003      	movs	r3, r0
 8002aaa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002aac:	e008      	b.n	8002ac0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aae:	f7fe fb89 	bl	80011c4 <HAL_GetTick>
 8002ab2:	0002      	movs	r2, r0
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e092      	b.n	8002be6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ac0:	4b4b      	ldr	r3, [pc, #300]	@ (8002bf0 <HAL_RCC_OscConfig+0x604>)
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	2380      	movs	r3, #128	@ 0x80
 8002ac6:	049b      	lsls	r3, r3, #18
 8002ac8:	4013      	ands	r3, r2
 8002aca:	d1f0      	bne.n	8002aae <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002acc:	4b48      	ldr	r3, [pc, #288]	@ (8002bf0 <HAL_RCC_OscConfig+0x604>)
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	4a4c      	ldr	r2, [pc, #304]	@ (8002c04 <HAL_RCC_OscConfig+0x618>)
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	0019      	movs	r1, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a1a      	ldr	r2, [r3, #32]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ae4:	021b      	lsls	r3, r3, #8
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aec:	431a      	orrs	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af2:	431a      	orrs	r2, r3
 8002af4:	4b3e      	ldr	r3, [pc, #248]	@ (8002bf0 <HAL_RCC_OscConfig+0x604>)
 8002af6:	430a      	orrs	r2, r1
 8002af8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002afa:	4b3d      	ldr	r3, [pc, #244]	@ (8002bf0 <HAL_RCC_OscConfig+0x604>)
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	4b3c      	ldr	r3, [pc, #240]	@ (8002bf0 <HAL_RCC_OscConfig+0x604>)
 8002b00:	2180      	movs	r1, #128	@ 0x80
 8002b02:	0449      	lsls	r1, r1, #17
 8002b04:	430a      	orrs	r2, r1
 8002b06:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002b08:	4b39      	ldr	r3, [pc, #228]	@ (8002bf0 <HAL_RCC_OscConfig+0x604>)
 8002b0a:	68da      	ldr	r2, [r3, #12]
 8002b0c:	4b38      	ldr	r3, [pc, #224]	@ (8002bf0 <HAL_RCC_OscConfig+0x604>)
 8002b0e:	2180      	movs	r1, #128	@ 0x80
 8002b10:	0549      	lsls	r1, r1, #21
 8002b12:	430a      	orrs	r2, r1
 8002b14:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b16:	f7fe fb55 	bl	80011c4 <HAL_GetTick>
 8002b1a:	0003      	movs	r3, r0
 8002b1c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b20:	f7fe fb50 	bl	80011c4 <HAL_GetTick>
 8002b24:	0002      	movs	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e059      	b.n	8002be6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b32:	4b2f      	ldr	r3, [pc, #188]	@ (8002bf0 <HAL_RCC_OscConfig+0x604>)
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	2380      	movs	r3, #128	@ 0x80
 8002b38:	049b      	lsls	r3, r3, #18
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	d0f0      	beq.n	8002b20 <HAL_RCC_OscConfig+0x534>
 8002b3e:	e051      	b.n	8002be4 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b40:	4b2b      	ldr	r3, [pc, #172]	@ (8002bf0 <HAL_RCC_OscConfig+0x604>)
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	4b2a      	ldr	r3, [pc, #168]	@ (8002bf0 <HAL_RCC_OscConfig+0x604>)
 8002b46:	492e      	ldr	r1, [pc, #184]	@ (8002c00 <HAL_RCC_OscConfig+0x614>)
 8002b48:	400a      	ands	r2, r1
 8002b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b4c:	f7fe fb3a 	bl	80011c4 <HAL_GetTick>
 8002b50:	0003      	movs	r3, r0
 8002b52:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b54:	e008      	b.n	8002b68 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b56:	f7fe fb35 	bl	80011c4 <HAL_GetTick>
 8002b5a:	0002      	movs	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e03e      	b.n	8002be6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b68:	4b21      	ldr	r3, [pc, #132]	@ (8002bf0 <HAL_RCC_OscConfig+0x604>)
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	2380      	movs	r3, #128	@ 0x80
 8002b6e:	049b      	lsls	r3, r3, #18
 8002b70:	4013      	ands	r3, r2
 8002b72:	d1f0      	bne.n	8002b56 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002b74:	4b1e      	ldr	r3, [pc, #120]	@ (8002bf0 <HAL_RCC_OscConfig+0x604>)
 8002b76:	68da      	ldr	r2, [r3, #12]
 8002b78:	4b1d      	ldr	r3, [pc, #116]	@ (8002bf0 <HAL_RCC_OscConfig+0x604>)
 8002b7a:	4923      	ldr	r1, [pc, #140]	@ (8002c08 <HAL_RCC_OscConfig+0x61c>)
 8002b7c:	400a      	ands	r2, r1
 8002b7e:	60da      	str	r2, [r3, #12]
 8002b80:	e030      	b.n	8002be4 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d101      	bne.n	8002b8e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e02b      	b.n	8002be6 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002b8e:	4b18      	ldr	r3, [pc, #96]	@ (8002bf0 <HAL_RCC_OscConfig+0x604>)
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	2203      	movs	r2, #3
 8002b98:	401a      	ands	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d11e      	bne.n	8002be0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	2270      	movs	r2, #112	@ 0x70
 8002ba6:	401a      	ands	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d117      	bne.n	8002be0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	23fe      	movs	r3, #254	@ 0xfe
 8002bb4:	01db      	lsls	r3, r3, #7
 8002bb6:	401a      	ands	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bbc:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d10e      	bne.n	8002be0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	23f8      	movs	r3, #248	@ 0xf8
 8002bc6:	039b      	lsls	r3, r3, #14
 8002bc8:	401a      	ands	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d106      	bne.n	8002be0 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	0f5b      	lsrs	r3, r3, #29
 8002bd6:	075a      	lsls	r2, r3, #29
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d001      	beq.n	8002be4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e000      	b.n	8002be6 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	0018      	movs	r0, r3
 8002be8:	46bd      	mov	sp, r7
 8002bea:	b008      	add	sp, #32
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	46c0      	nop			@ (mov r8, r8)
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	40007000 	.word	0x40007000
 8002bf8:	00001388 	.word	0x00001388
 8002bfc:	efffffff 	.word	0xefffffff
 8002c00:	feffffff 	.word	0xfeffffff
 8002c04:	1fc1808c 	.word	0x1fc1808c
 8002c08:	effefffc 	.word	0xeffefffc

08002c0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d101      	bne.n	8002c20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e0e9      	b.n	8002df4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c20:	4b76      	ldr	r3, [pc, #472]	@ (8002dfc <HAL_RCC_ClockConfig+0x1f0>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2207      	movs	r2, #7
 8002c26:	4013      	ands	r3, r2
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d91e      	bls.n	8002c6c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c2e:	4b73      	ldr	r3, [pc, #460]	@ (8002dfc <HAL_RCC_ClockConfig+0x1f0>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2207      	movs	r2, #7
 8002c34:	4393      	bics	r3, r2
 8002c36:	0019      	movs	r1, r3
 8002c38:	4b70      	ldr	r3, [pc, #448]	@ (8002dfc <HAL_RCC_ClockConfig+0x1f0>)
 8002c3a:	683a      	ldr	r2, [r7, #0]
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002c40:	f7fe fac0 	bl	80011c4 <HAL_GetTick>
 8002c44:	0003      	movs	r3, r0
 8002c46:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c48:	e009      	b.n	8002c5e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c4a:	f7fe fabb 	bl	80011c4 <HAL_GetTick>
 8002c4e:	0002      	movs	r2, r0
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	4a6a      	ldr	r2, [pc, #424]	@ (8002e00 <HAL_RCC_ClockConfig+0x1f4>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e0ca      	b.n	8002df4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c5e:	4b67      	ldr	r3, [pc, #412]	@ (8002dfc <HAL_RCC_ClockConfig+0x1f0>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2207      	movs	r2, #7
 8002c64:	4013      	ands	r3, r2
 8002c66:	683a      	ldr	r2, [r7, #0]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d1ee      	bne.n	8002c4a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2202      	movs	r2, #2
 8002c72:	4013      	ands	r3, r2
 8002c74:	d015      	beq.n	8002ca2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2204      	movs	r2, #4
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	d006      	beq.n	8002c8e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002c80:	4b60      	ldr	r3, [pc, #384]	@ (8002e04 <HAL_RCC_ClockConfig+0x1f8>)
 8002c82:	689a      	ldr	r2, [r3, #8]
 8002c84:	4b5f      	ldr	r3, [pc, #380]	@ (8002e04 <HAL_RCC_ClockConfig+0x1f8>)
 8002c86:	21e0      	movs	r1, #224	@ 0xe0
 8002c88:	01c9      	lsls	r1, r1, #7
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c8e:	4b5d      	ldr	r3, [pc, #372]	@ (8002e04 <HAL_RCC_ClockConfig+0x1f8>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	4a5d      	ldr	r2, [pc, #372]	@ (8002e08 <HAL_RCC_ClockConfig+0x1fc>)
 8002c94:	4013      	ands	r3, r2
 8002c96:	0019      	movs	r1, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	4b59      	ldr	r3, [pc, #356]	@ (8002e04 <HAL_RCC_ClockConfig+0x1f8>)
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	4013      	ands	r3, r2
 8002caa:	d057      	beq.n	8002d5c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d107      	bne.n	8002cc4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cb4:	4b53      	ldr	r3, [pc, #332]	@ (8002e04 <HAL_RCC_ClockConfig+0x1f8>)
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	2380      	movs	r3, #128	@ 0x80
 8002cba:	029b      	lsls	r3, r3, #10
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	d12b      	bne.n	8002d18 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e097      	b.n	8002df4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d107      	bne.n	8002cdc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ccc:	4b4d      	ldr	r3, [pc, #308]	@ (8002e04 <HAL_RCC_ClockConfig+0x1f8>)
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	2380      	movs	r3, #128	@ 0x80
 8002cd2:	049b      	lsls	r3, r3, #18
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	d11f      	bne.n	8002d18 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e08b      	b.n	8002df4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d107      	bne.n	8002cf4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ce4:	4b47      	ldr	r3, [pc, #284]	@ (8002e04 <HAL_RCC_ClockConfig+0x1f8>)
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	2380      	movs	r3, #128	@ 0x80
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	4013      	ands	r3, r2
 8002cee:	d113      	bne.n	8002d18 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e07f      	b.n	8002df4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2b03      	cmp	r3, #3
 8002cfa:	d106      	bne.n	8002d0a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cfc:	4b41      	ldr	r3, [pc, #260]	@ (8002e04 <HAL_RCC_ClockConfig+0x1f8>)
 8002cfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d00:	2202      	movs	r2, #2
 8002d02:	4013      	ands	r3, r2
 8002d04:	d108      	bne.n	8002d18 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e074      	b.n	8002df4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d0a:	4b3e      	ldr	r3, [pc, #248]	@ (8002e04 <HAL_RCC_ClockConfig+0x1f8>)
 8002d0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d0e:	2202      	movs	r2, #2
 8002d10:	4013      	ands	r3, r2
 8002d12:	d101      	bne.n	8002d18 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e06d      	b.n	8002df4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d18:	4b3a      	ldr	r3, [pc, #232]	@ (8002e04 <HAL_RCC_ClockConfig+0x1f8>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	2207      	movs	r2, #7
 8002d1e:	4393      	bics	r3, r2
 8002d20:	0019      	movs	r1, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685a      	ldr	r2, [r3, #4]
 8002d26:	4b37      	ldr	r3, [pc, #220]	@ (8002e04 <HAL_RCC_ClockConfig+0x1f8>)
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d2c:	f7fe fa4a 	bl	80011c4 <HAL_GetTick>
 8002d30:	0003      	movs	r3, r0
 8002d32:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d34:	e009      	b.n	8002d4a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d36:	f7fe fa45 	bl	80011c4 <HAL_GetTick>
 8002d3a:	0002      	movs	r2, r0
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	4a2f      	ldr	r2, [pc, #188]	@ (8002e00 <HAL_RCC_ClockConfig+0x1f4>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e054      	b.n	8002df4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d4a:	4b2e      	ldr	r3, [pc, #184]	@ (8002e04 <HAL_RCC_ClockConfig+0x1f8>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	2238      	movs	r2, #56	@ 0x38
 8002d50:	401a      	ands	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d1ec      	bne.n	8002d36 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d5c:	4b27      	ldr	r3, [pc, #156]	@ (8002dfc <HAL_RCC_ClockConfig+0x1f0>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2207      	movs	r2, #7
 8002d62:	4013      	ands	r3, r2
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d21e      	bcs.n	8002da8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d6a:	4b24      	ldr	r3, [pc, #144]	@ (8002dfc <HAL_RCC_ClockConfig+0x1f0>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2207      	movs	r2, #7
 8002d70:	4393      	bics	r3, r2
 8002d72:	0019      	movs	r1, r3
 8002d74:	4b21      	ldr	r3, [pc, #132]	@ (8002dfc <HAL_RCC_ClockConfig+0x1f0>)
 8002d76:	683a      	ldr	r2, [r7, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d7c:	f7fe fa22 	bl	80011c4 <HAL_GetTick>
 8002d80:	0003      	movs	r3, r0
 8002d82:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d84:	e009      	b.n	8002d9a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d86:	f7fe fa1d 	bl	80011c4 <HAL_GetTick>
 8002d8a:	0002      	movs	r2, r0
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	4a1b      	ldr	r2, [pc, #108]	@ (8002e00 <HAL_RCC_ClockConfig+0x1f4>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e02c      	b.n	8002df4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d9a:	4b18      	ldr	r3, [pc, #96]	@ (8002dfc <HAL_RCC_ClockConfig+0x1f0>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2207      	movs	r2, #7
 8002da0:	4013      	ands	r3, r2
 8002da2:	683a      	ldr	r2, [r7, #0]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d1ee      	bne.n	8002d86 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2204      	movs	r2, #4
 8002dae:	4013      	ands	r3, r2
 8002db0:	d009      	beq.n	8002dc6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002db2:	4b14      	ldr	r3, [pc, #80]	@ (8002e04 <HAL_RCC_ClockConfig+0x1f8>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	4a15      	ldr	r2, [pc, #84]	@ (8002e0c <HAL_RCC_ClockConfig+0x200>)
 8002db8:	4013      	ands	r3, r2
 8002dba:	0019      	movs	r1, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68da      	ldr	r2, [r3, #12]
 8002dc0:	4b10      	ldr	r3, [pc, #64]	@ (8002e04 <HAL_RCC_ClockConfig+0x1f8>)
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002dc6:	f000 f829 	bl	8002e1c <HAL_RCC_GetSysClockFreq>
 8002dca:	0001      	movs	r1, r0
 8002dcc:	4b0d      	ldr	r3, [pc, #52]	@ (8002e04 <HAL_RCC_ClockConfig+0x1f8>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	0a1b      	lsrs	r3, r3, #8
 8002dd2:	220f      	movs	r2, #15
 8002dd4:	401a      	ands	r2, r3
 8002dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8002e10 <HAL_RCC_ClockConfig+0x204>)
 8002dd8:	0092      	lsls	r2, r2, #2
 8002dda:	58d3      	ldr	r3, [r2, r3]
 8002ddc:	221f      	movs	r2, #31
 8002dde:	4013      	ands	r3, r2
 8002de0:	000a      	movs	r2, r1
 8002de2:	40da      	lsrs	r2, r3
 8002de4:	4b0b      	ldr	r3, [pc, #44]	@ (8002e14 <HAL_RCC_ClockConfig+0x208>)
 8002de6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002de8:	4b0b      	ldr	r3, [pc, #44]	@ (8002e18 <HAL_RCC_ClockConfig+0x20c>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	0018      	movs	r0, r3
 8002dee:	f7fe f98d 	bl	800110c <HAL_InitTick>
 8002df2:	0003      	movs	r3, r0
}
 8002df4:	0018      	movs	r0, r3
 8002df6:	46bd      	mov	sp, r7
 8002df8:	b004      	add	sp, #16
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40022000 	.word	0x40022000
 8002e00:	00001388 	.word	0x00001388
 8002e04:	40021000 	.word	0x40021000
 8002e08:	fffff0ff 	.word	0xfffff0ff
 8002e0c:	ffff8fff 	.word	0xffff8fff
 8002e10:	080057a4 	.word	0x080057a4
 8002e14:	20000000 	.word	0x20000000
 8002e18:	20000004 	.word	0x20000004

08002e1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e22:	4b3c      	ldr	r3, [pc, #240]	@ (8002f14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	2238      	movs	r2, #56	@ 0x38
 8002e28:	4013      	ands	r3, r2
 8002e2a:	d10f      	bne.n	8002e4c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002e2c:	4b39      	ldr	r3, [pc, #228]	@ (8002f14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	0adb      	lsrs	r3, r3, #11
 8002e32:	2207      	movs	r2, #7
 8002e34:	4013      	ands	r3, r2
 8002e36:	2201      	movs	r2, #1
 8002e38:	409a      	lsls	r2, r3
 8002e3a:	0013      	movs	r3, r2
 8002e3c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002e3e:	6839      	ldr	r1, [r7, #0]
 8002e40:	4835      	ldr	r0, [pc, #212]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002e42:	f7fd f967 	bl	8000114 <__udivsi3>
 8002e46:	0003      	movs	r3, r0
 8002e48:	613b      	str	r3, [r7, #16]
 8002e4a:	e05d      	b.n	8002f08 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e4c:	4b31      	ldr	r3, [pc, #196]	@ (8002f14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	2238      	movs	r2, #56	@ 0x38
 8002e52:	4013      	ands	r3, r2
 8002e54:	2b08      	cmp	r3, #8
 8002e56:	d102      	bne.n	8002e5e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e58:	4b30      	ldr	r3, [pc, #192]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x100>)
 8002e5a:	613b      	str	r3, [r7, #16]
 8002e5c:	e054      	b.n	8002f08 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e5e:	4b2d      	ldr	r3, [pc, #180]	@ (8002f14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	2238      	movs	r2, #56	@ 0x38
 8002e64:	4013      	ands	r3, r2
 8002e66:	2b10      	cmp	r3, #16
 8002e68:	d138      	bne.n	8002edc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002e6a:	4b2a      	ldr	r3, [pc, #168]	@ (8002f14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	2203      	movs	r2, #3
 8002e70:	4013      	ands	r3, r2
 8002e72:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e74:	4b27      	ldr	r3, [pc, #156]	@ (8002f14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	091b      	lsrs	r3, r3, #4
 8002e7a:	2207      	movs	r2, #7
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	3301      	adds	r3, #1
 8002e80:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2b03      	cmp	r3, #3
 8002e86:	d10d      	bne.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e88:	68b9      	ldr	r1, [r7, #8]
 8002e8a:	4824      	ldr	r0, [pc, #144]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x100>)
 8002e8c:	f7fd f942 	bl	8000114 <__udivsi3>
 8002e90:	0003      	movs	r3, r0
 8002e92:	0019      	movs	r1, r3
 8002e94:	4b1f      	ldr	r3, [pc, #124]	@ (8002f14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	0a1b      	lsrs	r3, r3, #8
 8002e9a:	227f      	movs	r2, #127	@ 0x7f
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	434b      	muls	r3, r1
 8002ea0:	617b      	str	r3, [r7, #20]
        break;
 8002ea2:	e00d      	b.n	8002ec0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002ea4:	68b9      	ldr	r1, [r7, #8]
 8002ea6:	481c      	ldr	r0, [pc, #112]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002ea8:	f7fd f934 	bl	8000114 <__udivsi3>
 8002eac:	0003      	movs	r3, r0
 8002eae:	0019      	movs	r1, r3
 8002eb0:	4b18      	ldr	r3, [pc, #96]	@ (8002f14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	0a1b      	lsrs	r3, r3, #8
 8002eb6:	227f      	movs	r2, #127	@ 0x7f
 8002eb8:	4013      	ands	r3, r2
 8002eba:	434b      	muls	r3, r1
 8002ebc:	617b      	str	r3, [r7, #20]
        break;
 8002ebe:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002ec0:	4b14      	ldr	r3, [pc, #80]	@ (8002f14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	0f5b      	lsrs	r3, r3, #29
 8002ec6:	2207      	movs	r2, #7
 8002ec8:	4013      	ands	r3, r2
 8002eca:	3301      	adds	r3, #1
 8002ecc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	6978      	ldr	r0, [r7, #20]
 8002ed2:	f7fd f91f 	bl	8000114 <__udivsi3>
 8002ed6:	0003      	movs	r3, r0
 8002ed8:	613b      	str	r3, [r7, #16]
 8002eda:	e015      	b.n	8002f08 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002edc:	4b0d      	ldr	r3, [pc, #52]	@ (8002f14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	2238      	movs	r2, #56	@ 0x38
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	2b20      	cmp	r3, #32
 8002ee6:	d103      	bne.n	8002ef0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002ee8:	2380      	movs	r3, #128	@ 0x80
 8002eea:	021b      	lsls	r3, r3, #8
 8002eec:	613b      	str	r3, [r7, #16]
 8002eee:	e00b      	b.n	8002f08 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002ef0:	4b08      	ldr	r3, [pc, #32]	@ (8002f14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	2238      	movs	r2, #56	@ 0x38
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	2b18      	cmp	r3, #24
 8002efa:	d103      	bne.n	8002f04 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002efc:	23fa      	movs	r3, #250	@ 0xfa
 8002efe:	01db      	lsls	r3, r3, #7
 8002f00:	613b      	str	r3, [r7, #16]
 8002f02:	e001      	b.n	8002f08 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002f04:	2300      	movs	r3, #0
 8002f06:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002f08:	693b      	ldr	r3, [r7, #16]
}
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	b006      	add	sp, #24
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	46c0      	nop			@ (mov r8, r8)
 8002f14:	40021000 	.word	0x40021000
 8002f18:	00f42400 	.word	0x00f42400
 8002f1c:	007a1200 	.word	0x007a1200

08002f20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f24:	4b02      	ldr	r3, [pc, #8]	@ (8002f30 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f26:	681b      	ldr	r3, [r3, #0]
}
 8002f28:	0018      	movs	r0, r3
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	46c0      	nop			@ (mov r8, r8)
 8002f30:	20000000 	.word	0x20000000

08002f34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f34:	b5b0      	push	{r4, r5, r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002f38:	f7ff fff2 	bl	8002f20 <HAL_RCC_GetHCLKFreq>
 8002f3c:	0004      	movs	r4, r0
 8002f3e:	f7ff fb49 	bl	80025d4 <LL_RCC_GetAPB1Prescaler>
 8002f42:	0003      	movs	r3, r0
 8002f44:	0b1a      	lsrs	r2, r3, #12
 8002f46:	4b05      	ldr	r3, [pc, #20]	@ (8002f5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f48:	0092      	lsls	r2, r2, #2
 8002f4a:	58d3      	ldr	r3, [r2, r3]
 8002f4c:	221f      	movs	r2, #31
 8002f4e:	4013      	ands	r3, r2
 8002f50:	40dc      	lsrs	r4, r3
 8002f52:	0023      	movs	r3, r4
}
 8002f54:	0018      	movs	r0, r3
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bdb0      	pop	{r4, r5, r7, pc}
 8002f5a:	46c0      	nop			@ (mov r8, r8)
 8002f5c:	080057e4 	.word	0x080057e4

08002f60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002f68:	2313      	movs	r3, #19
 8002f6a:	18fb      	adds	r3, r7, r3
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f70:	2312      	movs	r3, #18
 8002f72:	18fb      	adds	r3, r7, r3
 8002f74:	2200      	movs	r2, #0
 8002f76:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	2380      	movs	r3, #128	@ 0x80
 8002f7e:	029b      	lsls	r3, r3, #10
 8002f80:	4013      	ands	r3, r2
 8002f82:	d100      	bne.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002f84:	e0a3      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f86:	2011      	movs	r0, #17
 8002f88:	183b      	adds	r3, r7, r0
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f8e:	4b7f      	ldr	r3, [pc, #508]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f92:	2380      	movs	r3, #128	@ 0x80
 8002f94:	055b      	lsls	r3, r3, #21
 8002f96:	4013      	ands	r3, r2
 8002f98:	d110      	bne.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f9a:	4b7c      	ldr	r3, [pc, #496]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f9e:	4b7b      	ldr	r3, [pc, #492]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002fa0:	2180      	movs	r1, #128	@ 0x80
 8002fa2:	0549      	lsls	r1, r1, #21
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002fa8:	4b78      	ldr	r3, [pc, #480]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002faa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002fac:	2380      	movs	r3, #128	@ 0x80
 8002fae:	055b      	lsls	r3, r3, #21
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	60bb      	str	r3, [r7, #8]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fb6:	183b      	adds	r3, r7, r0
 8002fb8:	2201      	movs	r2, #1
 8002fba:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fbc:	4b74      	ldr	r3, [pc, #464]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	4b73      	ldr	r3, [pc, #460]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002fc2:	2180      	movs	r1, #128	@ 0x80
 8002fc4:	0049      	lsls	r1, r1, #1
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fca:	f7fe f8fb 	bl	80011c4 <HAL_GetTick>
 8002fce:	0003      	movs	r3, r0
 8002fd0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fd2:	e00b      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fd4:	f7fe f8f6 	bl	80011c4 <HAL_GetTick>
 8002fd8:	0002      	movs	r2, r0
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d904      	bls.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002fe2:	2313      	movs	r3, #19
 8002fe4:	18fb      	adds	r3, r7, r3
 8002fe6:	2203      	movs	r2, #3
 8002fe8:	701a      	strb	r2, [r3, #0]
        break;
 8002fea:	e005      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fec:	4b68      	ldr	r3, [pc, #416]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	2380      	movs	r3, #128	@ 0x80
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	d0ed      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002ff8:	2313      	movs	r3, #19
 8002ffa:	18fb      	adds	r3, r7, r3
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d154      	bne.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003002:	4b62      	ldr	r3, [pc, #392]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003004:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003006:	23c0      	movs	r3, #192	@ 0xc0
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	4013      	ands	r3, r2
 800300c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d019      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	695b      	ldr	r3, [r3, #20]
 8003018:	697a      	ldr	r2, [r7, #20]
 800301a:	429a      	cmp	r2, r3
 800301c:	d014      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800301e:	4b5b      	ldr	r3, [pc, #364]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003020:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003022:	4a5c      	ldr	r2, [pc, #368]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003024:	4013      	ands	r3, r2
 8003026:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003028:	4b58      	ldr	r3, [pc, #352]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800302a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800302c:	4b57      	ldr	r3, [pc, #348]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800302e:	2180      	movs	r1, #128	@ 0x80
 8003030:	0249      	lsls	r1, r1, #9
 8003032:	430a      	orrs	r2, r1
 8003034:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003036:	4b55      	ldr	r3, [pc, #340]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003038:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800303a:	4b54      	ldr	r3, [pc, #336]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800303c:	4956      	ldr	r1, [pc, #344]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 800303e:	400a      	ands	r2, r1
 8003040:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003042:	4b52      	ldr	r3, [pc, #328]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	2201      	movs	r2, #1
 800304c:	4013      	ands	r3, r2
 800304e:	d016      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003050:	f7fe f8b8 	bl	80011c4 <HAL_GetTick>
 8003054:	0003      	movs	r3, r0
 8003056:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003058:	e00c      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800305a:	f7fe f8b3 	bl	80011c4 <HAL_GetTick>
 800305e:	0002      	movs	r2, r0
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	4a4d      	ldr	r2, [pc, #308]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d904      	bls.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800306a:	2313      	movs	r3, #19
 800306c:	18fb      	adds	r3, r7, r3
 800306e:	2203      	movs	r2, #3
 8003070:	701a      	strb	r2, [r3, #0]
            break;
 8003072:	e004      	b.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003074:	4b45      	ldr	r3, [pc, #276]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003076:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003078:	2202      	movs	r2, #2
 800307a:	4013      	ands	r3, r2
 800307c:	d0ed      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800307e:	2313      	movs	r3, #19
 8003080:	18fb      	adds	r3, r7, r3
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d10a      	bne.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003088:	4b40      	ldr	r3, [pc, #256]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800308a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800308c:	4a41      	ldr	r2, [pc, #260]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800308e:	4013      	ands	r3, r2
 8003090:	0019      	movs	r1, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	695a      	ldr	r2, [r3, #20]
 8003096:	4b3d      	ldr	r3, [pc, #244]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003098:	430a      	orrs	r2, r1
 800309a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800309c:	e00c      	b.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800309e:	2312      	movs	r3, #18
 80030a0:	18fb      	adds	r3, r7, r3
 80030a2:	2213      	movs	r2, #19
 80030a4:	18ba      	adds	r2, r7, r2
 80030a6:	7812      	ldrb	r2, [r2, #0]
 80030a8:	701a      	strb	r2, [r3, #0]
 80030aa:	e005      	b.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030ac:	2312      	movs	r3, #18
 80030ae:	18fb      	adds	r3, r7, r3
 80030b0:	2213      	movs	r2, #19
 80030b2:	18ba      	adds	r2, r7, r2
 80030b4:	7812      	ldrb	r2, [r2, #0]
 80030b6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030b8:	2311      	movs	r3, #17
 80030ba:	18fb      	adds	r3, r7, r3
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d105      	bne.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030c2:	4b32      	ldr	r3, [pc, #200]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80030c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80030c6:	4b31      	ldr	r3, [pc, #196]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80030c8:	4935      	ldr	r1, [pc, #212]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030ca:	400a      	ands	r2, r1
 80030cc:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2201      	movs	r2, #1
 80030d4:	4013      	ands	r3, r2
 80030d6:	d009      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030d8:	4b2c      	ldr	r3, [pc, #176]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80030da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030dc:	2203      	movs	r2, #3
 80030de:	4393      	bics	r3, r2
 80030e0:	0019      	movs	r1, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	4b29      	ldr	r3, [pc, #164]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80030e8:	430a      	orrs	r2, r1
 80030ea:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2220      	movs	r2, #32
 80030f2:	4013      	ands	r3, r2
 80030f4:	d009      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030f6:	4b25      	ldr	r3, [pc, #148]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80030f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030fa:	4a2a      	ldr	r2, [pc, #168]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80030fc:	4013      	ands	r3, r2
 80030fe:	0019      	movs	r1, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	4b21      	ldr	r3, [pc, #132]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003106:	430a      	orrs	r2, r1
 8003108:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	2380      	movs	r3, #128	@ 0x80
 8003110:	01db      	lsls	r3, r3, #7
 8003112:	4013      	ands	r3, r2
 8003114:	d015      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003116:	4b1d      	ldr	r3, [pc, #116]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	0899      	lsrs	r1, r3, #2
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	691a      	ldr	r2, [r3, #16]
 8003122:	4b1a      	ldr	r3, [pc, #104]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003124:	430a      	orrs	r2, r1
 8003126:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	691a      	ldr	r2, [r3, #16]
 800312c:	2380      	movs	r3, #128	@ 0x80
 800312e:	05db      	lsls	r3, r3, #23
 8003130:	429a      	cmp	r2, r3
 8003132:	d106      	bne.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003134:	4b15      	ldr	r3, [pc, #84]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003136:	68da      	ldr	r2, [r3, #12]
 8003138:	4b14      	ldr	r3, [pc, #80]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800313a:	2180      	movs	r1, #128	@ 0x80
 800313c:	0249      	lsls	r1, r1, #9
 800313e:	430a      	orrs	r2, r1
 8003140:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	2380      	movs	r3, #128	@ 0x80
 8003148:	011b      	lsls	r3, r3, #4
 800314a:	4013      	ands	r3, r2
 800314c:	d016      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800314e:	4b0f      	ldr	r3, [pc, #60]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003152:	4a15      	ldr	r2, [pc, #84]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003154:	4013      	ands	r3, r2
 8003156:	0019      	movs	r1, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	68da      	ldr	r2, [r3, #12]
 800315c:	4b0b      	ldr	r3, [pc, #44]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800315e:	430a      	orrs	r2, r1
 8003160:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68da      	ldr	r2, [r3, #12]
 8003166:	2380      	movs	r3, #128	@ 0x80
 8003168:	01db      	lsls	r3, r3, #7
 800316a:	429a      	cmp	r2, r3
 800316c:	d106      	bne.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800316e:	4b07      	ldr	r3, [pc, #28]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	4b06      	ldr	r3, [pc, #24]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003174:	2180      	movs	r1, #128	@ 0x80
 8003176:	0249      	lsls	r1, r1, #9
 8003178:	430a      	orrs	r2, r1
 800317a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800317c:	2312      	movs	r3, #18
 800317e:	18fb      	adds	r3, r7, r3
 8003180:	781b      	ldrb	r3, [r3, #0]
}
 8003182:	0018      	movs	r0, r3
 8003184:	46bd      	mov	sp, r7
 8003186:	b006      	add	sp, #24
 8003188:	bd80      	pop	{r7, pc}
 800318a:	46c0      	nop			@ (mov r8, r8)
 800318c:	40021000 	.word	0x40021000
 8003190:	40007000 	.word	0x40007000
 8003194:	fffffcff 	.word	0xfffffcff
 8003198:	fffeffff 	.word	0xfffeffff
 800319c:	00001388 	.word	0x00001388
 80031a0:	efffffff 	.word	0xefffffff
 80031a4:	ffffcfff 	.word	0xffffcfff
 80031a8:	ffff3fff 	.word	0xffff3fff

080031ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e04a      	b.n	8003254 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	223d      	movs	r2, #61	@ 0x3d
 80031c2:	5c9b      	ldrb	r3, [r3, r2]
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d107      	bne.n	80031da <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	223c      	movs	r2, #60	@ 0x3c
 80031ce:	2100      	movs	r1, #0
 80031d0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	0018      	movs	r0, r3
 80031d6:	f7fd fd6f 	bl	8000cb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	223d      	movs	r2, #61	@ 0x3d
 80031de:	2102      	movs	r1, #2
 80031e0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	3304      	adds	r3, #4
 80031ea:	0019      	movs	r1, r3
 80031ec:	0010      	movs	r0, r2
 80031ee:	f000 fc19 	bl	8003a24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2248      	movs	r2, #72	@ 0x48
 80031f6:	2101      	movs	r1, #1
 80031f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	223e      	movs	r2, #62	@ 0x3e
 80031fe:	2101      	movs	r1, #1
 8003200:	5499      	strb	r1, [r3, r2]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	223f      	movs	r2, #63	@ 0x3f
 8003206:	2101      	movs	r1, #1
 8003208:	5499      	strb	r1, [r3, r2]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2240      	movs	r2, #64	@ 0x40
 800320e:	2101      	movs	r1, #1
 8003210:	5499      	strb	r1, [r3, r2]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2241      	movs	r2, #65	@ 0x41
 8003216:	2101      	movs	r1, #1
 8003218:	5499      	strb	r1, [r3, r2]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2242      	movs	r2, #66	@ 0x42
 800321e:	2101      	movs	r1, #1
 8003220:	5499      	strb	r1, [r3, r2]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2243      	movs	r2, #67	@ 0x43
 8003226:	2101      	movs	r1, #1
 8003228:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2244      	movs	r2, #68	@ 0x44
 800322e:	2101      	movs	r1, #1
 8003230:	5499      	strb	r1, [r3, r2]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2245      	movs	r2, #69	@ 0x45
 8003236:	2101      	movs	r1, #1
 8003238:	5499      	strb	r1, [r3, r2]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2246      	movs	r2, #70	@ 0x46
 800323e:	2101      	movs	r1, #1
 8003240:	5499      	strb	r1, [r3, r2]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2247      	movs	r2, #71	@ 0x47
 8003246:	2101      	movs	r1, #1
 8003248:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	223d      	movs	r2, #61	@ 0x3d
 800324e:	2101      	movs	r1, #1
 8003250:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	0018      	movs	r0, r3
 8003256:	46bd      	mov	sp, r7
 8003258:	b002      	add	sp, #8
 800325a:	bd80      	pop	{r7, pc}

0800325c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e04a      	b.n	8003304 <HAL_TIM_OC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	223d      	movs	r2, #61	@ 0x3d
 8003272:	5c9b      	ldrb	r3, [r3, r2]
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d107      	bne.n	800328a <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	223c      	movs	r2, #60	@ 0x3c
 800327e:	2100      	movs	r1, #0
 8003280:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	0018      	movs	r0, r3
 8003286:	f000 f841 	bl	800330c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	223d      	movs	r2, #61	@ 0x3d
 800328e:	2102      	movs	r1, #2
 8003290:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	3304      	adds	r3, #4
 800329a:	0019      	movs	r1, r3
 800329c:	0010      	movs	r0, r2
 800329e:	f000 fbc1 	bl	8003a24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2248      	movs	r2, #72	@ 0x48
 80032a6:	2101      	movs	r1, #1
 80032a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	223e      	movs	r2, #62	@ 0x3e
 80032ae:	2101      	movs	r1, #1
 80032b0:	5499      	strb	r1, [r3, r2]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	223f      	movs	r2, #63	@ 0x3f
 80032b6:	2101      	movs	r1, #1
 80032b8:	5499      	strb	r1, [r3, r2]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2240      	movs	r2, #64	@ 0x40
 80032be:	2101      	movs	r1, #1
 80032c0:	5499      	strb	r1, [r3, r2]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2241      	movs	r2, #65	@ 0x41
 80032c6:	2101      	movs	r1, #1
 80032c8:	5499      	strb	r1, [r3, r2]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2242      	movs	r2, #66	@ 0x42
 80032ce:	2101      	movs	r1, #1
 80032d0:	5499      	strb	r1, [r3, r2]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2243      	movs	r2, #67	@ 0x43
 80032d6:	2101      	movs	r1, #1
 80032d8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2244      	movs	r2, #68	@ 0x44
 80032de:	2101      	movs	r1, #1
 80032e0:	5499      	strb	r1, [r3, r2]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2245      	movs	r2, #69	@ 0x45
 80032e6:	2101      	movs	r1, #1
 80032e8:	5499      	strb	r1, [r3, r2]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2246      	movs	r2, #70	@ 0x46
 80032ee:	2101      	movs	r1, #1
 80032f0:	5499      	strb	r1, [r3, r2]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2247      	movs	r2, #71	@ 0x47
 80032f6:	2101      	movs	r1, #1
 80032f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	223d      	movs	r2, #61	@ 0x3d
 80032fe:	2101      	movs	r1, #1
 8003300:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	0018      	movs	r0, r3
 8003306:	46bd      	mov	sp, r7
 8003308:	b002      	add	sp, #8
 800330a:	bd80      	pop	{r7, pc}

0800330c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003314:	46c0      	nop			@ (mov r8, r8)
 8003316:	46bd      	mov	sp, r7
 8003318:	b002      	add	sp, #8
 800331a:	bd80      	pop	{r7, pc}

0800331c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003326:	230f      	movs	r3, #15
 8003328:	18fb      	adds	r3, r7, r3
 800332a:	2200      	movs	r2, #0
 800332c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d108      	bne.n	8003346 <HAL_TIM_OC_Start_IT+0x2a>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	223e      	movs	r2, #62	@ 0x3e
 8003338:	5c9b      	ldrb	r3, [r3, r2]
 800333a:	b2db      	uxtb	r3, r3
 800333c:	3b01      	subs	r3, #1
 800333e:	1e5a      	subs	r2, r3, #1
 8003340:	4193      	sbcs	r3, r2
 8003342:	b2db      	uxtb	r3, r3
 8003344:	e037      	b.n	80033b6 <HAL_TIM_OC_Start_IT+0x9a>
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	2b04      	cmp	r3, #4
 800334a:	d108      	bne.n	800335e <HAL_TIM_OC_Start_IT+0x42>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	223f      	movs	r2, #63	@ 0x3f
 8003350:	5c9b      	ldrb	r3, [r3, r2]
 8003352:	b2db      	uxtb	r3, r3
 8003354:	3b01      	subs	r3, #1
 8003356:	1e5a      	subs	r2, r3, #1
 8003358:	4193      	sbcs	r3, r2
 800335a:	b2db      	uxtb	r3, r3
 800335c:	e02b      	b.n	80033b6 <HAL_TIM_OC_Start_IT+0x9a>
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	2b08      	cmp	r3, #8
 8003362:	d108      	bne.n	8003376 <HAL_TIM_OC_Start_IT+0x5a>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2240      	movs	r2, #64	@ 0x40
 8003368:	5c9b      	ldrb	r3, [r3, r2]
 800336a:	b2db      	uxtb	r3, r3
 800336c:	3b01      	subs	r3, #1
 800336e:	1e5a      	subs	r2, r3, #1
 8003370:	4193      	sbcs	r3, r2
 8003372:	b2db      	uxtb	r3, r3
 8003374:	e01f      	b.n	80033b6 <HAL_TIM_OC_Start_IT+0x9a>
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	2b0c      	cmp	r3, #12
 800337a:	d108      	bne.n	800338e <HAL_TIM_OC_Start_IT+0x72>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2241      	movs	r2, #65	@ 0x41
 8003380:	5c9b      	ldrb	r3, [r3, r2]
 8003382:	b2db      	uxtb	r3, r3
 8003384:	3b01      	subs	r3, #1
 8003386:	1e5a      	subs	r2, r3, #1
 8003388:	4193      	sbcs	r3, r2
 800338a:	b2db      	uxtb	r3, r3
 800338c:	e013      	b.n	80033b6 <HAL_TIM_OC_Start_IT+0x9a>
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	2b10      	cmp	r3, #16
 8003392:	d108      	bne.n	80033a6 <HAL_TIM_OC_Start_IT+0x8a>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2242      	movs	r2, #66	@ 0x42
 8003398:	5c9b      	ldrb	r3, [r3, r2]
 800339a:	b2db      	uxtb	r3, r3
 800339c:	3b01      	subs	r3, #1
 800339e:	1e5a      	subs	r2, r3, #1
 80033a0:	4193      	sbcs	r3, r2
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	e007      	b.n	80033b6 <HAL_TIM_OC_Start_IT+0x9a>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2243      	movs	r2, #67	@ 0x43
 80033aa:	5c9b      	ldrb	r3, [r3, r2]
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	3b01      	subs	r3, #1
 80033b0:	1e5a      	subs	r2, r3, #1
 80033b2:	4193      	sbcs	r3, r2
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <HAL_TIM_OC_Start_IT+0xa2>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e0be      	b.n	800353c <HAL_TIM_OC_Start_IT+0x220>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d104      	bne.n	80033ce <HAL_TIM_OC_Start_IT+0xb2>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	223e      	movs	r2, #62	@ 0x3e
 80033c8:	2102      	movs	r1, #2
 80033ca:	5499      	strb	r1, [r3, r2]
 80033cc:	e023      	b.n	8003416 <HAL_TIM_OC_Start_IT+0xfa>
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	2b04      	cmp	r3, #4
 80033d2:	d104      	bne.n	80033de <HAL_TIM_OC_Start_IT+0xc2>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	223f      	movs	r2, #63	@ 0x3f
 80033d8:	2102      	movs	r1, #2
 80033da:	5499      	strb	r1, [r3, r2]
 80033dc:	e01b      	b.n	8003416 <HAL_TIM_OC_Start_IT+0xfa>
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	2b08      	cmp	r3, #8
 80033e2:	d104      	bne.n	80033ee <HAL_TIM_OC_Start_IT+0xd2>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2240      	movs	r2, #64	@ 0x40
 80033e8:	2102      	movs	r1, #2
 80033ea:	5499      	strb	r1, [r3, r2]
 80033ec:	e013      	b.n	8003416 <HAL_TIM_OC_Start_IT+0xfa>
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	2b0c      	cmp	r3, #12
 80033f2:	d104      	bne.n	80033fe <HAL_TIM_OC_Start_IT+0xe2>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2241      	movs	r2, #65	@ 0x41
 80033f8:	2102      	movs	r1, #2
 80033fa:	5499      	strb	r1, [r3, r2]
 80033fc:	e00b      	b.n	8003416 <HAL_TIM_OC_Start_IT+0xfa>
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	2b10      	cmp	r3, #16
 8003402:	d104      	bne.n	800340e <HAL_TIM_OC_Start_IT+0xf2>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2242      	movs	r2, #66	@ 0x42
 8003408:	2102      	movs	r1, #2
 800340a:	5499      	strb	r1, [r3, r2]
 800340c:	e003      	b.n	8003416 <HAL_TIM_OC_Start_IT+0xfa>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2243      	movs	r2, #67	@ 0x43
 8003412:	2102      	movs	r1, #2
 8003414:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	2b0c      	cmp	r3, #12
 800341a:	d02a      	beq.n	8003472 <HAL_TIM_OC_Start_IT+0x156>
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	2b0c      	cmp	r3, #12
 8003420:	d830      	bhi.n	8003484 <HAL_TIM_OC_Start_IT+0x168>
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	2b08      	cmp	r3, #8
 8003426:	d01b      	beq.n	8003460 <HAL_TIM_OC_Start_IT+0x144>
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	2b08      	cmp	r3, #8
 800342c:	d82a      	bhi.n	8003484 <HAL_TIM_OC_Start_IT+0x168>
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d003      	beq.n	800343c <HAL_TIM_OC_Start_IT+0x120>
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	2b04      	cmp	r3, #4
 8003438:	d009      	beq.n	800344e <HAL_TIM_OC_Start_IT+0x132>
 800343a:	e023      	b.n	8003484 <HAL_TIM_OC_Start_IT+0x168>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68da      	ldr	r2, [r3, #12]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2102      	movs	r1, #2
 8003448:	430a      	orrs	r2, r1
 800344a:	60da      	str	r2, [r3, #12]
      break;
 800344c:	e01f      	b.n	800348e <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68da      	ldr	r2, [r3, #12]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2104      	movs	r1, #4
 800345a:	430a      	orrs	r2, r1
 800345c:	60da      	str	r2, [r3, #12]
      break;
 800345e:	e016      	b.n	800348e <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68da      	ldr	r2, [r3, #12]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2108      	movs	r1, #8
 800346c:	430a      	orrs	r2, r1
 800346e:	60da      	str	r2, [r3, #12]
      break;
 8003470:	e00d      	b.n	800348e <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68da      	ldr	r2, [r3, #12]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2110      	movs	r1, #16
 800347e:	430a      	orrs	r2, r1
 8003480:	60da      	str	r2, [r3, #12]
      break;
 8003482:	e004      	b.n	800348e <HAL_TIM_OC_Start_IT+0x172>
    }

    default:
      status = HAL_ERROR;
 8003484:	230f      	movs	r3, #15
 8003486:	18fb      	adds	r3, r7, r3
 8003488:	2201      	movs	r2, #1
 800348a:	701a      	strb	r2, [r3, #0]
      break;
 800348c:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 800348e:	230f      	movs	r3, #15
 8003490:	18fb      	adds	r3, r7, r3
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d14e      	bne.n	8003536 <HAL_TIM_OC_Start_IT+0x21a>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6839      	ldr	r1, [r7, #0]
 800349e:	2201      	movs	r2, #1
 80034a0:	0018      	movs	r0, r3
 80034a2:	f000 fe71 	bl	8004188 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a26      	ldr	r2, [pc, #152]	@ (8003544 <HAL_TIM_OC_Start_IT+0x228>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d009      	beq.n	80034c4 <HAL_TIM_OC_Start_IT+0x1a8>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a24      	ldr	r2, [pc, #144]	@ (8003548 <HAL_TIM_OC_Start_IT+0x22c>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d004      	beq.n	80034c4 <HAL_TIM_OC_Start_IT+0x1a8>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a23      	ldr	r2, [pc, #140]	@ (800354c <HAL_TIM_OC_Start_IT+0x230>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d101      	bne.n	80034c8 <HAL_TIM_OC_Start_IT+0x1ac>
 80034c4:	2301      	movs	r3, #1
 80034c6:	e000      	b.n	80034ca <HAL_TIM_OC_Start_IT+0x1ae>
 80034c8:	2300      	movs	r3, #0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d008      	beq.n	80034e0 <HAL_TIM_OC_Start_IT+0x1c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2180      	movs	r1, #128	@ 0x80
 80034da:	0209      	lsls	r1, r1, #8
 80034dc:	430a      	orrs	r2, r1
 80034de:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a17      	ldr	r2, [pc, #92]	@ (8003544 <HAL_TIM_OC_Start_IT+0x228>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d004      	beq.n	80034f4 <HAL_TIM_OC_Start_IT+0x1d8>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a18      	ldr	r2, [pc, #96]	@ (8003550 <HAL_TIM_OC_Start_IT+0x234>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d116      	bne.n	8003522 <HAL_TIM_OC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	4a16      	ldr	r2, [pc, #88]	@ (8003554 <HAL_TIM_OC_Start_IT+0x238>)
 80034fc:	4013      	ands	r3, r2
 80034fe:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	2b06      	cmp	r3, #6
 8003504:	d016      	beq.n	8003534 <HAL_TIM_OC_Start_IT+0x218>
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	2380      	movs	r3, #128	@ 0x80
 800350a:	025b      	lsls	r3, r3, #9
 800350c:	429a      	cmp	r2, r3
 800350e:	d011      	beq.n	8003534 <HAL_TIM_OC_Start_IT+0x218>
      {
        __HAL_TIM_ENABLE(htim);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2101      	movs	r1, #1
 800351c:	430a      	orrs	r2, r1
 800351e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003520:	e008      	b.n	8003534 <HAL_TIM_OC_Start_IT+0x218>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2101      	movs	r1, #1
 800352e:	430a      	orrs	r2, r1
 8003530:	601a      	str	r2, [r3, #0]
 8003532:	e000      	b.n	8003536 <HAL_TIM_OC_Start_IT+0x21a>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003534:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8003536:	230f      	movs	r3, #15
 8003538:	18fb      	adds	r3, r7, r3
 800353a:	781b      	ldrb	r3, [r3, #0]
}
 800353c:	0018      	movs	r0, r3
 800353e:	46bd      	mov	sp, r7
 8003540:	b004      	add	sp, #16
 8003542:	bd80      	pop	{r7, pc}
 8003544:	40012c00 	.word	0x40012c00
 8003548:	40014400 	.word	0x40014400
 800354c:	40014800 	.word	0x40014800
 8003550:	40000400 	.word	0x40000400
 8003554:	00010007 	.word	0x00010007

08003558 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	2202      	movs	r2, #2
 8003574:	4013      	ands	r3, r2
 8003576:	d021      	beq.n	80035bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2202      	movs	r2, #2
 800357c:	4013      	ands	r3, r2
 800357e:	d01d      	beq.n	80035bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2203      	movs	r2, #3
 8003586:	4252      	negs	r2, r2
 8003588:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2201      	movs	r2, #1
 800358e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	2203      	movs	r2, #3
 8003598:	4013      	ands	r3, r2
 800359a:	d004      	beq.n	80035a6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	0018      	movs	r0, r3
 80035a0:	f000 fa28 	bl	80039f4 <HAL_TIM_IC_CaptureCallback>
 80035a4:	e007      	b.n	80035b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	0018      	movs	r0, r3
 80035aa:	f000 fa1b 	bl	80039e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	0018      	movs	r0, r3
 80035b2:	f000 fa27 	bl	8003a04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	2204      	movs	r2, #4
 80035c0:	4013      	ands	r3, r2
 80035c2:	d022      	beq.n	800360a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2204      	movs	r2, #4
 80035c8:	4013      	ands	r3, r2
 80035ca:	d01e      	beq.n	800360a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2205      	movs	r2, #5
 80035d2:	4252      	negs	r2, r2
 80035d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2202      	movs	r2, #2
 80035da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	699a      	ldr	r2, [r3, #24]
 80035e2:	23c0      	movs	r3, #192	@ 0xc0
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4013      	ands	r3, r2
 80035e8:	d004      	beq.n	80035f4 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	0018      	movs	r0, r3
 80035ee:	f000 fa01 	bl	80039f4 <HAL_TIM_IC_CaptureCallback>
 80035f2:	e007      	b.n	8003604 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	0018      	movs	r0, r3
 80035f8:	f000 f9f4 	bl	80039e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	0018      	movs	r0, r3
 8003600:	f000 fa00 	bl	8003a04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	2208      	movs	r2, #8
 800360e:	4013      	ands	r3, r2
 8003610:	d021      	beq.n	8003656 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2208      	movs	r2, #8
 8003616:	4013      	ands	r3, r2
 8003618:	d01d      	beq.n	8003656 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2209      	movs	r2, #9
 8003620:	4252      	negs	r2, r2
 8003622:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2204      	movs	r2, #4
 8003628:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	69db      	ldr	r3, [r3, #28]
 8003630:	2203      	movs	r2, #3
 8003632:	4013      	ands	r3, r2
 8003634:	d004      	beq.n	8003640 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	0018      	movs	r0, r3
 800363a:	f000 f9db 	bl	80039f4 <HAL_TIM_IC_CaptureCallback>
 800363e:	e007      	b.n	8003650 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	0018      	movs	r0, r3
 8003644:	f000 f9ce 	bl	80039e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	0018      	movs	r0, r3
 800364c:	f000 f9da 	bl	8003a04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	2210      	movs	r2, #16
 800365a:	4013      	ands	r3, r2
 800365c:	d022      	beq.n	80036a4 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2210      	movs	r2, #16
 8003662:	4013      	ands	r3, r2
 8003664:	d01e      	beq.n	80036a4 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2211      	movs	r2, #17
 800366c:	4252      	negs	r2, r2
 800366e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2208      	movs	r2, #8
 8003674:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	69da      	ldr	r2, [r3, #28]
 800367c:	23c0      	movs	r3, #192	@ 0xc0
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	4013      	ands	r3, r2
 8003682:	d004      	beq.n	800368e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	0018      	movs	r0, r3
 8003688:	f000 f9b4 	bl	80039f4 <HAL_TIM_IC_CaptureCallback>
 800368c:	e007      	b.n	800369e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	0018      	movs	r0, r3
 8003692:	f000 f9a7 	bl	80039e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	0018      	movs	r0, r3
 800369a:	f000 f9b3 	bl	8003a04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	2201      	movs	r2, #1
 80036a8:	4013      	ands	r3, r2
 80036aa:	d00c      	beq.n	80036c6 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2201      	movs	r2, #1
 80036b0:	4013      	ands	r3, r2
 80036b2:	d008      	beq.n	80036c6 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2202      	movs	r2, #2
 80036ba:	4252      	negs	r2, r2
 80036bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	0018      	movs	r0, r3
 80036c2:	f000 f987 	bl	80039d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	2280      	movs	r2, #128	@ 0x80
 80036ca:	4013      	ands	r3, r2
 80036cc:	d104      	bne.n	80036d8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	2380      	movs	r3, #128	@ 0x80
 80036d2:	019b      	lsls	r3, r3, #6
 80036d4:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80036d6:	d00b      	beq.n	80036f0 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2280      	movs	r2, #128	@ 0x80
 80036dc:	4013      	ands	r3, r2
 80036de:	d007      	beq.n	80036f0 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a1e      	ldr	r2, [pc, #120]	@ (8003760 <HAL_TIM_IRQHandler+0x208>)
 80036e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	0018      	movs	r0, r3
 80036ec:	f000 fdda 	bl	80042a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80036f0:	68ba      	ldr	r2, [r7, #8]
 80036f2:	2380      	movs	r3, #128	@ 0x80
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	4013      	ands	r3, r2
 80036f8:	d00b      	beq.n	8003712 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2280      	movs	r2, #128	@ 0x80
 80036fe:	4013      	ands	r3, r2
 8003700:	d007      	beq.n	8003712 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a17      	ldr	r2, [pc, #92]	@ (8003764 <HAL_TIM_IRQHandler+0x20c>)
 8003708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	0018      	movs	r0, r3
 800370e:	f000 fdd1 	bl	80042b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2240      	movs	r2, #64	@ 0x40
 8003716:	4013      	ands	r3, r2
 8003718:	d00c      	beq.n	8003734 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2240      	movs	r2, #64	@ 0x40
 800371e:	4013      	ands	r3, r2
 8003720:	d008      	beq.n	8003734 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2241      	movs	r2, #65	@ 0x41
 8003728:	4252      	negs	r2, r2
 800372a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	0018      	movs	r0, r3
 8003730:	f000 f970 	bl	8003a14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	2220      	movs	r2, #32
 8003738:	4013      	ands	r3, r2
 800373a:	d00c      	beq.n	8003756 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2220      	movs	r2, #32
 8003740:	4013      	ands	r3, r2
 8003742:	d008      	beq.n	8003756 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2221      	movs	r2, #33	@ 0x21
 800374a:	4252      	negs	r2, r2
 800374c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	0018      	movs	r0, r3
 8003752:	f000 fd9f 	bl	8004294 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003756:	46c0      	nop			@ (mov r8, r8)
 8003758:	46bd      	mov	sp, r7
 800375a:	b004      	add	sp, #16
 800375c:	bd80      	pop	{r7, pc}
 800375e:	46c0      	nop			@ (mov r8, r8)
 8003760:	ffffdf7f 	.word	0xffffdf7f
 8003764:	fffffeff 	.word	0xfffffeff

08003768 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003774:	2317      	movs	r3, #23
 8003776:	18fb      	adds	r3, r7, r3
 8003778:	2200      	movs	r2, #0
 800377a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	223c      	movs	r2, #60	@ 0x3c
 8003780:	5c9b      	ldrb	r3, [r3, r2]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d101      	bne.n	800378a <HAL_TIM_OC_ConfigChannel+0x22>
 8003786:	2302      	movs	r3, #2
 8003788:	e048      	b.n	800381c <HAL_TIM_OC_ConfigChannel+0xb4>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	223c      	movs	r2, #60	@ 0x3c
 800378e:	2101      	movs	r1, #1
 8003790:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b14      	cmp	r3, #20
 8003796:	d835      	bhi.n	8003804 <HAL_TIM_OC_ConfigChannel+0x9c>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	009a      	lsls	r2, r3, #2
 800379c:	4b21      	ldr	r3, [pc, #132]	@ (8003824 <HAL_TIM_OC_ConfigChannel+0xbc>)
 800379e:	18d3      	adds	r3, r2, r3
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	0011      	movs	r1, r2
 80037ac:	0018      	movs	r0, r3
 80037ae:	f000 f9b3 	bl	8003b18 <TIM_OC1_SetConfig>
      break;
 80037b2:	e02c      	b.n	800380e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68ba      	ldr	r2, [r7, #8]
 80037ba:	0011      	movs	r1, r2
 80037bc:	0018      	movs	r0, r3
 80037be:	f000 fa2b 	bl	8003c18 <TIM_OC2_SetConfig>
      break;
 80037c2:	e024      	b.n	800380e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68ba      	ldr	r2, [r7, #8]
 80037ca:	0011      	movs	r1, r2
 80037cc:	0018      	movs	r0, r3
 80037ce:	f000 faa1 	bl	8003d14 <TIM_OC3_SetConfig>
      break;
 80037d2:	e01c      	b.n	800380e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68ba      	ldr	r2, [r7, #8]
 80037da:	0011      	movs	r1, r2
 80037dc:	0018      	movs	r0, r3
 80037de:	f000 fb1b 	bl	8003e18 <TIM_OC4_SetConfig>
      break;
 80037e2:	e014      	b.n	800380e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68ba      	ldr	r2, [r7, #8]
 80037ea:	0011      	movs	r1, r2
 80037ec:	0018      	movs	r0, r3
 80037ee:	f000 fb77 	bl	8003ee0 <TIM_OC5_SetConfig>
      break;
 80037f2:	e00c      	b.n	800380e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	0011      	movs	r1, r2
 80037fc:	0018      	movs	r0, r3
 80037fe:	f000 fbc9 	bl	8003f94 <TIM_OC6_SetConfig>
      break;
 8003802:	e004      	b.n	800380e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003804:	2317      	movs	r3, #23
 8003806:	18fb      	adds	r3, r7, r3
 8003808:	2201      	movs	r2, #1
 800380a:	701a      	strb	r2, [r3, #0]
      break;
 800380c:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	223c      	movs	r2, #60	@ 0x3c
 8003812:	2100      	movs	r1, #0
 8003814:	5499      	strb	r1, [r3, r2]

  return status;
 8003816:	2317      	movs	r3, #23
 8003818:	18fb      	adds	r3, r7, r3
 800381a:	781b      	ldrb	r3, [r3, #0]
}
 800381c:	0018      	movs	r0, r3
 800381e:	46bd      	mov	sp, r7
 8003820:	b006      	add	sp, #24
 8003822:	bd80      	pop	{r7, pc}
 8003824:	08005804 	.word	0x08005804

08003828 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003832:	230f      	movs	r3, #15
 8003834:	18fb      	adds	r3, r7, r3
 8003836:	2200      	movs	r2, #0
 8003838:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	223c      	movs	r2, #60	@ 0x3c
 800383e:	5c9b      	ldrb	r3, [r3, r2]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d101      	bne.n	8003848 <HAL_TIM_ConfigClockSource+0x20>
 8003844:	2302      	movs	r3, #2
 8003846:	e0bc      	b.n	80039c2 <HAL_TIM_ConfigClockSource+0x19a>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	223c      	movs	r2, #60	@ 0x3c
 800384c:	2101      	movs	r1, #1
 800384e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	223d      	movs	r2, #61	@ 0x3d
 8003854:	2102      	movs	r1, #2
 8003856:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	4a5a      	ldr	r2, [pc, #360]	@ (80039cc <HAL_TIM_ConfigClockSource+0x1a4>)
 8003864:	4013      	ands	r3, r2
 8003866:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	4a59      	ldr	r2, [pc, #356]	@ (80039d0 <HAL_TIM_ConfigClockSource+0x1a8>)
 800386c:	4013      	ands	r3, r2
 800386e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68ba      	ldr	r2, [r7, #8]
 8003876:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2280      	movs	r2, #128	@ 0x80
 800387e:	0192      	lsls	r2, r2, #6
 8003880:	4293      	cmp	r3, r2
 8003882:	d040      	beq.n	8003906 <HAL_TIM_ConfigClockSource+0xde>
 8003884:	2280      	movs	r2, #128	@ 0x80
 8003886:	0192      	lsls	r2, r2, #6
 8003888:	4293      	cmp	r3, r2
 800388a:	d900      	bls.n	800388e <HAL_TIM_ConfigClockSource+0x66>
 800388c:	e088      	b.n	80039a0 <HAL_TIM_ConfigClockSource+0x178>
 800388e:	2280      	movs	r2, #128	@ 0x80
 8003890:	0152      	lsls	r2, r2, #5
 8003892:	4293      	cmp	r3, r2
 8003894:	d100      	bne.n	8003898 <HAL_TIM_ConfigClockSource+0x70>
 8003896:	e088      	b.n	80039aa <HAL_TIM_ConfigClockSource+0x182>
 8003898:	2280      	movs	r2, #128	@ 0x80
 800389a:	0152      	lsls	r2, r2, #5
 800389c:	4293      	cmp	r3, r2
 800389e:	d900      	bls.n	80038a2 <HAL_TIM_ConfigClockSource+0x7a>
 80038a0:	e07e      	b.n	80039a0 <HAL_TIM_ConfigClockSource+0x178>
 80038a2:	2b70      	cmp	r3, #112	@ 0x70
 80038a4:	d018      	beq.n	80038d8 <HAL_TIM_ConfigClockSource+0xb0>
 80038a6:	d900      	bls.n	80038aa <HAL_TIM_ConfigClockSource+0x82>
 80038a8:	e07a      	b.n	80039a0 <HAL_TIM_ConfigClockSource+0x178>
 80038aa:	2b60      	cmp	r3, #96	@ 0x60
 80038ac:	d04f      	beq.n	800394e <HAL_TIM_ConfigClockSource+0x126>
 80038ae:	d900      	bls.n	80038b2 <HAL_TIM_ConfigClockSource+0x8a>
 80038b0:	e076      	b.n	80039a0 <HAL_TIM_ConfigClockSource+0x178>
 80038b2:	2b50      	cmp	r3, #80	@ 0x50
 80038b4:	d03b      	beq.n	800392e <HAL_TIM_ConfigClockSource+0x106>
 80038b6:	d900      	bls.n	80038ba <HAL_TIM_ConfigClockSource+0x92>
 80038b8:	e072      	b.n	80039a0 <HAL_TIM_ConfigClockSource+0x178>
 80038ba:	2b40      	cmp	r3, #64	@ 0x40
 80038bc:	d057      	beq.n	800396e <HAL_TIM_ConfigClockSource+0x146>
 80038be:	d900      	bls.n	80038c2 <HAL_TIM_ConfigClockSource+0x9a>
 80038c0:	e06e      	b.n	80039a0 <HAL_TIM_ConfigClockSource+0x178>
 80038c2:	2b30      	cmp	r3, #48	@ 0x30
 80038c4:	d063      	beq.n	800398e <HAL_TIM_ConfigClockSource+0x166>
 80038c6:	d86b      	bhi.n	80039a0 <HAL_TIM_ConfigClockSource+0x178>
 80038c8:	2b20      	cmp	r3, #32
 80038ca:	d060      	beq.n	800398e <HAL_TIM_ConfigClockSource+0x166>
 80038cc:	d868      	bhi.n	80039a0 <HAL_TIM_ConfigClockSource+0x178>
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d05d      	beq.n	800398e <HAL_TIM_ConfigClockSource+0x166>
 80038d2:	2b10      	cmp	r3, #16
 80038d4:	d05b      	beq.n	800398e <HAL_TIM_ConfigClockSource+0x166>
 80038d6:	e063      	b.n	80039a0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038e8:	f000 fc2e 	bl	8004148 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	2277      	movs	r2, #119	@ 0x77
 80038f8:	4313      	orrs	r3, r2
 80038fa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68ba      	ldr	r2, [r7, #8]
 8003902:	609a      	str	r2, [r3, #8]
      break;
 8003904:	e052      	b.n	80039ac <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003916:	f000 fc17 	bl	8004148 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2180      	movs	r1, #128	@ 0x80
 8003926:	01c9      	lsls	r1, r1, #7
 8003928:	430a      	orrs	r2, r1
 800392a:	609a      	str	r2, [r3, #8]
      break;
 800392c:	e03e      	b.n	80039ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800393a:	001a      	movs	r2, r3
 800393c:	f000 fb88 	bl	8004050 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2150      	movs	r1, #80	@ 0x50
 8003946:	0018      	movs	r0, r3
 8003948:	f000 fbe2 	bl	8004110 <TIM_ITRx_SetConfig>
      break;
 800394c:	e02e      	b.n	80039ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800395a:	001a      	movs	r2, r3
 800395c:	f000 fba6 	bl	80040ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2160      	movs	r1, #96	@ 0x60
 8003966:	0018      	movs	r0, r3
 8003968:	f000 fbd2 	bl	8004110 <TIM_ITRx_SetConfig>
      break;
 800396c:	e01e      	b.n	80039ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800397a:	001a      	movs	r2, r3
 800397c:	f000 fb68 	bl	8004050 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2140      	movs	r1, #64	@ 0x40
 8003986:	0018      	movs	r0, r3
 8003988:	f000 fbc2 	bl	8004110 <TIM_ITRx_SetConfig>
      break;
 800398c:	e00e      	b.n	80039ac <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	0019      	movs	r1, r3
 8003998:	0010      	movs	r0, r2
 800399a:	f000 fbb9 	bl	8004110 <TIM_ITRx_SetConfig>
      break;
 800399e:	e005      	b.n	80039ac <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80039a0:	230f      	movs	r3, #15
 80039a2:	18fb      	adds	r3, r7, r3
 80039a4:	2201      	movs	r2, #1
 80039a6:	701a      	strb	r2, [r3, #0]
      break;
 80039a8:	e000      	b.n	80039ac <HAL_TIM_ConfigClockSource+0x184>
      break;
 80039aa:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	223d      	movs	r2, #61	@ 0x3d
 80039b0:	2101      	movs	r1, #1
 80039b2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	223c      	movs	r2, #60	@ 0x3c
 80039b8:	2100      	movs	r1, #0
 80039ba:	5499      	strb	r1, [r3, r2]

  return status;
 80039bc:	230f      	movs	r3, #15
 80039be:	18fb      	adds	r3, r7, r3
 80039c0:	781b      	ldrb	r3, [r3, #0]
}
 80039c2:	0018      	movs	r0, r3
 80039c4:	46bd      	mov	sp, r7
 80039c6:	b004      	add	sp, #16
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	46c0      	nop			@ (mov r8, r8)
 80039cc:	ffceff88 	.word	0xffceff88
 80039d0:	ffff00ff 	.word	0xffff00ff

080039d4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80039dc:	46c0      	nop			@ (mov r8, r8)
 80039de:	46bd      	mov	sp, r7
 80039e0:	b002      	add	sp, #8
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039ec:	46c0      	nop			@ (mov r8, r8)
 80039ee:	46bd      	mov	sp, r7
 80039f0:	b002      	add	sp, #8
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039fc:	46c0      	nop			@ (mov r8, r8)
 80039fe:	46bd      	mov	sp, r7
 8003a00:	b002      	add	sp, #8
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a0c:	46c0      	nop			@ (mov r8, r8)
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	b002      	add	sp, #8
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a1c:	46c0      	nop			@ (mov r8, r8)
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	b002      	add	sp, #8
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a32      	ldr	r2, [pc, #200]	@ (8003b00 <TIM_Base_SetConfig+0xdc>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d003      	beq.n	8003a44 <TIM_Base_SetConfig+0x20>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a31      	ldr	r2, [pc, #196]	@ (8003b04 <TIM_Base_SetConfig+0xe0>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d108      	bne.n	8003a56 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2270      	movs	r2, #112	@ 0x70
 8003a48:	4393      	bics	r3, r2
 8003a4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a29      	ldr	r2, [pc, #164]	@ (8003b00 <TIM_Base_SetConfig+0xdc>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d00f      	beq.n	8003a7e <TIM_Base_SetConfig+0x5a>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a28      	ldr	r2, [pc, #160]	@ (8003b04 <TIM_Base_SetConfig+0xe0>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d00b      	beq.n	8003a7e <TIM_Base_SetConfig+0x5a>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a27      	ldr	r2, [pc, #156]	@ (8003b08 <TIM_Base_SetConfig+0xe4>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d007      	beq.n	8003a7e <TIM_Base_SetConfig+0x5a>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a26      	ldr	r2, [pc, #152]	@ (8003b0c <TIM_Base_SetConfig+0xe8>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d003      	beq.n	8003a7e <TIM_Base_SetConfig+0x5a>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a25      	ldr	r2, [pc, #148]	@ (8003b10 <TIM_Base_SetConfig+0xec>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d108      	bne.n	8003a90 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	4a24      	ldr	r2, [pc, #144]	@ (8003b14 <TIM_Base_SetConfig+0xf0>)
 8003a82:	4013      	ands	r3, r2
 8003a84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2280      	movs	r2, #128	@ 0x80
 8003a94:	4393      	bics	r3, r2
 8003a96:	001a      	movs	r2, r3
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	689a      	ldr	r2, [r3, #8]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a11      	ldr	r2, [pc, #68]	@ (8003b00 <TIM_Base_SetConfig+0xdc>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d007      	beq.n	8003ace <TIM_Base_SetConfig+0xaa>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a12      	ldr	r2, [pc, #72]	@ (8003b0c <TIM_Base_SetConfig+0xe8>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d003      	beq.n	8003ace <TIM_Base_SetConfig+0xaa>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a11      	ldr	r2, [pc, #68]	@ (8003b10 <TIM_Base_SetConfig+0xec>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d103      	bne.n	8003ad6 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	691a      	ldr	r2, [r3, #16]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d106      	bne.n	8003af6 <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	2201      	movs	r2, #1
 8003aee:	4393      	bics	r3, r2
 8003af0:	001a      	movs	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	611a      	str	r2, [r3, #16]
  }
}
 8003af6:	46c0      	nop			@ (mov r8, r8)
 8003af8:	46bd      	mov	sp, r7
 8003afa:	b004      	add	sp, #16
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	46c0      	nop			@ (mov r8, r8)
 8003b00:	40012c00 	.word	0x40012c00
 8003b04:	40000400 	.word	0x40000400
 8003b08:	40002000 	.word	0x40002000
 8003b0c:	40014400 	.word	0x40014400
 8003b10:	40014800 	.word	0x40014800
 8003b14:	fffffcff 	.word	0xfffffcff

08003b18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b086      	sub	sp, #24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a1b      	ldr	r3, [r3, #32]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	4393      	bics	r3, r2
 8003b30:	001a      	movs	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	4a2e      	ldr	r2, [pc, #184]	@ (8003c00 <TIM_OC1_SetConfig+0xe8>)
 8003b46:	4013      	ands	r3, r2
 8003b48:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2203      	movs	r2, #3
 8003b4e:	4393      	bics	r3, r2
 8003b50:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	2202      	movs	r2, #2
 8003b60:	4393      	bics	r3, r2
 8003b62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a24      	ldr	r2, [pc, #144]	@ (8003c04 <TIM_OC1_SetConfig+0xec>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d007      	beq.n	8003b86 <TIM_OC1_SetConfig+0x6e>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a23      	ldr	r2, [pc, #140]	@ (8003c08 <TIM_OC1_SetConfig+0xf0>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d003      	beq.n	8003b86 <TIM_OC1_SetConfig+0x6e>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a22      	ldr	r2, [pc, #136]	@ (8003c0c <TIM_OC1_SetConfig+0xf4>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d10c      	bne.n	8003ba0 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	2208      	movs	r2, #8
 8003b8a:	4393      	bics	r3, r2
 8003b8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	2204      	movs	r2, #4
 8003b9c:	4393      	bics	r3, r2
 8003b9e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a18      	ldr	r2, [pc, #96]	@ (8003c04 <TIM_OC1_SetConfig+0xec>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d007      	beq.n	8003bb8 <TIM_OC1_SetConfig+0xa0>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a17      	ldr	r2, [pc, #92]	@ (8003c08 <TIM_OC1_SetConfig+0xf0>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d003      	beq.n	8003bb8 <TIM_OC1_SetConfig+0xa0>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a16      	ldr	r2, [pc, #88]	@ (8003c0c <TIM_OC1_SetConfig+0xf4>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d111      	bne.n	8003bdc <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	4a15      	ldr	r2, [pc, #84]	@ (8003c10 <TIM_OC1_SetConfig+0xf8>)
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	4a14      	ldr	r2, [pc, #80]	@ (8003c14 <TIM_OC1_SetConfig+0xfc>)
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685a      	ldr	r2, [r3, #4]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	621a      	str	r2, [r3, #32]
}
 8003bf6:	46c0      	nop			@ (mov r8, r8)
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	b006      	add	sp, #24
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	46c0      	nop			@ (mov r8, r8)
 8003c00:	fffeff8f 	.word	0xfffeff8f
 8003c04:	40012c00 	.word	0x40012c00
 8003c08:	40014400 	.word	0x40014400
 8003c0c:	40014800 	.word	0x40014800
 8003c10:	fffffeff 	.word	0xfffffeff
 8003c14:	fffffdff 	.word	0xfffffdff

08003c18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	2210      	movs	r2, #16
 8003c2e:	4393      	bics	r3, r2
 8003c30:	001a      	movs	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	4a2c      	ldr	r2, [pc, #176]	@ (8003cf8 <TIM_OC2_SetConfig+0xe0>)
 8003c46:	4013      	ands	r3, r2
 8003c48:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	4a2b      	ldr	r2, [pc, #172]	@ (8003cfc <TIM_OC2_SetConfig+0xe4>)
 8003c4e:	4013      	ands	r3, r2
 8003c50:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	021b      	lsls	r3, r3, #8
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	2220      	movs	r2, #32
 8003c62:	4393      	bics	r3, r2
 8003c64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	011b      	lsls	r3, r3, #4
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a22      	ldr	r2, [pc, #136]	@ (8003d00 <TIM_OC2_SetConfig+0xe8>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d10d      	bne.n	8003c96 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	2280      	movs	r2, #128	@ 0x80
 8003c7e:	4393      	bics	r3, r2
 8003c80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	011b      	lsls	r3, r3, #4
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	2240      	movs	r2, #64	@ 0x40
 8003c92:	4393      	bics	r3, r2
 8003c94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a19      	ldr	r2, [pc, #100]	@ (8003d00 <TIM_OC2_SetConfig+0xe8>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d007      	beq.n	8003cae <TIM_OC2_SetConfig+0x96>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a18      	ldr	r2, [pc, #96]	@ (8003d04 <TIM_OC2_SetConfig+0xec>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d003      	beq.n	8003cae <TIM_OC2_SetConfig+0x96>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a17      	ldr	r2, [pc, #92]	@ (8003d08 <TIM_OC2_SetConfig+0xf0>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d113      	bne.n	8003cd6 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	4a16      	ldr	r2, [pc, #88]	@ (8003d0c <TIM_OC2_SetConfig+0xf4>)
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	4a15      	ldr	r2, [pc, #84]	@ (8003d10 <TIM_OC2_SetConfig+0xf8>)
 8003cba:	4013      	ands	r3, r2
 8003cbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	685a      	ldr	r2, [r3, #4]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	621a      	str	r2, [r3, #32]
}
 8003cf0:	46c0      	nop			@ (mov r8, r8)
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	b006      	add	sp, #24
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	feff8fff 	.word	0xfeff8fff
 8003cfc:	fffffcff 	.word	0xfffffcff
 8003d00:	40012c00 	.word	0x40012c00
 8003d04:	40014400 	.word	0x40014400
 8003d08:	40014800 	.word	0x40014800
 8003d0c:	fffffbff 	.word	0xfffffbff
 8003d10:	fffff7ff 	.word	0xfffff7ff

08003d14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	4a31      	ldr	r2, [pc, #196]	@ (8003df0 <TIM_OC3_SetConfig+0xdc>)
 8003d2a:	401a      	ands	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	69db      	ldr	r3, [r3, #28]
 8003d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	4a2d      	ldr	r2, [pc, #180]	@ (8003df4 <TIM_OC3_SetConfig+0xe0>)
 8003d40:	4013      	ands	r3, r2
 8003d42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2203      	movs	r2, #3
 8003d48:	4393      	bics	r3, r2
 8003d4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	4a27      	ldr	r2, [pc, #156]	@ (8003df8 <TIM_OC3_SetConfig+0xe4>)
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	021b      	lsls	r3, r3, #8
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a23      	ldr	r2, [pc, #140]	@ (8003dfc <TIM_OC3_SetConfig+0xe8>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d10d      	bne.n	8003d8e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	4a22      	ldr	r2, [pc, #136]	@ (8003e00 <TIM_OC3_SetConfig+0xec>)
 8003d76:	4013      	ands	r3, r2
 8003d78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	021b      	lsls	r3, r3, #8
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	4a1e      	ldr	r2, [pc, #120]	@ (8003e04 <TIM_OC3_SetConfig+0xf0>)
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a1a      	ldr	r2, [pc, #104]	@ (8003dfc <TIM_OC3_SetConfig+0xe8>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d007      	beq.n	8003da6 <TIM_OC3_SetConfig+0x92>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a1b      	ldr	r2, [pc, #108]	@ (8003e08 <TIM_OC3_SetConfig+0xf4>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d003      	beq.n	8003da6 <TIM_OC3_SetConfig+0x92>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a1a      	ldr	r2, [pc, #104]	@ (8003e0c <TIM_OC3_SetConfig+0xf8>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d113      	bne.n	8003dce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	4a19      	ldr	r2, [pc, #100]	@ (8003e10 <TIM_OC3_SetConfig+0xfc>)
 8003daa:	4013      	ands	r3, r2
 8003dac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	4a18      	ldr	r2, [pc, #96]	@ (8003e14 <TIM_OC3_SetConfig+0x100>)
 8003db2:	4013      	ands	r3, r2
 8003db4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	011b      	lsls	r3, r3, #4
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	011b      	lsls	r3, r3, #4
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	697a      	ldr	r2, [r7, #20]
 8003de6:	621a      	str	r2, [r3, #32]
}
 8003de8:	46c0      	nop			@ (mov r8, r8)
 8003dea:	46bd      	mov	sp, r7
 8003dec:	b006      	add	sp, #24
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	fffffeff 	.word	0xfffffeff
 8003df4:	fffeff8f 	.word	0xfffeff8f
 8003df8:	fffffdff 	.word	0xfffffdff
 8003dfc:	40012c00 	.word	0x40012c00
 8003e00:	fffff7ff 	.word	0xfffff7ff
 8003e04:	fffffbff 	.word	0xfffffbff
 8003e08:	40014400 	.word	0x40014400
 8003e0c:	40014800 	.word	0x40014800
 8003e10:	ffffefff 	.word	0xffffefff
 8003e14:	ffffdfff 	.word	0xffffdfff

08003e18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	4a24      	ldr	r2, [pc, #144]	@ (8003ec0 <TIM_OC4_SetConfig+0xa8>)
 8003e2e:	401a      	ands	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	69db      	ldr	r3, [r3, #28]
 8003e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	4a20      	ldr	r2, [pc, #128]	@ (8003ec4 <TIM_OC4_SetConfig+0xac>)
 8003e44:	4013      	ands	r3, r2
 8003e46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	4a1f      	ldr	r2, [pc, #124]	@ (8003ec8 <TIM_OC4_SetConfig+0xb0>)
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	021b      	lsls	r3, r3, #8
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	4a1b      	ldr	r2, [pc, #108]	@ (8003ecc <TIM_OC4_SetConfig+0xb4>)
 8003e60:	4013      	ands	r3, r2
 8003e62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	031b      	lsls	r3, r3, #12
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a17      	ldr	r2, [pc, #92]	@ (8003ed0 <TIM_OC4_SetConfig+0xb8>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d007      	beq.n	8003e88 <TIM_OC4_SetConfig+0x70>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a16      	ldr	r2, [pc, #88]	@ (8003ed4 <TIM_OC4_SetConfig+0xbc>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d003      	beq.n	8003e88 <TIM_OC4_SetConfig+0x70>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a15      	ldr	r2, [pc, #84]	@ (8003ed8 <TIM_OC4_SetConfig+0xc0>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d109      	bne.n	8003e9c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	4a14      	ldr	r2, [pc, #80]	@ (8003edc <TIM_OC4_SetConfig+0xc4>)
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	019b      	lsls	r3, r3, #6
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	621a      	str	r2, [r3, #32]
}
 8003eb6:	46c0      	nop			@ (mov r8, r8)
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	b006      	add	sp, #24
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	46c0      	nop			@ (mov r8, r8)
 8003ec0:	ffffefff 	.word	0xffffefff
 8003ec4:	feff8fff 	.word	0xfeff8fff
 8003ec8:	fffffcff 	.word	0xfffffcff
 8003ecc:	ffffdfff 	.word	0xffffdfff
 8003ed0:	40012c00 	.word	0x40012c00
 8003ed4:	40014400 	.word	0x40014400
 8003ed8:	40014800 	.word	0x40014800
 8003edc:	ffffbfff 	.word	0xffffbfff

08003ee0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a1b      	ldr	r3, [r3, #32]
 8003ef4:	4a21      	ldr	r2, [pc, #132]	@ (8003f7c <TIM_OC5_SetConfig+0x9c>)
 8003ef6:	401a      	ands	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	4a1d      	ldr	r2, [pc, #116]	@ (8003f80 <TIM_OC5_SetConfig+0xa0>)
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	4a19      	ldr	r2, [pc, #100]	@ (8003f84 <TIM_OC5_SetConfig+0xa4>)
 8003f1e:	4013      	ands	r3, r2
 8003f20:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	041b      	lsls	r3, r3, #16
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a15      	ldr	r2, [pc, #84]	@ (8003f88 <TIM_OC5_SetConfig+0xa8>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d007      	beq.n	8003f46 <TIM_OC5_SetConfig+0x66>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a14      	ldr	r2, [pc, #80]	@ (8003f8c <TIM_OC5_SetConfig+0xac>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d003      	beq.n	8003f46 <TIM_OC5_SetConfig+0x66>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a13      	ldr	r2, [pc, #76]	@ (8003f90 <TIM_OC5_SetConfig+0xb0>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d109      	bne.n	8003f5a <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	4a0c      	ldr	r2, [pc, #48]	@ (8003f7c <TIM_OC5_SetConfig+0x9c>)
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	021b      	lsls	r3, r3, #8
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	697a      	ldr	r2, [r7, #20]
 8003f5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	685a      	ldr	r2, [r3, #4]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	621a      	str	r2, [r3, #32]
}
 8003f74:	46c0      	nop			@ (mov r8, r8)
 8003f76:	46bd      	mov	sp, r7
 8003f78:	b006      	add	sp, #24
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	fffeffff 	.word	0xfffeffff
 8003f80:	fffeff8f 	.word	0xfffeff8f
 8003f84:	fffdffff 	.word	0xfffdffff
 8003f88:	40012c00 	.word	0x40012c00
 8003f8c:	40014400 	.word	0x40014400
 8003f90:	40014800 	.word	0x40014800

08003f94 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b086      	sub	sp, #24
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a1b      	ldr	r3, [r3, #32]
 8003fa8:	4a22      	ldr	r2, [pc, #136]	@ (8004034 <TIM_OC6_SetConfig+0xa0>)
 8003faa:	401a      	ands	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	4a1e      	ldr	r2, [pc, #120]	@ (8004038 <TIM_OC6_SetConfig+0xa4>)
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	021b      	lsls	r3, r3, #8
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	4a1a      	ldr	r2, [pc, #104]	@ (800403c <TIM_OC6_SetConfig+0xa8>)
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	051b      	lsls	r3, r3, #20
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a16      	ldr	r2, [pc, #88]	@ (8004040 <TIM_OC6_SetConfig+0xac>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d007      	beq.n	8003ffc <TIM_OC6_SetConfig+0x68>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a15      	ldr	r2, [pc, #84]	@ (8004044 <TIM_OC6_SetConfig+0xb0>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d003      	beq.n	8003ffc <TIM_OC6_SetConfig+0x68>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a14      	ldr	r2, [pc, #80]	@ (8004048 <TIM_OC6_SetConfig+0xb4>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d109      	bne.n	8004010 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	4a13      	ldr	r2, [pc, #76]	@ (800404c <TIM_OC6_SetConfig+0xb8>)
 8004000:	4013      	ands	r3, r2
 8004002:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	029b      	lsls	r3, r3, #10
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	4313      	orrs	r3, r2
 800400e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685a      	ldr	r2, [r3, #4]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	621a      	str	r2, [r3, #32]
}
 800402a:	46c0      	nop			@ (mov r8, r8)
 800402c:	46bd      	mov	sp, r7
 800402e:	b006      	add	sp, #24
 8004030:	bd80      	pop	{r7, pc}
 8004032:	46c0      	nop			@ (mov r8, r8)
 8004034:	ffefffff 	.word	0xffefffff
 8004038:	feff8fff 	.word	0xfeff8fff
 800403c:	ffdfffff 	.word	0xffdfffff
 8004040:	40012c00 	.word	0x40012c00
 8004044:	40014400 	.word	0x40014400
 8004048:	40014800 	.word	0x40014800
 800404c:	fffbffff 	.word	0xfffbffff

08004050 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	2201      	movs	r2, #1
 8004068:	4393      	bics	r3, r2
 800406a:	001a      	movs	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	22f0      	movs	r2, #240	@ 0xf0
 800407a:	4393      	bics	r3, r2
 800407c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	011b      	lsls	r3, r3, #4
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	4313      	orrs	r3, r2
 8004086:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	220a      	movs	r2, #10
 800408c:	4393      	bics	r3, r2
 800408e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004090:	697a      	ldr	r2, [r7, #20]
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	4313      	orrs	r3, r2
 8004096:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	621a      	str	r2, [r3, #32]
}
 80040a4:	46c0      	nop			@ (mov r8, r8)
 80040a6:	46bd      	mov	sp, r7
 80040a8:	b006      	add	sp, #24
 80040aa:	bd80      	pop	{r7, pc}

080040ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b086      	sub	sp, #24
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6a1b      	ldr	r3, [r3, #32]
 80040bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	2210      	movs	r2, #16
 80040c4:	4393      	bics	r3, r2
 80040c6:	001a      	movs	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	4a0d      	ldr	r2, [pc, #52]	@ (800410c <TIM_TI2_ConfigInputStage+0x60>)
 80040d6:	4013      	ands	r3, r2
 80040d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	031b      	lsls	r3, r3, #12
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	22a0      	movs	r2, #160	@ 0xa0
 80040e8:	4393      	bics	r3, r2
 80040ea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	011b      	lsls	r3, r3, #4
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	621a      	str	r2, [r3, #32]
}
 8004102:	46c0      	nop			@ (mov r8, r8)
 8004104:	46bd      	mov	sp, r7
 8004106:	b006      	add	sp, #24
 8004108:	bd80      	pop	{r7, pc}
 800410a:	46c0      	nop			@ (mov r8, r8)
 800410c:	ffff0fff 	.word	0xffff0fff

08004110 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	4a08      	ldr	r2, [pc, #32]	@ (8004144 <TIM_ITRx_SetConfig+0x34>)
 8004124:	4013      	ands	r3, r2
 8004126:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	4313      	orrs	r3, r2
 800412e:	2207      	movs	r2, #7
 8004130:	4313      	orrs	r3, r2
 8004132:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	609a      	str	r2, [r3, #8]
}
 800413a:	46c0      	nop			@ (mov r8, r8)
 800413c:	46bd      	mov	sp, r7
 800413e:	b004      	add	sp, #16
 8004140:	bd80      	pop	{r7, pc}
 8004142:	46c0      	nop			@ (mov r8, r8)
 8004144:	ffcfff8f 	.word	0xffcfff8f

08004148 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	607a      	str	r2, [r7, #4]
 8004154:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	4a09      	ldr	r2, [pc, #36]	@ (8004184 <TIM_ETR_SetConfig+0x3c>)
 8004160:	4013      	ands	r3, r2
 8004162:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	021a      	lsls	r2, r3, #8
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	431a      	orrs	r2, r3
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	4313      	orrs	r3, r2
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	4313      	orrs	r3, r2
 8004174:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	697a      	ldr	r2, [r7, #20]
 800417a:	609a      	str	r2, [r3, #8]
}
 800417c:	46c0      	nop			@ (mov r8, r8)
 800417e:	46bd      	mov	sp, r7
 8004180:	b006      	add	sp, #24
 8004182:	bd80      	pop	{r7, pc}
 8004184:	ffff00ff 	.word	0xffff00ff

08004188 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	221f      	movs	r2, #31
 8004198:	4013      	ands	r3, r2
 800419a:	2201      	movs	r2, #1
 800419c:	409a      	lsls	r2, r3
 800419e:	0013      	movs	r3, r2
 80041a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	43d2      	mvns	r2, r2
 80041aa:	401a      	ands	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6a1a      	ldr	r2, [r3, #32]
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	211f      	movs	r1, #31
 80041b8:	400b      	ands	r3, r1
 80041ba:	6879      	ldr	r1, [r7, #4]
 80041bc:	4099      	lsls	r1, r3
 80041be:	000b      	movs	r3, r1
 80041c0:	431a      	orrs	r2, r3
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	621a      	str	r2, [r3, #32]
}
 80041c6:	46c0      	nop			@ (mov r8, r8)
 80041c8:	46bd      	mov	sp, r7
 80041ca:	b006      	add	sp, #24
 80041cc:	bd80      	pop	{r7, pc}
	...

080041d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	223c      	movs	r2, #60	@ 0x3c
 80041de:	5c9b      	ldrb	r3, [r3, r2]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d101      	bne.n	80041e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041e4:	2302      	movs	r3, #2
 80041e6:	e04a      	b.n	800427e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	223c      	movs	r2, #60	@ 0x3c
 80041ec:	2101      	movs	r1, #1
 80041ee:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	223d      	movs	r2, #61	@ 0x3d
 80041f4:	2102      	movs	r1, #2
 80041f6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a1e      	ldr	r2, [pc, #120]	@ (8004288 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d108      	bne.n	8004224 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	4a1d      	ldr	r2, [pc, #116]	@ (800428c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004216:	4013      	ands	r3, r2
 8004218:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	4313      	orrs	r3, r2
 8004222:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2270      	movs	r2, #112	@ 0x70
 8004228:	4393      	bics	r3, r2
 800422a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	4313      	orrs	r3, r2
 8004234:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a11      	ldr	r2, [pc, #68]	@ (8004288 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d004      	beq.n	8004252 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a10      	ldr	r2, [pc, #64]	@ (8004290 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d10c      	bne.n	800426c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	2280      	movs	r2, #128	@ 0x80
 8004256:	4393      	bics	r3, r2
 8004258:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	68ba      	ldr	r2, [r7, #8]
 8004260:	4313      	orrs	r3, r2
 8004262:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68ba      	ldr	r2, [r7, #8]
 800426a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	223d      	movs	r2, #61	@ 0x3d
 8004270:	2101      	movs	r1, #1
 8004272:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	223c      	movs	r2, #60	@ 0x3c
 8004278:	2100      	movs	r1, #0
 800427a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	0018      	movs	r0, r3
 8004280:	46bd      	mov	sp, r7
 8004282:	b004      	add	sp, #16
 8004284:	bd80      	pop	{r7, pc}
 8004286:	46c0      	nop			@ (mov r8, r8)
 8004288:	40012c00 	.word	0x40012c00
 800428c:	ff0fffff 	.word	0xff0fffff
 8004290:	40000400 	.word	0x40000400

08004294 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800429c:	46c0      	nop			@ (mov r8, r8)
 800429e:	46bd      	mov	sp, r7
 80042a0:	b002      	add	sp, #8
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042ac:	46c0      	nop			@ (mov r8, r8)
 80042ae:	46bd      	mov	sp, r7
 80042b0:	b002      	add	sp, #8
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80042bc:	46c0      	nop			@ (mov r8, r8)
 80042be:	46bd      	mov	sp, r7
 80042c0:	b002      	add	sp, #8
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e046      	b.n	8004364 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2288      	movs	r2, #136	@ 0x88
 80042da:	589b      	ldr	r3, [r3, r2]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d107      	bne.n	80042f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2284      	movs	r2, #132	@ 0x84
 80042e4:	2100      	movs	r1, #0
 80042e6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	0018      	movs	r0, r3
 80042ec:	f7fc fd0a 	bl	8000d04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2288      	movs	r2, #136	@ 0x88
 80042f4:	2124      	movs	r1, #36	@ 0x24
 80042f6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2101      	movs	r1, #1
 8004304:	438a      	bics	r2, r1
 8004306:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800430c:	2b00      	cmp	r3, #0
 800430e:	d003      	beq.n	8004318 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	0018      	movs	r0, r3
 8004314:	f000 fa3a 	bl	800478c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	0018      	movs	r0, r3
 800431c:	f000 f8cc 	bl	80044b8 <UART_SetConfig>
 8004320:	0003      	movs	r3, r0
 8004322:	2b01      	cmp	r3, #1
 8004324:	d101      	bne.n	800432a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e01c      	b.n	8004364 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	685a      	ldr	r2, [r3, #4]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	490d      	ldr	r1, [pc, #52]	@ (800436c <HAL_UART_Init+0xa8>)
 8004336:	400a      	ands	r2, r1
 8004338:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	689a      	ldr	r2, [r3, #8]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	212a      	movs	r1, #42	@ 0x2a
 8004346:	438a      	bics	r2, r1
 8004348:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2101      	movs	r1, #1
 8004356:	430a      	orrs	r2, r1
 8004358:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	0018      	movs	r0, r3
 800435e:	f000 fac9 	bl	80048f4 <UART_CheckIdleState>
 8004362:	0003      	movs	r3, r0
}
 8004364:	0018      	movs	r0, r3
 8004366:	46bd      	mov	sp, r7
 8004368:	b002      	add	sp, #8
 800436a:	bd80      	pop	{r7, pc}
 800436c:	ffffb7ff 	.word	0xffffb7ff

08004370 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b08a      	sub	sp, #40	@ 0x28
 8004374:	af02      	add	r7, sp, #8
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	603b      	str	r3, [r7, #0]
 800437c:	1dbb      	adds	r3, r7, #6
 800437e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2288      	movs	r2, #136	@ 0x88
 8004384:	589b      	ldr	r3, [r3, r2]
 8004386:	2b20      	cmp	r3, #32
 8004388:	d000      	beq.n	800438c <HAL_UART_Transmit+0x1c>
 800438a:	e090      	b.n	80044ae <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d003      	beq.n	800439a <HAL_UART_Transmit+0x2a>
 8004392:	1dbb      	adds	r3, r7, #6
 8004394:	881b      	ldrh	r3, [r3, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e088      	b.n	80044b0 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	689a      	ldr	r2, [r3, #8]
 80043a2:	2380      	movs	r3, #128	@ 0x80
 80043a4:	015b      	lsls	r3, r3, #5
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d109      	bne.n	80043be <HAL_UART_Transmit+0x4e>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d105      	bne.n	80043be <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	2201      	movs	r2, #1
 80043b6:	4013      	ands	r3, r2
 80043b8:	d001      	beq.n	80043be <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e078      	b.n	80044b0 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2290      	movs	r2, #144	@ 0x90
 80043c2:	2100      	movs	r1, #0
 80043c4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2288      	movs	r2, #136	@ 0x88
 80043ca:	2121      	movs	r1, #33	@ 0x21
 80043cc:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043ce:	f7fc fef9 	bl	80011c4 <HAL_GetTick>
 80043d2:	0003      	movs	r3, r0
 80043d4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	1dba      	adds	r2, r7, #6
 80043da:	2154      	movs	r1, #84	@ 0x54
 80043dc:	8812      	ldrh	r2, [r2, #0]
 80043de:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	1dba      	adds	r2, r7, #6
 80043e4:	2156      	movs	r1, #86	@ 0x56
 80043e6:	8812      	ldrh	r2, [r2, #0]
 80043e8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	689a      	ldr	r2, [r3, #8]
 80043ee:	2380      	movs	r3, #128	@ 0x80
 80043f0:	015b      	lsls	r3, r3, #5
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d108      	bne.n	8004408 <HAL_UART_Transmit+0x98>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d104      	bne.n	8004408 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80043fe:	2300      	movs	r3, #0
 8004400:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	61bb      	str	r3, [r7, #24]
 8004406:	e003      	b.n	8004410 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800440c:	2300      	movs	r3, #0
 800440e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004410:	e030      	b.n	8004474 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	9300      	str	r3, [sp, #0]
 800441a:	0013      	movs	r3, r2
 800441c:	2200      	movs	r2, #0
 800441e:	2180      	movs	r1, #128	@ 0x80
 8004420:	f000 fb12 	bl	8004a48 <UART_WaitOnFlagUntilTimeout>
 8004424:	1e03      	subs	r3, r0, #0
 8004426:	d005      	beq.n	8004434 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2288      	movs	r2, #136	@ 0x88
 800442c:	2120      	movs	r1, #32
 800442e:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e03d      	b.n	80044b0 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10b      	bne.n	8004452 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	881b      	ldrh	r3, [r3, #0]
 800443e:	001a      	movs	r2, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	05d2      	lsls	r2, r2, #23
 8004446:	0dd2      	lsrs	r2, r2, #23
 8004448:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	3302      	adds	r3, #2
 800444e:	61bb      	str	r3, [r7, #24]
 8004450:	e007      	b.n	8004462 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	781a      	ldrb	r2, [r3, #0]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	3301      	adds	r3, #1
 8004460:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2256      	movs	r2, #86	@ 0x56
 8004466:	5a9b      	ldrh	r3, [r3, r2]
 8004468:	b29b      	uxth	r3, r3
 800446a:	3b01      	subs	r3, #1
 800446c:	b299      	uxth	r1, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2256      	movs	r2, #86	@ 0x56
 8004472:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2256      	movs	r2, #86	@ 0x56
 8004478:	5a9b      	ldrh	r3, [r3, r2]
 800447a:	b29b      	uxth	r3, r3
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1c8      	bne.n	8004412 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	9300      	str	r3, [sp, #0]
 8004488:	0013      	movs	r3, r2
 800448a:	2200      	movs	r2, #0
 800448c:	2140      	movs	r1, #64	@ 0x40
 800448e:	f000 fadb 	bl	8004a48 <UART_WaitOnFlagUntilTimeout>
 8004492:	1e03      	subs	r3, r0, #0
 8004494:	d005      	beq.n	80044a2 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2288      	movs	r2, #136	@ 0x88
 800449a:	2120      	movs	r1, #32
 800449c:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e006      	b.n	80044b0 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2288      	movs	r2, #136	@ 0x88
 80044a6:	2120      	movs	r1, #32
 80044a8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80044aa:	2300      	movs	r3, #0
 80044ac:	e000      	b.n	80044b0 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80044ae:	2302      	movs	r3, #2
  }
}
 80044b0:	0018      	movs	r0, r3
 80044b2:	46bd      	mov	sp, r7
 80044b4:	b008      	add	sp, #32
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b088      	sub	sp, #32
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044c0:	231a      	movs	r3, #26
 80044c2:	18fb      	adds	r3, r7, r3
 80044c4:	2200      	movs	r2, #0
 80044c6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689a      	ldr	r2, [r3, #8]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	431a      	orrs	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	431a      	orrs	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	69db      	ldr	r3, [r3, #28]
 80044dc:	4313      	orrs	r3, r2
 80044de:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4aa1      	ldr	r2, [pc, #644]	@ (800476c <UART_SetConfig+0x2b4>)
 80044e8:	4013      	ands	r3, r2
 80044ea:	0019      	movs	r1, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	69fa      	ldr	r2, [r7, #28]
 80044f2:	430a      	orrs	r2, r1
 80044f4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	4a9c      	ldr	r2, [pc, #624]	@ (8004770 <UART_SetConfig+0x2b8>)
 80044fe:	4013      	ands	r3, r2
 8004500:	0019      	movs	r1, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68da      	ldr	r2, [r3, #12]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	430a      	orrs	r2, r1
 800450c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a1b      	ldr	r3, [r3, #32]
 8004518:	69fa      	ldr	r2, [r7, #28]
 800451a:	4313      	orrs	r3, r2
 800451c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	4a93      	ldr	r2, [pc, #588]	@ (8004774 <UART_SetConfig+0x2bc>)
 8004526:	4013      	ands	r3, r2
 8004528:	0019      	movs	r1, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	69fa      	ldr	r2, [r7, #28]
 8004530:	430a      	orrs	r2, r1
 8004532:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800453a:	220f      	movs	r2, #15
 800453c:	4393      	bics	r3, r2
 800453e:	0019      	movs	r1, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	430a      	orrs	r2, r1
 800454a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a89      	ldr	r2, [pc, #548]	@ (8004778 <UART_SetConfig+0x2c0>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d127      	bne.n	80045a6 <UART_SetConfig+0xee>
 8004556:	4b89      	ldr	r3, [pc, #548]	@ (800477c <UART_SetConfig+0x2c4>)
 8004558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800455a:	2203      	movs	r2, #3
 800455c:	4013      	ands	r3, r2
 800455e:	2b03      	cmp	r3, #3
 8004560:	d017      	beq.n	8004592 <UART_SetConfig+0xda>
 8004562:	d81b      	bhi.n	800459c <UART_SetConfig+0xe4>
 8004564:	2b02      	cmp	r3, #2
 8004566:	d00a      	beq.n	800457e <UART_SetConfig+0xc6>
 8004568:	d818      	bhi.n	800459c <UART_SetConfig+0xe4>
 800456a:	2b00      	cmp	r3, #0
 800456c:	d002      	beq.n	8004574 <UART_SetConfig+0xbc>
 800456e:	2b01      	cmp	r3, #1
 8004570:	d00a      	beq.n	8004588 <UART_SetConfig+0xd0>
 8004572:	e013      	b.n	800459c <UART_SetConfig+0xe4>
 8004574:	231b      	movs	r3, #27
 8004576:	18fb      	adds	r3, r7, r3
 8004578:	2200      	movs	r2, #0
 800457a:	701a      	strb	r2, [r3, #0]
 800457c:	e021      	b.n	80045c2 <UART_SetConfig+0x10a>
 800457e:	231b      	movs	r3, #27
 8004580:	18fb      	adds	r3, r7, r3
 8004582:	2202      	movs	r2, #2
 8004584:	701a      	strb	r2, [r3, #0]
 8004586:	e01c      	b.n	80045c2 <UART_SetConfig+0x10a>
 8004588:	231b      	movs	r3, #27
 800458a:	18fb      	adds	r3, r7, r3
 800458c:	2204      	movs	r2, #4
 800458e:	701a      	strb	r2, [r3, #0]
 8004590:	e017      	b.n	80045c2 <UART_SetConfig+0x10a>
 8004592:	231b      	movs	r3, #27
 8004594:	18fb      	adds	r3, r7, r3
 8004596:	2208      	movs	r2, #8
 8004598:	701a      	strb	r2, [r3, #0]
 800459a:	e012      	b.n	80045c2 <UART_SetConfig+0x10a>
 800459c:	231b      	movs	r3, #27
 800459e:	18fb      	adds	r3, r7, r3
 80045a0:	2210      	movs	r2, #16
 80045a2:	701a      	strb	r2, [r3, #0]
 80045a4:	e00d      	b.n	80045c2 <UART_SetConfig+0x10a>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a75      	ldr	r2, [pc, #468]	@ (8004780 <UART_SetConfig+0x2c8>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d104      	bne.n	80045ba <UART_SetConfig+0x102>
 80045b0:	231b      	movs	r3, #27
 80045b2:	18fb      	adds	r3, r7, r3
 80045b4:	2200      	movs	r2, #0
 80045b6:	701a      	strb	r2, [r3, #0]
 80045b8:	e003      	b.n	80045c2 <UART_SetConfig+0x10a>
 80045ba:	231b      	movs	r3, #27
 80045bc:	18fb      	adds	r3, r7, r3
 80045be:	2210      	movs	r2, #16
 80045c0:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	69da      	ldr	r2, [r3, #28]
 80045c6:	2380      	movs	r3, #128	@ 0x80
 80045c8:	021b      	lsls	r3, r3, #8
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d000      	beq.n	80045d0 <UART_SetConfig+0x118>
 80045ce:	e065      	b.n	800469c <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 80045d0:	231b      	movs	r3, #27
 80045d2:	18fb      	adds	r3, r7, r3
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	2b08      	cmp	r3, #8
 80045d8:	d015      	beq.n	8004606 <UART_SetConfig+0x14e>
 80045da:	dc18      	bgt.n	800460e <UART_SetConfig+0x156>
 80045dc:	2b04      	cmp	r3, #4
 80045de:	d00d      	beq.n	80045fc <UART_SetConfig+0x144>
 80045e0:	dc15      	bgt.n	800460e <UART_SetConfig+0x156>
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d002      	beq.n	80045ec <UART_SetConfig+0x134>
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d005      	beq.n	80045f6 <UART_SetConfig+0x13e>
 80045ea:	e010      	b.n	800460e <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045ec:	f7fe fca2 	bl	8002f34 <HAL_RCC_GetPCLK1Freq>
 80045f0:	0003      	movs	r3, r0
 80045f2:	617b      	str	r3, [r7, #20]
        break;
 80045f4:	e012      	b.n	800461c <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045f6:	4b63      	ldr	r3, [pc, #396]	@ (8004784 <UART_SetConfig+0x2cc>)
 80045f8:	617b      	str	r3, [r7, #20]
        break;
 80045fa:	e00f      	b.n	800461c <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045fc:	f7fe fc0e 	bl	8002e1c <HAL_RCC_GetSysClockFreq>
 8004600:	0003      	movs	r3, r0
 8004602:	617b      	str	r3, [r7, #20]
        break;
 8004604:	e00a      	b.n	800461c <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004606:	2380      	movs	r3, #128	@ 0x80
 8004608:	021b      	lsls	r3, r3, #8
 800460a:	617b      	str	r3, [r7, #20]
        break;
 800460c:	e006      	b.n	800461c <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 800460e:	2300      	movs	r3, #0
 8004610:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004612:	231a      	movs	r3, #26
 8004614:	18fb      	adds	r3, r7, r3
 8004616:	2201      	movs	r2, #1
 8004618:	701a      	strb	r2, [r3, #0]
        break;
 800461a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d100      	bne.n	8004624 <UART_SetConfig+0x16c>
 8004622:	e08d      	b.n	8004740 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004628:	4b57      	ldr	r3, [pc, #348]	@ (8004788 <UART_SetConfig+0x2d0>)
 800462a:	0052      	lsls	r2, r2, #1
 800462c:	5ad3      	ldrh	r3, [r2, r3]
 800462e:	0019      	movs	r1, r3
 8004630:	6978      	ldr	r0, [r7, #20]
 8004632:	f7fb fd6f 	bl	8000114 <__udivsi3>
 8004636:	0003      	movs	r3, r0
 8004638:	005a      	lsls	r2, r3, #1
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	085b      	lsrs	r3, r3, #1
 8004640:	18d2      	adds	r2, r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	0019      	movs	r1, r3
 8004648:	0010      	movs	r0, r2
 800464a:	f7fb fd63 	bl	8000114 <__udivsi3>
 800464e:	0003      	movs	r3, r0
 8004650:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	2b0f      	cmp	r3, #15
 8004656:	d91c      	bls.n	8004692 <UART_SetConfig+0x1da>
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	2380      	movs	r3, #128	@ 0x80
 800465c:	025b      	lsls	r3, r3, #9
 800465e:	429a      	cmp	r2, r3
 8004660:	d217      	bcs.n	8004692 <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	b29a      	uxth	r2, r3
 8004666:	200e      	movs	r0, #14
 8004668:	183b      	adds	r3, r7, r0
 800466a:	210f      	movs	r1, #15
 800466c:	438a      	bics	r2, r1
 800466e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	085b      	lsrs	r3, r3, #1
 8004674:	b29b      	uxth	r3, r3
 8004676:	2207      	movs	r2, #7
 8004678:	4013      	ands	r3, r2
 800467a:	b299      	uxth	r1, r3
 800467c:	183b      	adds	r3, r7, r0
 800467e:	183a      	adds	r2, r7, r0
 8004680:	8812      	ldrh	r2, [r2, #0]
 8004682:	430a      	orrs	r2, r1
 8004684:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	183a      	adds	r2, r7, r0
 800468c:	8812      	ldrh	r2, [r2, #0]
 800468e:	60da      	str	r2, [r3, #12]
 8004690:	e056      	b.n	8004740 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8004692:	231a      	movs	r3, #26
 8004694:	18fb      	adds	r3, r7, r3
 8004696:	2201      	movs	r2, #1
 8004698:	701a      	strb	r2, [r3, #0]
 800469a:	e051      	b.n	8004740 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 800469c:	231b      	movs	r3, #27
 800469e:	18fb      	adds	r3, r7, r3
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	2b08      	cmp	r3, #8
 80046a4:	d015      	beq.n	80046d2 <UART_SetConfig+0x21a>
 80046a6:	dc18      	bgt.n	80046da <UART_SetConfig+0x222>
 80046a8:	2b04      	cmp	r3, #4
 80046aa:	d00d      	beq.n	80046c8 <UART_SetConfig+0x210>
 80046ac:	dc15      	bgt.n	80046da <UART_SetConfig+0x222>
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d002      	beq.n	80046b8 <UART_SetConfig+0x200>
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d005      	beq.n	80046c2 <UART_SetConfig+0x20a>
 80046b6:	e010      	b.n	80046da <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046b8:	f7fe fc3c 	bl	8002f34 <HAL_RCC_GetPCLK1Freq>
 80046bc:	0003      	movs	r3, r0
 80046be:	617b      	str	r3, [r7, #20]
        break;
 80046c0:	e012      	b.n	80046e8 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046c2:	4b30      	ldr	r3, [pc, #192]	@ (8004784 <UART_SetConfig+0x2cc>)
 80046c4:	617b      	str	r3, [r7, #20]
        break;
 80046c6:	e00f      	b.n	80046e8 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046c8:	f7fe fba8 	bl	8002e1c <HAL_RCC_GetSysClockFreq>
 80046cc:	0003      	movs	r3, r0
 80046ce:	617b      	str	r3, [r7, #20]
        break;
 80046d0:	e00a      	b.n	80046e8 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046d2:	2380      	movs	r3, #128	@ 0x80
 80046d4:	021b      	lsls	r3, r3, #8
 80046d6:	617b      	str	r3, [r7, #20]
        break;
 80046d8:	e006      	b.n	80046e8 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 80046da:	2300      	movs	r3, #0
 80046dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80046de:	231a      	movs	r3, #26
 80046e0:	18fb      	adds	r3, r7, r3
 80046e2:	2201      	movs	r2, #1
 80046e4:	701a      	strb	r2, [r3, #0]
        break;
 80046e6:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d028      	beq.n	8004740 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80046f2:	4b25      	ldr	r3, [pc, #148]	@ (8004788 <UART_SetConfig+0x2d0>)
 80046f4:	0052      	lsls	r2, r2, #1
 80046f6:	5ad3      	ldrh	r3, [r2, r3]
 80046f8:	0019      	movs	r1, r3
 80046fa:	6978      	ldr	r0, [r7, #20]
 80046fc:	f7fb fd0a 	bl	8000114 <__udivsi3>
 8004700:	0003      	movs	r3, r0
 8004702:	001a      	movs	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	085b      	lsrs	r3, r3, #1
 800470a:	18d2      	adds	r2, r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	0019      	movs	r1, r3
 8004712:	0010      	movs	r0, r2
 8004714:	f7fb fcfe 	bl	8000114 <__udivsi3>
 8004718:	0003      	movs	r3, r0
 800471a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	2b0f      	cmp	r3, #15
 8004720:	d90a      	bls.n	8004738 <UART_SetConfig+0x280>
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	2380      	movs	r3, #128	@ 0x80
 8004726:	025b      	lsls	r3, r3, #9
 8004728:	429a      	cmp	r2, r3
 800472a:	d205      	bcs.n	8004738 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	b29a      	uxth	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	60da      	str	r2, [r3, #12]
 8004736:	e003      	b.n	8004740 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8004738:	231a      	movs	r3, #26
 800473a:	18fb      	adds	r3, r7, r3
 800473c:	2201      	movs	r2, #1
 800473e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	226a      	movs	r2, #106	@ 0x6a
 8004744:	2101      	movs	r1, #1
 8004746:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2268      	movs	r2, #104	@ 0x68
 800474c:	2101      	movs	r1, #1
 800474e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800475c:	231a      	movs	r3, #26
 800475e:	18fb      	adds	r3, r7, r3
 8004760:	781b      	ldrb	r3, [r3, #0]
}
 8004762:	0018      	movs	r0, r3
 8004764:	46bd      	mov	sp, r7
 8004766:	b008      	add	sp, #32
 8004768:	bd80      	pop	{r7, pc}
 800476a:	46c0      	nop			@ (mov r8, r8)
 800476c:	cfff69f3 	.word	0xcfff69f3
 8004770:	ffffcfff 	.word	0xffffcfff
 8004774:	11fff4ff 	.word	0x11fff4ff
 8004778:	40013800 	.word	0x40013800
 800477c:	40021000 	.word	0x40021000
 8004780:	40004400 	.word	0x40004400
 8004784:	00f42400 	.word	0x00f42400
 8004788:	08005858 	.word	0x08005858

0800478c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004798:	2208      	movs	r2, #8
 800479a:	4013      	ands	r3, r2
 800479c:	d00b      	beq.n	80047b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	4a4a      	ldr	r2, [pc, #296]	@ (80048d0 <UART_AdvFeatureConfig+0x144>)
 80047a6:	4013      	ands	r3, r2
 80047a8:	0019      	movs	r1, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	430a      	orrs	r2, r1
 80047b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ba:	2201      	movs	r2, #1
 80047bc:	4013      	ands	r3, r2
 80047be:	d00b      	beq.n	80047d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	4a43      	ldr	r2, [pc, #268]	@ (80048d4 <UART_AdvFeatureConfig+0x148>)
 80047c8:	4013      	ands	r3, r2
 80047ca:	0019      	movs	r1, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	430a      	orrs	r2, r1
 80047d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047dc:	2202      	movs	r2, #2
 80047de:	4013      	ands	r3, r2
 80047e0:	d00b      	beq.n	80047fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	4a3b      	ldr	r2, [pc, #236]	@ (80048d8 <UART_AdvFeatureConfig+0x14c>)
 80047ea:	4013      	ands	r3, r2
 80047ec:	0019      	movs	r1, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047fe:	2204      	movs	r2, #4
 8004800:	4013      	ands	r3, r2
 8004802:	d00b      	beq.n	800481c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	4a34      	ldr	r2, [pc, #208]	@ (80048dc <UART_AdvFeatureConfig+0x150>)
 800480c:	4013      	ands	r3, r2
 800480e:	0019      	movs	r1, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	430a      	orrs	r2, r1
 800481a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004820:	2210      	movs	r2, #16
 8004822:	4013      	ands	r3, r2
 8004824:	d00b      	beq.n	800483e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	4a2c      	ldr	r2, [pc, #176]	@ (80048e0 <UART_AdvFeatureConfig+0x154>)
 800482e:	4013      	ands	r3, r2
 8004830:	0019      	movs	r1, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	430a      	orrs	r2, r1
 800483c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004842:	2220      	movs	r2, #32
 8004844:	4013      	ands	r3, r2
 8004846:	d00b      	beq.n	8004860 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	4a25      	ldr	r2, [pc, #148]	@ (80048e4 <UART_AdvFeatureConfig+0x158>)
 8004850:	4013      	ands	r3, r2
 8004852:	0019      	movs	r1, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	430a      	orrs	r2, r1
 800485e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004864:	2240      	movs	r2, #64	@ 0x40
 8004866:	4013      	ands	r3, r2
 8004868:	d01d      	beq.n	80048a6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	4a1d      	ldr	r2, [pc, #116]	@ (80048e8 <UART_AdvFeatureConfig+0x15c>)
 8004872:	4013      	ands	r3, r2
 8004874:	0019      	movs	r1, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	430a      	orrs	r2, r1
 8004880:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004886:	2380      	movs	r3, #128	@ 0x80
 8004888:	035b      	lsls	r3, r3, #13
 800488a:	429a      	cmp	r2, r3
 800488c:	d10b      	bne.n	80048a6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	4a15      	ldr	r2, [pc, #84]	@ (80048ec <UART_AdvFeatureConfig+0x160>)
 8004896:	4013      	ands	r3, r2
 8004898:	0019      	movs	r1, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	430a      	orrs	r2, r1
 80048a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048aa:	2280      	movs	r2, #128	@ 0x80
 80048ac:	4013      	ands	r3, r2
 80048ae:	d00b      	beq.n	80048c8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	4a0e      	ldr	r2, [pc, #56]	@ (80048f0 <UART_AdvFeatureConfig+0x164>)
 80048b8:	4013      	ands	r3, r2
 80048ba:	0019      	movs	r1, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	430a      	orrs	r2, r1
 80048c6:	605a      	str	r2, [r3, #4]
  }
}
 80048c8:	46c0      	nop			@ (mov r8, r8)
 80048ca:	46bd      	mov	sp, r7
 80048cc:	b002      	add	sp, #8
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	ffff7fff 	.word	0xffff7fff
 80048d4:	fffdffff 	.word	0xfffdffff
 80048d8:	fffeffff 	.word	0xfffeffff
 80048dc:	fffbffff 	.word	0xfffbffff
 80048e0:	ffffefff 	.word	0xffffefff
 80048e4:	ffffdfff 	.word	0xffffdfff
 80048e8:	ffefffff 	.word	0xffefffff
 80048ec:	ff9fffff 	.word	0xff9fffff
 80048f0:	fff7ffff 	.word	0xfff7ffff

080048f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b092      	sub	sp, #72	@ 0x48
 80048f8:	af02      	add	r7, sp, #8
 80048fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2290      	movs	r2, #144	@ 0x90
 8004900:	2100      	movs	r1, #0
 8004902:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004904:	f7fc fc5e 	bl	80011c4 <HAL_GetTick>
 8004908:	0003      	movs	r3, r0
 800490a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2208      	movs	r2, #8
 8004914:	4013      	ands	r3, r2
 8004916:	2b08      	cmp	r3, #8
 8004918:	d12d      	bne.n	8004976 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800491a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800491c:	2280      	movs	r2, #128	@ 0x80
 800491e:	0391      	lsls	r1, r2, #14
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	4a47      	ldr	r2, [pc, #284]	@ (8004a40 <UART_CheckIdleState+0x14c>)
 8004924:	9200      	str	r2, [sp, #0]
 8004926:	2200      	movs	r2, #0
 8004928:	f000 f88e 	bl	8004a48 <UART_WaitOnFlagUntilTimeout>
 800492c:	1e03      	subs	r3, r0, #0
 800492e:	d022      	beq.n	8004976 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004930:	f3ef 8310 	mrs	r3, PRIMASK
 8004934:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004938:	63bb      	str	r3, [r7, #56]	@ 0x38
 800493a:	2301      	movs	r3, #1
 800493c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800493e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004940:	f383 8810 	msr	PRIMASK, r3
}
 8004944:	46c0      	nop			@ (mov r8, r8)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2180      	movs	r1, #128	@ 0x80
 8004952:	438a      	bics	r2, r1
 8004954:	601a      	str	r2, [r3, #0]
 8004956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004958:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800495a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800495c:	f383 8810 	msr	PRIMASK, r3
}
 8004960:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2288      	movs	r2, #136	@ 0x88
 8004966:	2120      	movs	r1, #32
 8004968:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2284      	movs	r2, #132	@ 0x84
 800496e:	2100      	movs	r1, #0
 8004970:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e060      	b.n	8004a38 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2204      	movs	r2, #4
 800497e:	4013      	ands	r3, r2
 8004980:	2b04      	cmp	r3, #4
 8004982:	d146      	bne.n	8004a12 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004984:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004986:	2280      	movs	r2, #128	@ 0x80
 8004988:	03d1      	lsls	r1, r2, #15
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	4a2c      	ldr	r2, [pc, #176]	@ (8004a40 <UART_CheckIdleState+0x14c>)
 800498e:	9200      	str	r2, [sp, #0]
 8004990:	2200      	movs	r2, #0
 8004992:	f000 f859 	bl	8004a48 <UART_WaitOnFlagUntilTimeout>
 8004996:	1e03      	subs	r3, r0, #0
 8004998:	d03b      	beq.n	8004a12 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800499a:	f3ef 8310 	mrs	r3, PRIMASK
 800499e:	60fb      	str	r3, [r7, #12]
  return(result);
 80049a0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80049a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80049a4:	2301      	movs	r3, #1
 80049a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	f383 8810 	msr	PRIMASK, r3
}
 80049ae:	46c0      	nop			@ (mov r8, r8)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4922      	ldr	r1, [pc, #136]	@ (8004a44 <UART_CheckIdleState+0x150>)
 80049bc:	400a      	ands	r2, r1
 80049be:	601a      	str	r2, [r3, #0]
 80049c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	f383 8810 	msr	PRIMASK, r3
}
 80049ca:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049cc:	f3ef 8310 	mrs	r3, PRIMASK
 80049d0:	61bb      	str	r3, [r7, #24]
  return(result);
 80049d2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80049d6:	2301      	movs	r3, #1
 80049d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	f383 8810 	msr	PRIMASK, r3
}
 80049e0:	46c0      	nop			@ (mov r8, r8)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	689a      	ldr	r2, [r3, #8]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2101      	movs	r1, #1
 80049ee:	438a      	bics	r2, r1
 80049f0:	609a      	str	r2, [r3, #8]
 80049f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049f6:	6a3b      	ldr	r3, [r7, #32]
 80049f8:	f383 8810 	msr	PRIMASK, r3
}
 80049fc:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	228c      	movs	r2, #140	@ 0x8c
 8004a02:	2120      	movs	r1, #32
 8004a04:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2284      	movs	r2, #132	@ 0x84
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e012      	b.n	8004a38 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2288      	movs	r2, #136	@ 0x88
 8004a16:	2120      	movs	r1, #32
 8004a18:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	228c      	movs	r2, #140	@ 0x8c
 8004a1e:	2120      	movs	r1, #32
 8004a20:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2284      	movs	r2, #132	@ 0x84
 8004a32:	2100      	movs	r1, #0
 8004a34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	0018      	movs	r0, r3
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	b010      	add	sp, #64	@ 0x40
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	01ffffff 	.word	0x01ffffff
 8004a44:	fffffedf 	.word	0xfffffedf

08004a48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	603b      	str	r3, [r7, #0]
 8004a54:	1dfb      	adds	r3, r7, #7
 8004a56:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a58:	e051      	b.n	8004afe <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	d04e      	beq.n	8004afe <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a60:	f7fc fbb0 	bl	80011c4 <HAL_GetTick>
 8004a64:	0002      	movs	r2, r0
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	69ba      	ldr	r2, [r7, #24]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d302      	bcc.n	8004a76 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d101      	bne.n	8004a7a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e051      	b.n	8004b1e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2204      	movs	r2, #4
 8004a82:	4013      	ands	r3, r2
 8004a84:	d03b      	beq.n	8004afe <UART_WaitOnFlagUntilTimeout+0xb6>
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	2b80      	cmp	r3, #128	@ 0x80
 8004a8a:	d038      	beq.n	8004afe <UART_WaitOnFlagUntilTimeout+0xb6>
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	2b40      	cmp	r3, #64	@ 0x40
 8004a90:	d035      	beq.n	8004afe <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	69db      	ldr	r3, [r3, #28]
 8004a98:	2208      	movs	r2, #8
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	2b08      	cmp	r3, #8
 8004a9e:	d111      	bne.n	8004ac4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2208      	movs	r2, #8
 8004aa6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	0018      	movs	r0, r3
 8004aac:	f000 f83c 	bl	8004b28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2290      	movs	r2, #144	@ 0x90
 8004ab4:	2108      	movs	r1, #8
 8004ab6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2284      	movs	r2, #132	@ 0x84
 8004abc:	2100      	movs	r1, #0
 8004abe:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e02c      	b.n	8004b1e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	69da      	ldr	r2, [r3, #28]
 8004aca:	2380      	movs	r3, #128	@ 0x80
 8004acc:	011b      	lsls	r3, r3, #4
 8004ace:	401a      	ands	r2, r3
 8004ad0:	2380      	movs	r3, #128	@ 0x80
 8004ad2:	011b      	lsls	r3, r3, #4
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d112      	bne.n	8004afe <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2280      	movs	r2, #128	@ 0x80
 8004ade:	0112      	lsls	r2, r2, #4
 8004ae0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	0018      	movs	r0, r3
 8004ae6:	f000 f81f 	bl	8004b28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2290      	movs	r2, #144	@ 0x90
 8004aee:	2120      	movs	r1, #32
 8004af0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2284      	movs	r2, #132	@ 0x84
 8004af6:	2100      	movs	r1, #0
 8004af8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e00f      	b.n	8004b1e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	69db      	ldr	r3, [r3, #28]
 8004b04:	68ba      	ldr	r2, [r7, #8]
 8004b06:	4013      	ands	r3, r2
 8004b08:	68ba      	ldr	r2, [r7, #8]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	425a      	negs	r2, r3
 8004b0e:	4153      	adcs	r3, r2
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	001a      	movs	r2, r3
 8004b14:	1dfb      	adds	r3, r7, #7
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d09e      	beq.n	8004a5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	0018      	movs	r0, r3
 8004b20:	46bd      	mov	sp, r7
 8004b22:	b004      	add	sp, #16
 8004b24:	bd80      	pop	{r7, pc}
	...

08004b28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b08e      	sub	sp, #56	@ 0x38
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b30:	f3ef 8310 	mrs	r3, PRIMASK
 8004b34:	617b      	str	r3, [r7, #20]
  return(result);
 8004b36:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004b38:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	f383 8810 	msr	PRIMASK, r3
}
 8004b44:	46c0      	nop			@ (mov r8, r8)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4926      	ldr	r1, [pc, #152]	@ (8004bec <UART_EndRxTransfer+0xc4>)
 8004b52:	400a      	ands	r2, r1
 8004b54:	601a      	str	r2, [r3, #0]
 8004b56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	f383 8810 	msr	PRIMASK, r3
}
 8004b60:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b62:	f3ef 8310 	mrs	r3, PRIMASK
 8004b66:	623b      	str	r3, [r7, #32]
  return(result);
 8004b68:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004b6a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b72:	f383 8810 	msr	PRIMASK, r3
}
 8004b76:	46c0      	nop			@ (mov r8, r8)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689a      	ldr	r2, [r3, #8]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	491b      	ldr	r1, [pc, #108]	@ (8004bf0 <UART_EndRxTransfer+0xc8>)
 8004b84:	400a      	ands	r2, r1
 8004b86:	609a      	str	r2, [r3, #8]
 8004b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b8e:	f383 8810 	msr	PRIMASK, r3
}
 8004b92:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d118      	bne.n	8004bce <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b9c:	f3ef 8310 	mrs	r3, PRIMASK
 8004ba0:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ba2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f383 8810 	msr	PRIMASK, r3
}
 8004bb0:	46c0      	nop			@ (mov r8, r8)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2110      	movs	r1, #16
 8004bbe:	438a      	bics	r2, r1
 8004bc0:	601a      	str	r2, [r3, #0]
 8004bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bc4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	f383 8810 	msr	PRIMASK, r3
}
 8004bcc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	228c      	movs	r2, #140	@ 0x8c
 8004bd2:	2120      	movs	r1, #32
 8004bd4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004be2:	46c0      	nop			@ (mov r8, r8)
 8004be4:	46bd      	mov	sp, r7
 8004be6:	b00e      	add	sp, #56	@ 0x38
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	46c0      	nop			@ (mov r8, r8)
 8004bec:	fffffedf 	.word	0xfffffedf
 8004bf0:	effffffe 	.word	0xeffffffe

08004bf4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2284      	movs	r2, #132	@ 0x84
 8004c00:	5c9b      	ldrb	r3, [r3, r2]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d101      	bne.n	8004c0a <HAL_UARTEx_DisableFifoMode+0x16>
 8004c06:	2302      	movs	r3, #2
 8004c08:	e027      	b.n	8004c5a <HAL_UARTEx_DisableFifoMode+0x66>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2284      	movs	r2, #132	@ 0x84
 8004c0e:	2101      	movs	r1, #1
 8004c10:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2288      	movs	r2, #136	@ 0x88
 8004c16:	2124      	movs	r1, #36	@ 0x24
 8004c18:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2101      	movs	r1, #1
 8004c2e:	438a      	bics	r2, r1
 8004c30:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	4a0b      	ldr	r2, [pc, #44]	@ (8004c64 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004c36:	4013      	ands	r3, r2
 8004c38:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2288      	movs	r2, #136	@ 0x88
 8004c4c:	2120      	movs	r1, #32
 8004c4e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2284      	movs	r2, #132	@ 0x84
 8004c54:	2100      	movs	r1, #0
 8004c56:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	0018      	movs	r0, r3
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	b004      	add	sp, #16
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	46c0      	nop			@ (mov r8, r8)
 8004c64:	dfffffff 	.word	0xdfffffff

08004c68 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2284      	movs	r2, #132	@ 0x84
 8004c76:	5c9b      	ldrb	r3, [r3, r2]
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d101      	bne.n	8004c80 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	e02e      	b.n	8004cde <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2284      	movs	r2, #132	@ 0x84
 8004c84:	2101      	movs	r1, #1
 8004c86:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2288      	movs	r2, #136	@ 0x88
 8004c8c:	2124      	movs	r1, #36	@ 0x24
 8004c8e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2101      	movs	r1, #1
 8004ca4:	438a      	bics	r2, r1
 8004ca6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	00db      	lsls	r3, r3, #3
 8004cb0:	08d9      	lsrs	r1, r3, #3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	683a      	ldr	r2, [r7, #0]
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	0018      	movs	r0, r3
 8004cc0:	f000 f854 	bl	8004d6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2288      	movs	r2, #136	@ 0x88
 8004cd0:	2120      	movs	r1, #32
 8004cd2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2284      	movs	r2, #132	@ 0x84
 8004cd8:	2100      	movs	r1, #0
 8004cda:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	0018      	movs	r0, r3
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	b004      	add	sp, #16
 8004ce4:	bd80      	pop	{r7, pc}
	...

08004ce8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2284      	movs	r2, #132	@ 0x84
 8004cf6:	5c9b      	ldrb	r3, [r3, r2]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d101      	bne.n	8004d00 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	e02f      	b.n	8004d60 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2284      	movs	r2, #132	@ 0x84
 8004d04:	2101      	movs	r1, #1
 8004d06:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2288      	movs	r2, #136	@ 0x88
 8004d0c:	2124      	movs	r1, #36	@ 0x24
 8004d0e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2101      	movs	r1, #1
 8004d24:	438a      	bics	r2, r1
 8004d26:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	4a0e      	ldr	r2, [pc, #56]	@ (8004d68 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004d30:	4013      	ands	r3, r2
 8004d32:	0019      	movs	r1, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	683a      	ldr	r2, [r7, #0]
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	0018      	movs	r0, r3
 8004d42:	f000 f813 	bl	8004d6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2288      	movs	r2, #136	@ 0x88
 8004d52:	2120      	movs	r1, #32
 8004d54:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2284      	movs	r2, #132	@ 0x84
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	0018      	movs	r0, r3
 8004d62:	46bd      	mov	sp, r7
 8004d64:	b004      	add	sp, #16
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	f1ffffff 	.word	0xf1ffffff

08004d6c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d108      	bne.n	8004d8e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	226a      	movs	r2, #106	@ 0x6a
 8004d80:	2101      	movs	r1, #1
 8004d82:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2268      	movs	r2, #104	@ 0x68
 8004d88:	2101      	movs	r1, #1
 8004d8a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004d8c:	e043      	b.n	8004e16 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004d8e:	260f      	movs	r6, #15
 8004d90:	19bb      	adds	r3, r7, r6
 8004d92:	2208      	movs	r2, #8
 8004d94:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004d96:	200e      	movs	r0, #14
 8004d98:	183b      	adds	r3, r7, r0
 8004d9a:	2208      	movs	r2, #8
 8004d9c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	0e5b      	lsrs	r3, r3, #25
 8004da6:	b2da      	uxtb	r2, r3
 8004da8:	240d      	movs	r4, #13
 8004daa:	193b      	adds	r3, r7, r4
 8004dac:	2107      	movs	r1, #7
 8004dae:	400a      	ands	r2, r1
 8004db0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	0f5b      	lsrs	r3, r3, #29
 8004dba:	b2da      	uxtb	r2, r3
 8004dbc:	250c      	movs	r5, #12
 8004dbe:	197b      	adds	r3, r7, r5
 8004dc0:	2107      	movs	r1, #7
 8004dc2:	400a      	ands	r2, r1
 8004dc4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004dc6:	183b      	adds	r3, r7, r0
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	197a      	adds	r2, r7, r5
 8004dcc:	7812      	ldrb	r2, [r2, #0]
 8004dce:	4914      	ldr	r1, [pc, #80]	@ (8004e20 <UARTEx_SetNbDataToProcess+0xb4>)
 8004dd0:	5c8a      	ldrb	r2, [r1, r2]
 8004dd2:	435a      	muls	r2, r3
 8004dd4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004dd6:	197b      	adds	r3, r7, r5
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	4a12      	ldr	r2, [pc, #72]	@ (8004e24 <UARTEx_SetNbDataToProcess+0xb8>)
 8004ddc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004dde:	0019      	movs	r1, r3
 8004de0:	f7fb fa22 	bl	8000228 <__divsi3>
 8004de4:	0003      	movs	r3, r0
 8004de6:	b299      	uxth	r1, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	226a      	movs	r2, #106	@ 0x6a
 8004dec:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004dee:	19bb      	adds	r3, r7, r6
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	193a      	adds	r2, r7, r4
 8004df4:	7812      	ldrb	r2, [r2, #0]
 8004df6:	490a      	ldr	r1, [pc, #40]	@ (8004e20 <UARTEx_SetNbDataToProcess+0xb4>)
 8004df8:	5c8a      	ldrb	r2, [r1, r2]
 8004dfa:	435a      	muls	r2, r3
 8004dfc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004dfe:	193b      	adds	r3, r7, r4
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	4a08      	ldr	r2, [pc, #32]	@ (8004e24 <UARTEx_SetNbDataToProcess+0xb8>)
 8004e04:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e06:	0019      	movs	r1, r3
 8004e08:	f7fb fa0e 	bl	8000228 <__divsi3>
 8004e0c:	0003      	movs	r3, r0
 8004e0e:	b299      	uxth	r1, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2268      	movs	r2, #104	@ 0x68
 8004e14:	5299      	strh	r1, [r3, r2]
}
 8004e16:	46c0      	nop			@ (mov r8, r8)
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	b005      	add	sp, #20
 8004e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e1e:	46c0      	nop			@ (mov r8, r8)
 8004e20:	08005870 	.word	0x08005870
 8004e24:	08005878 	.word	0x08005878

08004e28 <siprintf>:
 8004e28:	b40e      	push	{r1, r2, r3}
 8004e2a:	b510      	push	{r4, lr}
 8004e2c:	2400      	movs	r4, #0
 8004e2e:	490c      	ldr	r1, [pc, #48]	@ (8004e60 <siprintf+0x38>)
 8004e30:	b09d      	sub	sp, #116	@ 0x74
 8004e32:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004e34:	9002      	str	r0, [sp, #8]
 8004e36:	9006      	str	r0, [sp, #24]
 8004e38:	9107      	str	r1, [sp, #28]
 8004e3a:	9104      	str	r1, [sp, #16]
 8004e3c:	4809      	ldr	r0, [pc, #36]	@ (8004e64 <siprintf+0x3c>)
 8004e3e:	490a      	ldr	r1, [pc, #40]	@ (8004e68 <siprintf+0x40>)
 8004e40:	cb04      	ldmia	r3!, {r2}
 8004e42:	9105      	str	r1, [sp, #20]
 8004e44:	6800      	ldr	r0, [r0, #0]
 8004e46:	a902      	add	r1, sp, #8
 8004e48:	9301      	str	r3, [sp, #4]
 8004e4a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004e4c:	f000 f99e 	bl	800518c <_svfiprintf_r>
 8004e50:	9b02      	ldr	r3, [sp, #8]
 8004e52:	701c      	strb	r4, [r3, #0]
 8004e54:	b01d      	add	sp, #116	@ 0x74
 8004e56:	bc10      	pop	{r4}
 8004e58:	bc08      	pop	{r3}
 8004e5a:	b003      	add	sp, #12
 8004e5c:	4718      	bx	r3
 8004e5e:	46c0      	nop			@ (mov r8, r8)
 8004e60:	7fffffff 	.word	0x7fffffff
 8004e64:	2000000c 	.word	0x2000000c
 8004e68:	ffff0208 	.word	0xffff0208

08004e6c <memset>:
 8004e6c:	0003      	movs	r3, r0
 8004e6e:	1882      	adds	r2, r0, r2
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d100      	bne.n	8004e76 <memset+0xa>
 8004e74:	4770      	bx	lr
 8004e76:	7019      	strb	r1, [r3, #0]
 8004e78:	3301      	adds	r3, #1
 8004e7a:	e7f9      	b.n	8004e70 <memset+0x4>

08004e7c <__errno>:
 8004e7c:	4b01      	ldr	r3, [pc, #4]	@ (8004e84 <__errno+0x8>)
 8004e7e:	6818      	ldr	r0, [r3, #0]
 8004e80:	4770      	bx	lr
 8004e82:	46c0      	nop			@ (mov r8, r8)
 8004e84:	2000000c 	.word	0x2000000c

08004e88 <__libc_init_array>:
 8004e88:	b570      	push	{r4, r5, r6, lr}
 8004e8a:	2600      	movs	r6, #0
 8004e8c:	4c0c      	ldr	r4, [pc, #48]	@ (8004ec0 <__libc_init_array+0x38>)
 8004e8e:	4d0d      	ldr	r5, [pc, #52]	@ (8004ec4 <__libc_init_array+0x3c>)
 8004e90:	1b64      	subs	r4, r4, r5
 8004e92:	10a4      	asrs	r4, r4, #2
 8004e94:	42a6      	cmp	r6, r4
 8004e96:	d109      	bne.n	8004eac <__libc_init_array+0x24>
 8004e98:	2600      	movs	r6, #0
 8004e9a:	f000 fc61 	bl	8005760 <_init>
 8004e9e:	4c0a      	ldr	r4, [pc, #40]	@ (8004ec8 <__libc_init_array+0x40>)
 8004ea0:	4d0a      	ldr	r5, [pc, #40]	@ (8004ecc <__libc_init_array+0x44>)
 8004ea2:	1b64      	subs	r4, r4, r5
 8004ea4:	10a4      	asrs	r4, r4, #2
 8004ea6:	42a6      	cmp	r6, r4
 8004ea8:	d105      	bne.n	8004eb6 <__libc_init_array+0x2e>
 8004eaa:	bd70      	pop	{r4, r5, r6, pc}
 8004eac:	00b3      	lsls	r3, r6, #2
 8004eae:	58eb      	ldr	r3, [r5, r3]
 8004eb0:	4798      	blx	r3
 8004eb2:	3601      	adds	r6, #1
 8004eb4:	e7ee      	b.n	8004e94 <__libc_init_array+0xc>
 8004eb6:	00b3      	lsls	r3, r6, #2
 8004eb8:	58eb      	ldr	r3, [r5, r3]
 8004eba:	4798      	blx	r3
 8004ebc:	3601      	adds	r6, #1
 8004ebe:	e7f2      	b.n	8004ea6 <__libc_init_array+0x1e>
 8004ec0:	080058b4 	.word	0x080058b4
 8004ec4:	080058b4 	.word	0x080058b4
 8004ec8:	080058b8 	.word	0x080058b8
 8004ecc:	080058b4 	.word	0x080058b4

08004ed0 <__retarget_lock_acquire_recursive>:
 8004ed0:	4770      	bx	lr

08004ed2 <__retarget_lock_release_recursive>:
 8004ed2:	4770      	bx	lr

08004ed4 <_free_r>:
 8004ed4:	b570      	push	{r4, r5, r6, lr}
 8004ed6:	0005      	movs	r5, r0
 8004ed8:	1e0c      	subs	r4, r1, #0
 8004eda:	d010      	beq.n	8004efe <_free_r+0x2a>
 8004edc:	3c04      	subs	r4, #4
 8004ede:	6823      	ldr	r3, [r4, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	da00      	bge.n	8004ee6 <_free_r+0x12>
 8004ee4:	18e4      	adds	r4, r4, r3
 8004ee6:	0028      	movs	r0, r5
 8004ee8:	f000 f8e0 	bl	80050ac <__malloc_lock>
 8004eec:	4a1d      	ldr	r2, [pc, #116]	@ (8004f64 <_free_r+0x90>)
 8004eee:	6813      	ldr	r3, [r2, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d105      	bne.n	8004f00 <_free_r+0x2c>
 8004ef4:	6063      	str	r3, [r4, #4]
 8004ef6:	6014      	str	r4, [r2, #0]
 8004ef8:	0028      	movs	r0, r5
 8004efa:	f000 f8df 	bl	80050bc <__malloc_unlock>
 8004efe:	bd70      	pop	{r4, r5, r6, pc}
 8004f00:	42a3      	cmp	r3, r4
 8004f02:	d908      	bls.n	8004f16 <_free_r+0x42>
 8004f04:	6820      	ldr	r0, [r4, #0]
 8004f06:	1821      	adds	r1, r4, r0
 8004f08:	428b      	cmp	r3, r1
 8004f0a:	d1f3      	bne.n	8004ef4 <_free_r+0x20>
 8004f0c:	6819      	ldr	r1, [r3, #0]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	1809      	adds	r1, r1, r0
 8004f12:	6021      	str	r1, [r4, #0]
 8004f14:	e7ee      	b.n	8004ef4 <_free_r+0x20>
 8004f16:	001a      	movs	r2, r3
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d001      	beq.n	8004f22 <_free_r+0x4e>
 8004f1e:	42a3      	cmp	r3, r4
 8004f20:	d9f9      	bls.n	8004f16 <_free_r+0x42>
 8004f22:	6811      	ldr	r1, [r2, #0]
 8004f24:	1850      	adds	r0, r2, r1
 8004f26:	42a0      	cmp	r0, r4
 8004f28:	d10b      	bne.n	8004f42 <_free_r+0x6e>
 8004f2a:	6820      	ldr	r0, [r4, #0]
 8004f2c:	1809      	adds	r1, r1, r0
 8004f2e:	1850      	adds	r0, r2, r1
 8004f30:	6011      	str	r1, [r2, #0]
 8004f32:	4283      	cmp	r3, r0
 8004f34:	d1e0      	bne.n	8004ef8 <_free_r+0x24>
 8004f36:	6818      	ldr	r0, [r3, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	1841      	adds	r1, r0, r1
 8004f3c:	6011      	str	r1, [r2, #0]
 8004f3e:	6053      	str	r3, [r2, #4]
 8004f40:	e7da      	b.n	8004ef8 <_free_r+0x24>
 8004f42:	42a0      	cmp	r0, r4
 8004f44:	d902      	bls.n	8004f4c <_free_r+0x78>
 8004f46:	230c      	movs	r3, #12
 8004f48:	602b      	str	r3, [r5, #0]
 8004f4a:	e7d5      	b.n	8004ef8 <_free_r+0x24>
 8004f4c:	6820      	ldr	r0, [r4, #0]
 8004f4e:	1821      	adds	r1, r4, r0
 8004f50:	428b      	cmp	r3, r1
 8004f52:	d103      	bne.n	8004f5c <_free_r+0x88>
 8004f54:	6819      	ldr	r1, [r3, #0]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	1809      	adds	r1, r1, r0
 8004f5a:	6021      	str	r1, [r4, #0]
 8004f5c:	6063      	str	r3, [r4, #4]
 8004f5e:	6054      	str	r4, [r2, #4]
 8004f60:	e7ca      	b.n	8004ef8 <_free_r+0x24>
 8004f62:	46c0      	nop			@ (mov r8, r8)
 8004f64:	200003a8 	.word	0x200003a8

08004f68 <sbrk_aligned>:
 8004f68:	b570      	push	{r4, r5, r6, lr}
 8004f6a:	4e0f      	ldr	r6, [pc, #60]	@ (8004fa8 <sbrk_aligned+0x40>)
 8004f6c:	000d      	movs	r5, r1
 8004f6e:	6831      	ldr	r1, [r6, #0]
 8004f70:	0004      	movs	r4, r0
 8004f72:	2900      	cmp	r1, #0
 8004f74:	d102      	bne.n	8004f7c <sbrk_aligned+0x14>
 8004f76:	f000 fb95 	bl	80056a4 <_sbrk_r>
 8004f7a:	6030      	str	r0, [r6, #0]
 8004f7c:	0029      	movs	r1, r5
 8004f7e:	0020      	movs	r0, r4
 8004f80:	f000 fb90 	bl	80056a4 <_sbrk_r>
 8004f84:	1c43      	adds	r3, r0, #1
 8004f86:	d103      	bne.n	8004f90 <sbrk_aligned+0x28>
 8004f88:	2501      	movs	r5, #1
 8004f8a:	426d      	negs	r5, r5
 8004f8c:	0028      	movs	r0, r5
 8004f8e:	bd70      	pop	{r4, r5, r6, pc}
 8004f90:	2303      	movs	r3, #3
 8004f92:	1cc5      	adds	r5, r0, #3
 8004f94:	439d      	bics	r5, r3
 8004f96:	42a8      	cmp	r0, r5
 8004f98:	d0f8      	beq.n	8004f8c <sbrk_aligned+0x24>
 8004f9a:	1a29      	subs	r1, r5, r0
 8004f9c:	0020      	movs	r0, r4
 8004f9e:	f000 fb81 	bl	80056a4 <_sbrk_r>
 8004fa2:	3001      	adds	r0, #1
 8004fa4:	d1f2      	bne.n	8004f8c <sbrk_aligned+0x24>
 8004fa6:	e7ef      	b.n	8004f88 <sbrk_aligned+0x20>
 8004fa8:	200003a4 	.word	0x200003a4

08004fac <_malloc_r>:
 8004fac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fae:	2203      	movs	r2, #3
 8004fb0:	1ccb      	adds	r3, r1, #3
 8004fb2:	4393      	bics	r3, r2
 8004fb4:	3308      	adds	r3, #8
 8004fb6:	0005      	movs	r5, r0
 8004fb8:	001f      	movs	r7, r3
 8004fba:	2b0c      	cmp	r3, #12
 8004fbc:	d234      	bcs.n	8005028 <_malloc_r+0x7c>
 8004fbe:	270c      	movs	r7, #12
 8004fc0:	42b9      	cmp	r1, r7
 8004fc2:	d833      	bhi.n	800502c <_malloc_r+0x80>
 8004fc4:	0028      	movs	r0, r5
 8004fc6:	f000 f871 	bl	80050ac <__malloc_lock>
 8004fca:	4e37      	ldr	r6, [pc, #220]	@ (80050a8 <_malloc_r+0xfc>)
 8004fcc:	6833      	ldr	r3, [r6, #0]
 8004fce:	001c      	movs	r4, r3
 8004fd0:	2c00      	cmp	r4, #0
 8004fd2:	d12f      	bne.n	8005034 <_malloc_r+0x88>
 8004fd4:	0039      	movs	r1, r7
 8004fd6:	0028      	movs	r0, r5
 8004fd8:	f7ff ffc6 	bl	8004f68 <sbrk_aligned>
 8004fdc:	0004      	movs	r4, r0
 8004fde:	1c43      	adds	r3, r0, #1
 8004fe0:	d15f      	bne.n	80050a2 <_malloc_r+0xf6>
 8004fe2:	6834      	ldr	r4, [r6, #0]
 8004fe4:	9400      	str	r4, [sp, #0]
 8004fe6:	9b00      	ldr	r3, [sp, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d14a      	bne.n	8005082 <_malloc_r+0xd6>
 8004fec:	2c00      	cmp	r4, #0
 8004fee:	d052      	beq.n	8005096 <_malloc_r+0xea>
 8004ff0:	6823      	ldr	r3, [r4, #0]
 8004ff2:	0028      	movs	r0, r5
 8004ff4:	18e3      	adds	r3, r4, r3
 8004ff6:	9900      	ldr	r1, [sp, #0]
 8004ff8:	9301      	str	r3, [sp, #4]
 8004ffa:	f000 fb53 	bl	80056a4 <_sbrk_r>
 8004ffe:	9b01      	ldr	r3, [sp, #4]
 8005000:	4283      	cmp	r3, r0
 8005002:	d148      	bne.n	8005096 <_malloc_r+0xea>
 8005004:	6823      	ldr	r3, [r4, #0]
 8005006:	0028      	movs	r0, r5
 8005008:	1aff      	subs	r7, r7, r3
 800500a:	0039      	movs	r1, r7
 800500c:	f7ff ffac 	bl	8004f68 <sbrk_aligned>
 8005010:	3001      	adds	r0, #1
 8005012:	d040      	beq.n	8005096 <_malloc_r+0xea>
 8005014:	6823      	ldr	r3, [r4, #0]
 8005016:	19db      	adds	r3, r3, r7
 8005018:	6023      	str	r3, [r4, #0]
 800501a:	6833      	ldr	r3, [r6, #0]
 800501c:	685a      	ldr	r2, [r3, #4]
 800501e:	2a00      	cmp	r2, #0
 8005020:	d133      	bne.n	800508a <_malloc_r+0xde>
 8005022:	9b00      	ldr	r3, [sp, #0]
 8005024:	6033      	str	r3, [r6, #0]
 8005026:	e019      	b.n	800505c <_malloc_r+0xb0>
 8005028:	2b00      	cmp	r3, #0
 800502a:	dac9      	bge.n	8004fc0 <_malloc_r+0x14>
 800502c:	230c      	movs	r3, #12
 800502e:	602b      	str	r3, [r5, #0]
 8005030:	2000      	movs	r0, #0
 8005032:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005034:	6821      	ldr	r1, [r4, #0]
 8005036:	1bc9      	subs	r1, r1, r7
 8005038:	d420      	bmi.n	800507c <_malloc_r+0xd0>
 800503a:	290b      	cmp	r1, #11
 800503c:	d90a      	bls.n	8005054 <_malloc_r+0xa8>
 800503e:	19e2      	adds	r2, r4, r7
 8005040:	6027      	str	r7, [r4, #0]
 8005042:	42a3      	cmp	r3, r4
 8005044:	d104      	bne.n	8005050 <_malloc_r+0xa4>
 8005046:	6032      	str	r2, [r6, #0]
 8005048:	6863      	ldr	r3, [r4, #4]
 800504a:	6011      	str	r1, [r2, #0]
 800504c:	6053      	str	r3, [r2, #4]
 800504e:	e005      	b.n	800505c <_malloc_r+0xb0>
 8005050:	605a      	str	r2, [r3, #4]
 8005052:	e7f9      	b.n	8005048 <_malloc_r+0x9c>
 8005054:	6862      	ldr	r2, [r4, #4]
 8005056:	42a3      	cmp	r3, r4
 8005058:	d10e      	bne.n	8005078 <_malloc_r+0xcc>
 800505a:	6032      	str	r2, [r6, #0]
 800505c:	0028      	movs	r0, r5
 800505e:	f000 f82d 	bl	80050bc <__malloc_unlock>
 8005062:	0020      	movs	r0, r4
 8005064:	2207      	movs	r2, #7
 8005066:	300b      	adds	r0, #11
 8005068:	1d23      	adds	r3, r4, #4
 800506a:	4390      	bics	r0, r2
 800506c:	1ac2      	subs	r2, r0, r3
 800506e:	4298      	cmp	r0, r3
 8005070:	d0df      	beq.n	8005032 <_malloc_r+0x86>
 8005072:	1a1b      	subs	r3, r3, r0
 8005074:	50a3      	str	r3, [r4, r2]
 8005076:	e7dc      	b.n	8005032 <_malloc_r+0x86>
 8005078:	605a      	str	r2, [r3, #4]
 800507a:	e7ef      	b.n	800505c <_malloc_r+0xb0>
 800507c:	0023      	movs	r3, r4
 800507e:	6864      	ldr	r4, [r4, #4]
 8005080:	e7a6      	b.n	8004fd0 <_malloc_r+0x24>
 8005082:	9c00      	ldr	r4, [sp, #0]
 8005084:	6863      	ldr	r3, [r4, #4]
 8005086:	9300      	str	r3, [sp, #0]
 8005088:	e7ad      	b.n	8004fe6 <_malloc_r+0x3a>
 800508a:	001a      	movs	r2, r3
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	42a3      	cmp	r3, r4
 8005090:	d1fb      	bne.n	800508a <_malloc_r+0xde>
 8005092:	2300      	movs	r3, #0
 8005094:	e7da      	b.n	800504c <_malloc_r+0xa0>
 8005096:	230c      	movs	r3, #12
 8005098:	0028      	movs	r0, r5
 800509a:	602b      	str	r3, [r5, #0]
 800509c:	f000 f80e 	bl	80050bc <__malloc_unlock>
 80050a0:	e7c6      	b.n	8005030 <_malloc_r+0x84>
 80050a2:	6007      	str	r7, [r0, #0]
 80050a4:	e7da      	b.n	800505c <_malloc_r+0xb0>
 80050a6:	46c0      	nop			@ (mov r8, r8)
 80050a8:	200003a8 	.word	0x200003a8

080050ac <__malloc_lock>:
 80050ac:	b510      	push	{r4, lr}
 80050ae:	4802      	ldr	r0, [pc, #8]	@ (80050b8 <__malloc_lock+0xc>)
 80050b0:	f7ff ff0e 	bl	8004ed0 <__retarget_lock_acquire_recursive>
 80050b4:	bd10      	pop	{r4, pc}
 80050b6:	46c0      	nop			@ (mov r8, r8)
 80050b8:	200003a0 	.word	0x200003a0

080050bc <__malloc_unlock>:
 80050bc:	b510      	push	{r4, lr}
 80050be:	4802      	ldr	r0, [pc, #8]	@ (80050c8 <__malloc_unlock+0xc>)
 80050c0:	f7ff ff07 	bl	8004ed2 <__retarget_lock_release_recursive>
 80050c4:	bd10      	pop	{r4, pc}
 80050c6:	46c0      	nop			@ (mov r8, r8)
 80050c8:	200003a0 	.word	0x200003a0

080050cc <__ssputs_r>:
 80050cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050ce:	688e      	ldr	r6, [r1, #8]
 80050d0:	b085      	sub	sp, #20
 80050d2:	001f      	movs	r7, r3
 80050d4:	000c      	movs	r4, r1
 80050d6:	680b      	ldr	r3, [r1, #0]
 80050d8:	9002      	str	r0, [sp, #8]
 80050da:	9203      	str	r2, [sp, #12]
 80050dc:	42be      	cmp	r6, r7
 80050de:	d830      	bhi.n	8005142 <__ssputs_r+0x76>
 80050e0:	210c      	movs	r1, #12
 80050e2:	5e62      	ldrsh	r2, [r4, r1]
 80050e4:	2190      	movs	r1, #144	@ 0x90
 80050e6:	00c9      	lsls	r1, r1, #3
 80050e8:	420a      	tst	r2, r1
 80050ea:	d028      	beq.n	800513e <__ssputs_r+0x72>
 80050ec:	2003      	movs	r0, #3
 80050ee:	6921      	ldr	r1, [r4, #16]
 80050f0:	1a5b      	subs	r3, r3, r1
 80050f2:	9301      	str	r3, [sp, #4]
 80050f4:	6963      	ldr	r3, [r4, #20]
 80050f6:	4343      	muls	r3, r0
 80050f8:	9801      	ldr	r0, [sp, #4]
 80050fa:	0fdd      	lsrs	r5, r3, #31
 80050fc:	18ed      	adds	r5, r5, r3
 80050fe:	1c7b      	adds	r3, r7, #1
 8005100:	181b      	adds	r3, r3, r0
 8005102:	106d      	asrs	r5, r5, #1
 8005104:	42ab      	cmp	r3, r5
 8005106:	d900      	bls.n	800510a <__ssputs_r+0x3e>
 8005108:	001d      	movs	r5, r3
 800510a:	0552      	lsls	r2, r2, #21
 800510c:	d528      	bpl.n	8005160 <__ssputs_r+0x94>
 800510e:	0029      	movs	r1, r5
 8005110:	9802      	ldr	r0, [sp, #8]
 8005112:	f7ff ff4b 	bl	8004fac <_malloc_r>
 8005116:	1e06      	subs	r6, r0, #0
 8005118:	d02c      	beq.n	8005174 <__ssputs_r+0xa8>
 800511a:	9a01      	ldr	r2, [sp, #4]
 800511c:	6921      	ldr	r1, [r4, #16]
 800511e:	f000 fade 	bl	80056de <memcpy>
 8005122:	89a2      	ldrh	r2, [r4, #12]
 8005124:	4b18      	ldr	r3, [pc, #96]	@ (8005188 <__ssputs_r+0xbc>)
 8005126:	401a      	ands	r2, r3
 8005128:	2380      	movs	r3, #128	@ 0x80
 800512a:	4313      	orrs	r3, r2
 800512c:	81a3      	strh	r3, [r4, #12]
 800512e:	9b01      	ldr	r3, [sp, #4]
 8005130:	6126      	str	r6, [r4, #16]
 8005132:	18f6      	adds	r6, r6, r3
 8005134:	6026      	str	r6, [r4, #0]
 8005136:	003e      	movs	r6, r7
 8005138:	6165      	str	r5, [r4, #20]
 800513a:	1aed      	subs	r5, r5, r3
 800513c:	60a5      	str	r5, [r4, #8]
 800513e:	42be      	cmp	r6, r7
 8005140:	d900      	bls.n	8005144 <__ssputs_r+0x78>
 8005142:	003e      	movs	r6, r7
 8005144:	0032      	movs	r2, r6
 8005146:	9903      	ldr	r1, [sp, #12]
 8005148:	6820      	ldr	r0, [r4, #0]
 800514a:	f000 fa99 	bl	8005680 <memmove>
 800514e:	2000      	movs	r0, #0
 8005150:	68a3      	ldr	r3, [r4, #8]
 8005152:	1b9b      	subs	r3, r3, r6
 8005154:	60a3      	str	r3, [r4, #8]
 8005156:	6823      	ldr	r3, [r4, #0]
 8005158:	199b      	adds	r3, r3, r6
 800515a:	6023      	str	r3, [r4, #0]
 800515c:	b005      	add	sp, #20
 800515e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005160:	002a      	movs	r2, r5
 8005162:	9802      	ldr	r0, [sp, #8]
 8005164:	f000 fac4 	bl	80056f0 <_realloc_r>
 8005168:	1e06      	subs	r6, r0, #0
 800516a:	d1e0      	bne.n	800512e <__ssputs_r+0x62>
 800516c:	6921      	ldr	r1, [r4, #16]
 800516e:	9802      	ldr	r0, [sp, #8]
 8005170:	f7ff feb0 	bl	8004ed4 <_free_r>
 8005174:	230c      	movs	r3, #12
 8005176:	2001      	movs	r0, #1
 8005178:	9a02      	ldr	r2, [sp, #8]
 800517a:	4240      	negs	r0, r0
 800517c:	6013      	str	r3, [r2, #0]
 800517e:	89a2      	ldrh	r2, [r4, #12]
 8005180:	3334      	adds	r3, #52	@ 0x34
 8005182:	4313      	orrs	r3, r2
 8005184:	81a3      	strh	r3, [r4, #12]
 8005186:	e7e9      	b.n	800515c <__ssputs_r+0x90>
 8005188:	fffffb7f 	.word	0xfffffb7f

0800518c <_svfiprintf_r>:
 800518c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800518e:	b0a1      	sub	sp, #132	@ 0x84
 8005190:	9003      	str	r0, [sp, #12]
 8005192:	001d      	movs	r5, r3
 8005194:	898b      	ldrh	r3, [r1, #12]
 8005196:	000f      	movs	r7, r1
 8005198:	0016      	movs	r6, r2
 800519a:	061b      	lsls	r3, r3, #24
 800519c:	d511      	bpl.n	80051c2 <_svfiprintf_r+0x36>
 800519e:	690b      	ldr	r3, [r1, #16]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d10e      	bne.n	80051c2 <_svfiprintf_r+0x36>
 80051a4:	2140      	movs	r1, #64	@ 0x40
 80051a6:	f7ff ff01 	bl	8004fac <_malloc_r>
 80051aa:	6038      	str	r0, [r7, #0]
 80051ac:	6138      	str	r0, [r7, #16]
 80051ae:	2800      	cmp	r0, #0
 80051b0:	d105      	bne.n	80051be <_svfiprintf_r+0x32>
 80051b2:	230c      	movs	r3, #12
 80051b4:	9a03      	ldr	r2, [sp, #12]
 80051b6:	6013      	str	r3, [r2, #0]
 80051b8:	2001      	movs	r0, #1
 80051ba:	4240      	negs	r0, r0
 80051bc:	e0cf      	b.n	800535e <_svfiprintf_r+0x1d2>
 80051be:	2340      	movs	r3, #64	@ 0x40
 80051c0:	617b      	str	r3, [r7, #20]
 80051c2:	2300      	movs	r3, #0
 80051c4:	ac08      	add	r4, sp, #32
 80051c6:	6163      	str	r3, [r4, #20]
 80051c8:	3320      	adds	r3, #32
 80051ca:	7663      	strb	r3, [r4, #25]
 80051cc:	3310      	adds	r3, #16
 80051ce:	76a3      	strb	r3, [r4, #26]
 80051d0:	9507      	str	r5, [sp, #28]
 80051d2:	0035      	movs	r5, r6
 80051d4:	782b      	ldrb	r3, [r5, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d001      	beq.n	80051de <_svfiprintf_r+0x52>
 80051da:	2b25      	cmp	r3, #37	@ 0x25
 80051dc:	d148      	bne.n	8005270 <_svfiprintf_r+0xe4>
 80051de:	1bab      	subs	r3, r5, r6
 80051e0:	9305      	str	r3, [sp, #20]
 80051e2:	42b5      	cmp	r5, r6
 80051e4:	d00b      	beq.n	80051fe <_svfiprintf_r+0x72>
 80051e6:	0032      	movs	r2, r6
 80051e8:	0039      	movs	r1, r7
 80051ea:	9803      	ldr	r0, [sp, #12]
 80051ec:	f7ff ff6e 	bl	80050cc <__ssputs_r>
 80051f0:	3001      	adds	r0, #1
 80051f2:	d100      	bne.n	80051f6 <_svfiprintf_r+0x6a>
 80051f4:	e0ae      	b.n	8005354 <_svfiprintf_r+0x1c8>
 80051f6:	6963      	ldr	r3, [r4, #20]
 80051f8:	9a05      	ldr	r2, [sp, #20]
 80051fa:	189b      	adds	r3, r3, r2
 80051fc:	6163      	str	r3, [r4, #20]
 80051fe:	782b      	ldrb	r3, [r5, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d100      	bne.n	8005206 <_svfiprintf_r+0x7a>
 8005204:	e0a6      	b.n	8005354 <_svfiprintf_r+0x1c8>
 8005206:	2201      	movs	r2, #1
 8005208:	2300      	movs	r3, #0
 800520a:	4252      	negs	r2, r2
 800520c:	6062      	str	r2, [r4, #4]
 800520e:	a904      	add	r1, sp, #16
 8005210:	3254      	adds	r2, #84	@ 0x54
 8005212:	1852      	adds	r2, r2, r1
 8005214:	1c6e      	adds	r6, r5, #1
 8005216:	6023      	str	r3, [r4, #0]
 8005218:	60e3      	str	r3, [r4, #12]
 800521a:	60a3      	str	r3, [r4, #8]
 800521c:	7013      	strb	r3, [r2, #0]
 800521e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005220:	4b54      	ldr	r3, [pc, #336]	@ (8005374 <_svfiprintf_r+0x1e8>)
 8005222:	2205      	movs	r2, #5
 8005224:	0018      	movs	r0, r3
 8005226:	7831      	ldrb	r1, [r6, #0]
 8005228:	9305      	str	r3, [sp, #20]
 800522a:	f000 fa4d 	bl	80056c8 <memchr>
 800522e:	1c75      	adds	r5, r6, #1
 8005230:	2800      	cmp	r0, #0
 8005232:	d11f      	bne.n	8005274 <_svfiprintf_r+0xe8>
 8005234:	6822      	ldr	r2, [r4, #0]
 8005236:	06d3      	lsls	r3, r2, #27
 8005238:	d504      	bpl.n	8005244 <_svfiprintf_r+0xb8>
 800523a:	2353      	movs	r3, #83	@ 0x53
 800523c:	a904      	add	r1, sp, #16
 800523e:	185b      	adds	r3, r3, r1
 8005240:	2120      	movs	r1, #32
 8005242:	7019      	strb	r1, [r3, #0]
 8005244:	0713      	lsls	r3, r2, #28
 8005246:	d504      	bpl.n	8005252 <_svfiprintf_r+0xc6>
 8005248:	2353      	movs	r3, #83	@ 0x53
 800524a:	a904      	add	r1, sp, #16
 800524c:	185b      	adds	r3, r3, r1
 800524e:	212b      	movs	r1, #43	@ 0x2b
 8005250:	7019      	strb	r1, [r3, #0]
 8005252:	7833      	ldrb	r3, [r6, #0]
 8005254:	2b2a      	cmp	r3, #42	@ 0x2a
 8005256:	d016      	beq.n	8005286 <_svfiprintf_r+0xfa>
 8005258:	0035      	movs	r5, r6
 800525a:	2100      	movs	r1, #0
 800525c:	200a      	movs	r0, #10
 800525e:	68e3      	ldr	r3, [r4, #12]
 8005260:	782a      	ldrb	r2, [r5, #0]
 8005262:	1c6e      	adds	r6, r5, #1
 8005264:	3a30      	subs	r2, #48	@ 0x30
 8005266:	2a09      	cmp	r2, #9
 8005268:	d950      	bls.n	800530c <_svfiprintf_r+0x180>
 800526a:	2900      	cmp	r1, #0
 800526c:	d111      	bne.n	8005292 <_svfiprintf_r+0x106>
 800526e:	e017      	b.n	80052a0 <_svfiprintf_r+0x114>
 8005270:	3501      	adds	r5, #1
 8005272:	e7af      	b.n	80051d4 <_svfiprintf_r+0x48>
 8005274:	9b05      	ldr	r3, [sp, #20]
 8005276:	6822      	ldr	r2, [r4, #0]
 8005278:	1ac0      	subs	r0, r0, r3
 800527a:	2301      	movs	r3, #1
 800527c:	4083      	lsls	r3, r0
 800527e:	4313      	orrs	r3, r2
 8005280:	002e      	movs	r6, r5
 8005282:	6023      	str	r3, [r4, #0]
 8005284:	e7cc      	b.n	8005220 <_svfiprintf_r+0x94>
 8005286:	9b07      	ldr	r3, [sp, #28]
 8005288:	1d19      	adds	r1, r3, #4
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	9107      	str	r1, [sp, #28]
 800528e:	2b00      	cmp	r3, #0
 8005290:	db01      	blt.n	8005296 <_svfiprintf_r+0x10a>
 8005292:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005294:	e004      	b.n	80052a0 <_svfiprintf_r+0x114>
 8005296:	425b      	negs	r3, r3
 8005298:	60e3      	str	r3, [r4, #12]
 800529a:	2302      	movs	r3, #2
 800529c:	4313      	orrs	r3, r2
 800529e:	6023      	str	r3, [r4, #0]
 80052a0:	782b      	ldrb	r3, [r5, #0]
 80052a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80052a4:	d10c      	bne.n	80052c0 <_svfiprintf_r+0x134>
 80052a6:	786b      	ldrb	r3, [r5, #1]
 80052a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80052aa:	d134      	bne.n	8005316 <_svfiprintf_r+0x18a>
 80052ac:	9b07      	ldr	r3, [sp, #28]
 80052ae:	3502      	adds	r5, #2
 80052b0:	1d1a      	adds	r2, r3, #4
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	9207      	str	r2, [sp, #28]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	da01      	bge.n	80052be <_svfiprintf_r+0x132>
 80052ba:	2301      	movs	r3, #1
 80052bc:	425b      	negs	r3, r3
 80052be:	9309      	str	r3, [sp, #36]	@ 0x24
 80052c0:	4e2d      	ldr	r6, [pc, #180]	@ (8005378 <_svfiprintf_r+0x1ec>)
 80052c2:	2203      	movs	r2, #3
 80052c4:	0030      	movs	r0, r6
 80052c6:	7829      	ldrb	r1, [r5, #0]
 80052c8:	f000 f9fe 	bl	80056c8 <memchr>
 80052cc:	2800      	cmp	r0, #0
 80052ce:	d006      	beq.n	80052de <_svfiprintf_r+0x152>
 80052d0:	2340      	movs	r3, #64	@ 0x40
 80052d2:	1b80      	subs	r0, r0, r6
 80052d4:	4083      	lsls	r3, r0
 80052d6:	6822      	ldr	r2, [r4, #0]
 80052d8:	3501      	adds	r5, #1
 80052da:	4313      	orrs	r3, r2
 80052dc:	6023      	str	r3, [r4, #0]
 80052de:	7829      	ldrb	r1, [r5, #0]
 80052e0:	2206      	movs	r2, #6
 80052e2:	4826      	ldr	r0, [pc, #152]	@ (800537c <_svfiprintf_r+0x1f0>)
 80052e4:	1c6e      	adds	r6, r5, #1
 80052e6:	7621      	strb	r1, [r4, #24]
 80052e8:	f000 f9ee 	bl	80056c8 <memchr>
 80052ec:	2800      	cmp	r0, #0
 80052ee:	d038      	beq.n	8005362 <_svfiprintf_r+0x1d6>
 80052f0:	4b23      	ldr	r3, [pc, #140]	@ (8005380 <_svfiprintf_r+0x1f4>)
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d122      	bne.n	800533c <_svfiprintf_r+0x1b0>
 80052f6:	2207      	movs	r2, #7
 80052f8:	9b07      	ldr	r3, [sp, #28]
 80052fa:	3307      	adds	r3, #7
 80052fc:	4393      	bics	r3, r2
 80052fe:	3308      	adds	r3, #8
 8005300:	9307      	str	r3, [sp, #28]
 8005302:	6963      	ldr	r3, [r4, #20]
 8005304:	9a04      	ldr	r2, [sp, #16]
 8005306:	189b      	adds	r3, r3, r2
 8005308:	6163      	str	r3, [r4, #20]
 800530a:	e762      	b.n	80051d2 <_svfiprintf_r+0x46>
 800530c:	4343      	muls	r3, r0
 800530e:	0035      	movs	r5, r6
 8005310:	2101      	movs	r1, #1
 8005312:	189b      	adds	r3, r3, r2
 8005314:	e7a4      	b.n	8005260 <_svfiprintf_r+0xd4>
 8005316:	2300      	movs	r3, #0
 8005318:	200a      	movs	r0, #10
 800531a:	0019      	movs	r1, r3
 800531c:	3501      	adds	r5, #1
 800531e:	6063      	str	r3, [r4, #4]
 8005320:	782a      	ldrb	r2, [r5, #0]
 8005322:	1c6e      	adds	r6, r5, #1
 8005324:	3a30      	subs	r2, #48	@ 0x30
 8005326:	2a09      	cmp	r2, #9
 8005328:	d903      	bls.n	8005332 <_svfiprintf_r+0x1a6>
 800532a:	2b00      	cmp	r3, #0
 800532c:	d0c8      	beq.n	80052c0 <_svfiprintf_r+0x134>
 800532e:	9109      	str	r1, [sp, #36]	@ 0x24
 8005330:	e7c6      	b.n	80052c0 <_svfiprintf_r+0x134>
 8005332:	4341      	muls	r1, r0
 8005334:	0035      	movs	r5, r6
 8005336:	2301      	movs	r3, #1
 8005338:	1889      	adds	r1, r1, r2
 800533a:	e7f1      	b.n	8005320 <_svfiprintf_r+0x194>
 800533c:	aa07      	add	r2, sp, #28
 800533e:	9200      	str	r2, [sp, #0]
 8005340:	0021      	movs	r1, r4
 8005342:	003a      	movs	r2, r7
 8005344:	4b0f      	ldr	r3, [pc, #60]	@ (8005384 <_svfiprintf_r+0x1f8>)
 8005346:	9803      	ldr	r0, [sp, #12]
 8005348:	e000      	b.n	800534c <_svfiprintf_r+0x1c0>
 800534a:	bf00      	nop
 800534c:	9004      	str	r0, [sp, #16]
 800534e:	9b04      	ldr	r3, [sp, #16]
 8005350:	3301      	adds	r3, #1
 8005352:	d1d6      	bne.n	8005302 <_svfiprintf_r+0x176>
 8005354:	89bb      	ldrh	r3, [r7, #12]
 8005356:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005358:	065b      	lsls	r3, r3, #25
 800535a:	d500      	bpl.n	800535e <_svfiprintf_r+0x1d2>
 800535c:	e72c      	b.n	80051b8 <_svfiprintf_r+0x2c>
 800535e:	b021      	add	sp, #132	@ 0x84
 8005360:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005362:	aa07      	add	r2, sp, #28
 8005364:	9200      	str	r2, [sp, #0]
 8005366:	0021      	movs	r1, r4
 8005368:	003a      	movs	r2, r7
 800536a:	4b06      	ldr	r3, [pc, #24]	@ (8005384 <_svfiprintf_r+0x1f8>)
 800536c:	9803      	ldr	r0, [sp, #12]
 800536e:	f000 f87b 	bl	8005468 <_printf_i>
 8005372:	e7eb      	b.n	800534c <_svfiprintf_r+0x1c0>
 8005374:	08005880 	.word	0x08005880
 8005378:	08005886 	.word	0x08005886
 800537c:	0800588a 	.word	0x0800588a
 8005380:	00000000 	.word	0x00000000
 8005384:	080050cd 	.word	0x080050cd

08005388 <_printf_common>:
 8005388:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800538a:	0016      	movs	r6, r2
 800538c:	9301      	str	r3, [sp, #4]
 800538e:	688a      	ldr	r2, [r1, #8]
 8005390:	690b      	ldr	r3, [r1, #16]
 8005392:	000c      	movs	r4, r1
 8005394:	9000      	str	r0, [sp, #0]
 8005396:	4293      	cmp	r3, r2
 8005398:	da00      	bge.n	800539c <_printf_common+0x14>
 800539a:	0013      	movs	r3, r2
 800539c:	0022      	movs	r2, r4
 800539e:	6033      	str	r3, [r6, #0]
 80053a0:	3243      	adds	r2, #67	@ 0x43
 80053a2:	7812      	ldrb	r2, [r2, #0]
 80053a4:	2a00      	cmp	r2, #0
 80053a6:	d001      	beq.n	80053ac <_printf_common+0x24>
 80053a8:	3301      	adds	r3, #1
 80053aa:	6033      	str	r3, [r6, #0]
 80053ac:	6823      	ldr	r3, [r4, #0]
 80053ae:	069b      	lsls	r3, r3, #26
 80053b0:	d502      	bpl.n	80053b8 <_printf_common+0x30>
 80053b2:	6833      	ldr	r3, [r6, #0]
 80053b4:	3302      	adds	r3, #2
 80053b6:	6033      	str	r3, [r6, #0]
 80053b8:	6822      	ldr	r2, [r4, #0]
 80053ba:	2306      	movs	r3, #6
 80053bc:	0015      	movs	r5, r2
 80053be:	401d      	ands	r5, r3
 80053c0:	421a      	tst	r2, r3
 80053c2:	d027      	beq.n	8005414 <_printf_common+0x8c>
 80053c4:	0023      	movs	r3, r4
 80053c6:	3343      	adds	r3, #67	@ 0x43
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	1e5a      	subs	r2, r3, #1
 80053cc:	4193      	sbcs	r3, r2
 80053ce:	6822      	ldr	r2, [r4, #0]
 80053d0:	0692      	lsls	r2, r2, #26
 80053d2:	d430      	bmi.n	8005436 <_printf_common+0xae>
 80053d4:	0022      	movs	r2, r4
 80053d6:	9901      	ldr	r1, [sp, #4]
 80053d8:	9800      	ldr	r0, [sp, #0]
 80053da:	9d08      	ldr	r5, [sp, #32]
 80053dc:	3243      	adds	r2, #67	@ 0x43
 80053de:	47a8      	blx	r5
 80053e0:	3001      	adds	r0, #1
 80053e2:	d025      	beq.n	8005430 <_printf_common+0xa8>
 80053e4:	2206      	movs	r2, #6
 80053e6:	6823      	ldr	r3, [r4, #0]
 80053e8:	2500      	movs	r5, #0
 80053ea:	4013      	ands	r3, r2
 80053ec:	2b04      	cmp	r3, #4
 80053ee:	d105      	bne.n	80053fc <_printf_common+0x74>
 80053f0:	6833      	ldr	r3, [r6, #0]
 80053f2:	68e5      	ldr	r5, [r4, #12]
 80053f4:	1aed      	subs	r5, r5, r3
 80053f6:	43eb      	mvns	r3, r5
 80053f8:	17db      	asrs	r3, r3, #31
 80053fa:	401d      	ands	r5, r3
 80053fc:	68a3      	ldr	r3, [r4, #8]
 80053fe:	6922      	ldr	r2, [r4, #16]
 8005400:	4293      	cmp	r3, r2
 8005402:	dd01      	ble.n	8005408 <_printf_common+0x80>
 8005404:	1a9b      	subs	r3, r3, r2
 8005406:	18ed      	adds	r5, r5, r3
 8005408:	2600      	movs	r6, #0
 800540a:	42b5      	cmp	r5, r6
 800540c:	d120      	bne.n	8005450 <_printf_common+0xc8>
 800540e:	2000      	movs	r0, #0
 8005410:	e010      	b.n	8005434 <_printf_common+0xac>
 8005412:	3501      	adds	r5, #1
 8005414:	68e3      	ldr	r3, [r4, #12]
 8005416:	6832      	ldr	r2, [r6, #0]
 8005418:	1a9b      	subs	r3, r3, r2
 800541a:	42ab      	cmp	r3, r5
 800541c:	ddd2      	ble.n	80053c4 <_printf_common+0x3c>
 800541e:	0022      	movs	r2, r4
 8005420:	2301      	movs	r3, #1
 8005422:	9901      	ldr	r1, [sp, #4]
 8005424:	9800      	ldr	r0, [sp, #0]
 8005426:	9f08      	ldr	r7, [sp, #32]
 8005428:	3219      	adds	r2, #25
 800542a:	47b8      	blx	r7
 800542c:	3001      	adds	r0, #1
 800542e:	d1f0      	bne.n	8005412 <_printf_common+0x8a>
 8005430:	2001      	movs	r0, #1
 8005432:	4240      	negs	r0, r0
 8005434:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005436:	2030      	movs	r0, #48	@ 0x30
 8005438:	18e1      	adds	r1, r4, r3
 800543a:	3143      	adds	r1, #67	@ 0x43
 800543c:	7008      	strb	r0, [r1, #0]
 800543e:	0021      	movs	r1, r4
 8005440:	1c5a      	adds	r2, r3, #1
 8005442:	3145      	adds	r1, #69	@ 0x45
 8005444:	7809      	ldrb	r1, [r1, #0]
 8005446:	18a2      	adds	r2, r4, r2
 8005448:	3243      	adds	r2, #67	@ 0x43
 800544a:	3302      	adds	r3, #2
 800544c:	7011      	strb	r1, [r2, #0]
 800544e:	e7c1      	b.n	80053d4 <_printf_common+0x4c>
 8005450:	0022      	movs	r2, r4
 8005452:	2301      	movs	r3, #1
 8005454:	9901      	ldr	r1, [sp, #4]
 8005456:	9800      	ldr	r0, [sp, #0]
 8005458:	9f08      	ldr	r7, [sp, #32]
 800545a:	321a      	adds	r2, #26
 800545c:	47b8      	blx	r7
 800545e:	3001      	adds	r0, #1
 8005460:	d0e6      	beq.n	8005430 <_printf_common+0xa8>
 8005462:	3601      	adds	r6, #1
 8005464:	e7d1      	b.n	800540a <_printf_common+0x82>
	...

08005468 <_printf_i>:
 8005468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800546a:	b08b      	sub	sp, #44	@ 0x2c
 800546c:	9206      	str	r2, [sp, #24]
 800546e:	000a      	movs	r2, r1
 8005470:	3243      	adds	r2, #67	@ 0x43
 8005472:	9307      	str	r3, [sp, #28]
 8005474:	9005      	str	r0, [sp, #20]
 8005476:	9203      	str	r2, [sp, #12]
 8005478:	7e0a      	ldrb	r2, [r1, #24]
 800547a:	000c      	movs	r4, r1
 800547c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800547e:	2a78      	cmp	r2, #120	@ 0x78
 8005480:	d809      	bhi.n	8005496 <_printf_i+0x2e>
 8005482:	2a62      	cmp	r2, #98	@ 0x62
 8005484:	d80b      	bhi.n	800549e <_printf_i+0x36>
 8005486:	2a00      	cmp	r2, #0
 8005488:	d100      	bne.n	800548c <_printf_i+0x24>
 800548a:	e0ba      	b.n	8005602 <_printf_i+0x19a>
 800548c:	497a      	ldr	r1, [pc, #488]	@ (8005678 <_printf_i+0x210>)
 800548e:	9104      	str	r1, [sp, #16]
 8005490:	2a58      	cmp	r2, #88	@ 0x58
 8005492:	d100      	bne.n	8005496 <_printf_i+0x2e>
 8005494:	e08e      	b.n	80055b4 <_printf_i+0x14c>
 8005496:	0025      	movs	r5, r4
 8005498:	3542      	adds	r5, #66	@ 0x42
 800549a:	702a      	strb	r2, [r5, #0]
 800549c:	e022      	b.n	80054e4 <_printf_i+0x7c>
 800549e:	0010      	movs	r0, r2
 80054a0:	3863      	subs	r0, #99	@ 0x63
 80054a2:	2815      	cmp	r0, #21
 80054a4:	d8f7      	bhi.n	8005496 <_printf_i+0x2e>
 80054a6:	f7fa fe2b 	bl	8000100 <__gnu_thumb1_case_shi>
 80054aa:	0016      	.short	0x0016
 80054ac:	fff6001f 	.word	0xfff6001f
 80054b0:	fff6fff6 	.word	0xfff6fff6
 80054b4:	001ffff6 	.word	0x001ffff6
 80054b8:	fff6fff6 	.word	0xfff6fff6
 80054bc:	fff6fff6 	.word	0xfff6fff6
 80054c0:	0036009f 	.word	0x0036009f
 80054c4:	fff6007e 	.word	0xfff6007e
 80054c8:	00b0fff6 	.word	0x00b0fff6
 80054cc:	0036fff6 	.word	0x0036fff6
 80054d0:	fff6fff6 	.word	0xfff6fff6
 80054d4:	0082      	.short	0x0082
 80054d6:	0025      	movs	r5, r4
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	3542      	adds	r5, #66	@ 0x42
 80054dc:	1d11      	adds	r1, r2, #4
 80054de:	6019      	str	r1, [r3, #0]
 80054e0:	6813      	ldr	r3, [r2, #0]
 80054e2:	702b      	strb	r3, [r5, #0]
 80054e4:	2301      	movs	r3, #1
 80054e6:	e09e      	b.n	8005626 <_printf_i+0x1be>
 80054e8:	6818      	ldr	r0, [r3, #0]
 80054ea:	6809      	ldr	r1, [r1, #0]
 80054ec:	1d02      	adds	r2, r0, #4
 80054ee:	060d      	lsls	r5, r1, #24
 80054f0:	d50b      	bpl.n	800550a <_printf_i+0xa2>
 80054f2:	6806      	ldr	r6, [r0, #0]
 80054f4:	601a      	str	r2, [r3, #0]
 80054f6:	2e00      	cmp	r6, #0
 80054f8:	da03      	bge.n	8005502 <_printf_i+0x9a>
 80054fa:	232d      	movs	r3, #45	@ 0x2d
 80054fc:	9a03      	ldr	r2, [sp, #12]
 80054fe:	4276      	negs	r6, r6
 8005500:	7013      	strb	r3, [r2, #0]
 8005502:	4b5d      	ldr	r3, [pc, #372]	@ (8005678 <_printf_i+0x210>)
 8005504:	270a      	movs	r7, #10
 8005506:	9304      	str	r3, [sp, #16]
 8005508:	e018      	b.n	800553c <_printf_i+0xd4>
 800550a:	6806      	ldr	r6, [r0, #0]
 800550c:	601a      	str	r2, [r3, #0]
 800550e:	0649      	lsls	r1, r1, #25
 8005510:	d5f1      	bpl.n	80054f6 <_printf_i+0x8e>
 8005512:	b236      	sxth	r6, r6
 8005514:	e7ef      	b.n	80054f6 <_printf_i+0x8e>
 8005516:	6808      	ldr	r0, [r1, #0]
 8005518:	6819      	ldr	r1, [r3, #0]
 800551a:	c940      	ldmia	r1!, {r6}
 800551c:	0605      	lsls	r5, r0, #24
 800551e:	d402      	bmi.n	8005526 <_printf_i+0xbe>
 8005520:	0640      	lsls	r0, r0, #25
 8005522:	d500      	bpl.n	8005526 <_printf_i+0xbe>
 8005524:	b2b6      	uxth	r6, r6
 8005526:	6019      	str	r1, [r3, #0]
 8005528:	4b53      	ldr	r3, [pc, #332]	@ (8005678 <_printf_i+0x210>)
 800552a:	270a      	movs	r7, #10
 800552c:	9304      	str	r3, [sp, #16]
 800552e:	2a6f      	cmp	r2, #111	@ 0x6f
 8005530:	d100      	bne.n	8005534 <_printf_i+0xcc>
 8005532:	3f02      	subs	r7, #2
 8005534:	0023      	movs	r3, r4
 8005536:	2200      	movs	r2, #0
 8005538:	3343      	adds	r3, #67	@ 0x43
 800553a:	701a      	strb	r2, [r3, #0]
 800553c:	6863      	ldr	r3, [r4, #4]
 800553e:	60a3      	str	r3, [r4, #8]
 8005540:	2b00      	cmp	r3, #0
 8005542:	db06      	blt.n	8005552 <_printf_i+0xea>
 8005544:	2104      	movs	r1, #4
 8005546:	6822      	ldr	r2, [r4, #0]
 8005548:	9d03      	ldr	r5, [sp, #12]
 800554a:	438a      	bics	r2, r1
 800554c:	6022      	str	r2, [r4, #0]
 800554e:	4333      	orrs	r3, r6
 8005550:	d00c      	beq.n	800556c <_printf_i+0x104>
 8005552:	9d03      	ldr	r5, [sp, #12]
 8005554:	0030      	movs	r0, r6
 8005556:	0039      	movs	r1, r7
 8005558:	f7fa fe62 	bl	8000220 <__aeabi_uidivmod>
 800555c:	9b04      	ldr	r3, [sp, #16]
 800555e:	3d01      	subs	r5, #1
 8005560:	5c5b      	ldrb	r3, [r3, r1]
 8005562:	702b      	strb	r3, [r5, #0]
 8005564:	0033      	movs	r3, r6
 8005566:	0006      	movs	r6, r0
 8005568:	429f      	cmp	r7, r3
 800556a:	d9f3      	bls.n	8005554 <_printf_i+0xec>
 800556c:	2f08      	cmp	r7, #8
 800556e:	d109      	bne.n	8005584 <_printf_i+0x11c>
 8005570:	6823      	ldr	r3, [r4, #0]
 8005572:	07db      	lsls	r3, r3, #31
 8005574:	d506      	bpl.n	8005584 <_printf_i+0x11c>
 8005576:	6862      	ldr	r2, [r4, #4]
 8005578:	6923      	ldr	r3, [r4, #16]
 800557a:	429a      	cmp	r2, r3
 800557c:	dc02      	bgt.n	8005584 <_printf_i+0x11c>
 800557e:	2330      	movs	r3, #48	@ 0x30
 8005580:	3d01      	subs	r5, #1
 8005582:	702b      	strb	r3, [r5, #0]
 8005584:	9b03      	ldr	r3, [sp, #12]
 8005586:	1b5b      	subs	r3, r3, r5
 8005588:	6123      	str	r3, [r4, #16]
 800558a:	9b07      	ldr	r3, [sp, #28]
 800558c:	0021      	movs	r1, r4
 800558e:	9300      	str	r3, [sp, #0]
 8005590:	9805      	ldr	r0, [sp, #20]
 8005592:	9b06      	ldr	r3, [sp, #24]
 8005594:	aa09      	add	r2, sp, #36	@ 0x24
 8005596:	f7ff fef7 	bl	8005388 <_printf_common>
 800559a:	3001      	adds	r0, #1
 800559c:	d148      	bne.n	8005630 <_printf_i+0x1c8>
 800559e:	2001      	movs	r0, #1
 80055a0:	4240      	negs	r0, r0
 80055a2:	b00b      	add	sp, #44	@ 0x2c
 80055a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055a6:	2220      	movs	r2, #32
 80055a8:	6809      	ldr	r1, [r1, #0]
 80055aa:	430a      	orrs	r2, r1
 80055ac:	6022      	str	r2, [r4, #0]
 80055ae:	2278      	movs	r2, #120	@ 0x78
 80055b0:	4932      	ldr	r1, [pc, #200]	@ (800567c <_printf_i+0x214>)
 80055b2:	9104      	str	r1, [sp, #16]
 80055b4:	0021      	movs	r1, r4
 80055b6:	3145      	adds	r1, #69	@ 0x45
 80055b8:	700a      	strb	r2, [r1, #0]
 80055ba:	6819      	ldr	r1, [r3, #0]
 80055bc:	6822      	ldr	r2, [r4, #0]
 80055be:	c940      	ldmia	r1!, {r6}
 80055c0:	0610      	lsls	r0, r2, #24
 80055c2:	d402      	bmi.n	80055ca <_printf_i+0x162>
 80055c4:	0650      	lsls	r0, r2, #25
 80055c6:	d500      	bpl.n	80055ca <_printf_i+0x162>
 80055c8:	b2b6      	uxth	r6, r6
 80055ca:	6019      	str	r1, [r3, #0]
 80055cc:	07d3      	lsls	r3, r2, #31
 80055ce:	d502      	bpl.n	80055d6 <_printf_i+0x16e>
 80055d0:	2320      	movs	r3, #32
 80055d2:	4313      	orrs	r3, r2
 80055d4:	6023      	str	r3, [r4, #0]
 80055d6:	2e00      	cmp	r6, #0
 80055d8:	d001      	beq.n	80055de <_printf_i+0x176>
 80055da:	2710      	movs	r7, #16
 80055dc:	e7aa      	b.n	8005534 <_printf_i+0xcc>
 80055de:	2220      	movs	r2, #32
 80055e0:	6823      	ldr	r3, [r4, #0]
 80055e2:	4393      	bics	r3, r2
 80055e4:	6023      	str	r3, [r4, #0]
 80055e6:	e7f8      	b.n	80055da <_printf_i+0x172>
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	680d      	ldr	r5, [r1, #0]
 80055ec:	1d10      	adds	r0, r2, #4
 80055ee:	6949      	ldr	r1, [r1, #20]
 80055f0:	6018      	str	r0, [r3, #0]
 80055f2:	6813      	ldr	r3, [r2, #0]
 80055f4:	062e      	lsls	r6, r5, #24
 80055f6:	d501      	bpl.n	80055fc <_printf_i+0x194>
 80055f8:	6019      	str	r1, [r3, #0]
 80055fa:	e002      	b.n	8005602 <_printf_i+0x19a>
 80055fc:	066d      	lsls	r5, r5, #25
 80055fe:	d5fb      	bpl.n	80055f8 <_printf_i+0x190>
 8005600:	8019      	strh	r1, [r3, #0]
 8005602:	2300      	movs	r3, #0
 8005604:	9d03      	ldr	r5, [sp, #12]
 8005606:	6123      	str	r3, [r4, #16]
 8005608:	e7bf      	b.n	800558a <_printf_i+0x122>
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	1d11      	adds	r1, r2, #4
 800560e:	6019      	str	r1, [r3, #0]
 8005610:	6815      	ldr	r5, [r2, #0]
 8005612:	2100      	movs	r1, #0
 8005614:	0028      	movs	r0, r5
 8005616:	6862      	ldr	r2, [r4, #4]
 8005618:	f000 f856 	bl	80056c8 <memchr>
 800561c:	2800      	cmp	r0, #0
 800561e:	d001      	beq.n	8005624 <_printf_i+0x1bc>
 8005620:	1b40      	subs	r0, r0, r5
 8005622:	6060      	str	r0, [r4, #4]
 8005624:	6863      	ldr	r3, [r4, #4]
 8005626:	6123      	str	r3, [r4, #16]
 8005628:	2300      	movs	r3, #0
 800562a:	9a03      	ldr	r2, [sp, #12]
 800562c:	7013      	strb	r3, [r2, #0]
 800562e:	e7ac      	b.n	800558a <_printf_i+0x122>
 8005630:	002a      	movs	r2, r5
 8005632:	6923      	ldr	r3, [r4, #16]
 8005634:	9906      	ldr	r1, [sp, #24]
 8005636:	9805      	ldr	r0, [sp, #20]
 8005638:	9d07      	ldr	r5, [sp, #28]
 800563a:	47a8      	blx	r5
 800563c:	3001      	adds	r0, #1
 800563e:	d0ae      	beq.n	800559e <_printf_i+0x136>
 8005640:	6823      	ldr	r3, [r4, #0]
 8005642:	079b      	lsls	r3, r3, #30
 8005644:	d415      	bmi.n	8005672 <_printf_i+0x20a>
 8005646:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005648:	68e0      	ldr	r0, [r4, #12]
 800564a:	4298      	cmp	r0, r3
 800564c:	daa9      	bge.n	80055a2 <_printf_i+0x13a>
 800564e:	0018      	movs	r0, r3
 8005650:	e7a7      	b.n	80055a2 <_printf_i+0x13a>
 8005652:	0022      	movs	r2, r4
 8005654:	2301      	movs	r3, #1
 8005656:	9906      	ldr	r1, [sp, #24]
 8005658:	9805      	ldr	r0, [sp, #20]
 800565a:	9e07      	ldr	r6, [sp, #28]
 800565c:	3219      	adds	r2, #25
 800565e:	47b0      	blx	r6
 8005660:	3001      	adds	r0, #1
 8005662:	d09c      	beq.n	800559e <_printf_i+0x136>
 8005664:	3501      	adds	r5, #1
 8005666:	68e3      	ldr	r3, [r4, #12]
 8005668:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800566a:	1a9b      	subs	r3, r3, r2
 800566c:	42ab      	cmp	r3, r5
 800566e:	dcf0      	bgt.n	8005652 <_printf_i+0x1ea>
 8005670:	e7e9      	b.n	8005646 <_printf_i+0x1de>
 8005672:	2500      	movs	r5, #0
 8005674:	e7f7      	b.n	8005666 <_printf_i+0x1fe>
 8005676:	46c0      	nop			@ (mov r8, r8)
 8005678:	08005891 	.word	0x08005891
 800567c:	080058a2 	.word	0x080058a2

08005680 <memmove>:
 8005680:	b510      	push	{r4, lr}
 8005682:	4288      	cmp	r0, r1
 8005684:	d902      	bls.n	800568c <memmove+0xc>
 8005686:	188b      	adds	r3, r1, r2
 8005688:	4298      	cmp	r0, r3
 800568a:	d308      	bcc.n	800569e <memmove+0x1e>
 800568c:	2300      	movs	r3, #0
 800568e:	429a      	cmp	r2, r3
 8005690:	d007      	beq.n	80056a2 <memmove+0x22>
 8005692:	5ccc      	ldrb	r4, [r1, r3]
 8005694:	54c4      	strb	r4, [r0, r3]
 8005696:	3301      	adds	r3, #1
 8005698:	e7f9      	b.n	800568e <memmove+0xe>
 800569a:	5c8b      	ldrb	r3, [r1, r2]
 800569c:	5483      	strb	r3, [r0, r2]
 800569e:	3a01      	subs	r2, #1
 80056a0:	d2fb      	bcs.n	800569a <memmove+0x1a>
 80056a2:	bd10      	pop	{r4, pc}

080056a4 <_sbrk_r>:
 80056a4:	2300      	movs	r3, #0
 80056a6:	b570      	push	{r4, r5, r6, lr}
 80056a8:	4d06      	ldr	r5, [pc, #24]	@ (80056c4 <_sbrk_r+0x20>)
 80056aa:	0004      	movs	r4, r0
 80056ac:	0008      	movs	r0, r1
 80056ae:	602b      	str	r3, [r5, #0]
 80056b0:	f7fb fca6 	bl	8001000 <_sbrk>
 80056b4:	1c43      	adds	r3, r0, #1
 80056b6:	d103      	bne.n	80056c0 <_sbrk_r+0x1c>
 80056b8:	682b      	ldr	r3, [r5, #0]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d000      	beq.n	80056c0 <_sbrk_r+0x1c>
 80056be:	6023      	str	r3, [r4, #0]
 80056c0:	bd70      	pop	{r4, r5, r6, pc}
 80056c2:	46c0      	nop			@ (mov r8, r8)
 80056c4:	2000039c 	.word	0x2000039c

080056c8 <memchr>:
 80056c8:	b2c9      	uxtb	r1, r1
 80056ca:	1882      	adds	r2, r0, r2
 80056cc:	4290      	cmp	r0, r2
 80056ce:	d101      	bne.n	80056d4 <memchr+0xc>
 80056d0:	2000      	movs	r0, #0
 80056d2:	4770      	bx	lr
 80056d4:	7803      	ldrb	r3, [r0, #0]
 80056d6:	428b      	cmp	r3, r1
 80056d8:	d0fb      	beq.n	80056d2 <memchr+0xa>
 80056da:	3001      	adds	r0, #1
 80056dc:	e7f6      	b.n	80056cc <memchr+0x4>

080056de <memcpy>:
 80056de:	2300      	movs	r3, #0
 80056e0:	b510      	push	{r4, lr}
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d100      	bne.n	80056e8 <memcpy+0xa>
 80056e6:	bd10      	pop	{r4, pc}
 80056e8:	5ccc      	ldrb	r4, [r1, r3]
 80056ea:	54c4      	strb	r4, [r0, r3]
 80056ec:	3301      	adds	r3, #1
 80056ee:	e7f8      	b.n	80056e2 <memcpy+0x4>

080056f0 <_realloc_r>:
 80056f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056f2:	0006      	movs	r6, r0
 80056f4:	000c      	movs	r4, r1
 80056f6:	0015      	movs	r5, r2
 80056f8:	2900      	cmp	r1, #0
 80056fa:	d105      	bne.n	8005708 <_realloc_r+0x18>
 80056fc:	0011      	movs	r1, r2
 80056fe:	f7ff fc55 	bl	8004fac <_malloc_r>
 8005702:	0004      	movs	r4, r0
 8005704:	0020      	movs	r0, r4
 8005706:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005708:	2a00      	cmp	r2, #0
 800570a:	d103      	bne.n	8005714 <_realloc_r+0x24>
 800570c:	f7ff fbe2 	bl	8004ed4 <_free_r>
 8005710:	002c      	movs	r4, r5
 8005712:	e7f7      	b.n	8005704 <_realloc_r+0x14>
 8005714:	f000 f81c 	bl	8005750 <_malloc_usable_size_r>
 8005718:	0007      	movs	r7, r0
 800571a:	4285      	cmp	r5, r0
 800571c:	d802      	bhi.n	8005724 <_realloc_r+0x34>
 800571e:	0843      	lsrs	r3, r0, #1
 8005720:	42ab      	cmp	r3, r5
 8005722:	d3ef      	bcc.n	8005704 <_realloc_r+0x14>
 8005724:	0029      	movs	r1, r5
 8005726:	0030      	movs	r0, r6
 8005728:	f7ff fc40 	bl	8004fac <_malloc_r>
 800572c:	9001      	str	r0, [sp, #4]
 800572e:	2800      	cmp	r0, #0
 8005730:	d101      	bne.n	8005736 <_realloc_r+0x46>
 8005732:	9c01      	ldr	r4, [sp, #4]
 8005734:	e7e6      	b.n	8005704 <_realloc_r+0x14>
 8005736:	002a      	movs	r2, r5
 8005738:	42bd      	cmp	r5, r7
 800573a:	d900      	bls.n	800573e <_realloc_r+0x4e>
 800573c:	003a      	movs	r2, r7
 800573e:	0021      	movs	r1, r4
 8005740:	9801      	ldr	r0, [sp, #4]
 8005742:	f7ff ffcc 	bl	80056de <memcpy>
 8005746:	0021      	movs	r1, r4
 8005748:	0030      	movs	r0, r6
 800574a:	f7ff fbc3 	bl	8004ed4 <_free_r>
 800574e:	e7f0      	b.n	8005732 <_realloc_r+0x42>

08005750 <_malloc_usable_size_r>:
 8005750:	1f0b      	subs	r3, r1, #4
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	1f18      	subs	r0, r3, #4
 8005756:	2b00      	cmp	r3, #0
 8005758:	da01      	bge.n	800575e <_malloc_usable_size_r+0xe>
 800575a:	580b      	ldr	r3, [r1, r0]
 800575c:	18c0      	adds	r0, r0, r3
 800575e:	4770      	bx	lr

08005760 <_init>:
 8005760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005762:	46c0      	nop			@ (mov r8, r8)
 8005764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005766:	bc08      	pop	{r3}
 8005768:	469e      	mov	lr, r3
 800576a:	4770      	bx	lr

0800576c <_fini>:
 800576c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800576e:	46c0      	nop			@ (mov r8, r8)
 8005770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005772:	bc08      	pop	{r3}
 8005774:	469e      	mov	lr, r3
 8005776:	4770      	bx	lr
